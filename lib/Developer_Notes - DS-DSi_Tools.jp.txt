===============================================================================
Freescale CodeWarrior(TM) Development Studio for NINTENDO DSi 1.1
===============================================================================

2008年12月8日

目次

  ・重要なお知らせ
  ・新しいコンパイラについて
  ・IS-NITRO-DEBUGGER と IS-TWL-DEBUGGER ソフトウェア
  ・CodeWarrior for NINTENDO DSi のインストールについて
  ・新しい機能
  ・変更の概要
  ・有用な情報
  ・制限事項
  ・既知の問題


===============================================================================
       重要なお知らせ。ツールの使用前にお読みください
===============================================================================

注意：バージョン1.1以降からは、『NINTENDO TWL』の表記だった箇所は
      『NINTENDO DSi』の表記に変更されました。

このリリースノートにはドキュメントに反映されていない直前の変更点や特に注意する
べき項目などの重要な情報を記載しています。マニュアルやその他のドキュメントの内
容を置き換える情報もありますので、記載されている情報を注意してお読みください。

*** ライセンス期限は2009年3月31日までとなります ***


重要！
このバージョンのIDEは、以前の CW for NINTENDO DS で作成されたプロジェクトを開く
際にプロジェクトの変換を行います。プロジェクトが変換された後は、それを以前のバ
ージョンの CW for NINTENDO DS から使用しないでください。変換に先立ち、プロジェ
クトファイルはファイル名末尾に"old.mcp"が付加された名前にリネームされます。
この"old.mcp"プロジェクトを以前のバージョンの CW for NINTENDO DS から使用するこ
ともできます。プロジェクトの変換が行われる前には警告が表示され、ユーザーはキャ
ンセルを選択してプロジェクト変換を防止することができます。

（例）"SimpleProject.mcp"という名前のプロジェクトを開くと、このIDEはこのプロジ
ェクトを変換して "SimpleProject.old.mcp" を作成し、SimpleProject.mcp と同じフォ
ルダに置きます。


===============================================================================
新しいコンパイラについて
===============================================================================

新しいコンパイラについての補足説明が以下のファイルに記載されていますのでご参照
ください。

{CW インストールフォルダ}\Release_Notes\ARM\Compiler_Release_Notes\ARM_Compiler4.0_Transition_Notes.jp.txt


===============================================================================
IS-NITRO-DEBUGGER と IS-TWL-DEBUGGER ソフトウェア
===============================================================================

このバージョンの Stationery と Examples では、"libisdmainparm.a" をデバッグ出力
を行うために使用しています。CodeWarrior for DSi のインストール前に IS-NITRO-DEBUGGER
と IS-TWL-DEBUGGER ソフトウェアをインストールする必要があります。CodeWarrior デ
バッガからIS-NITRO-DEBUGGER/IS-TWL-DEBUGGER ハードウェアを使用するためにも必要
です。DLL の不整合に起因する問題を避けるために、NTSC-ONLINE から利用可能な最新
の IS-NITRO-DEBUGGER/IS-TWL-DEBUGGER ソフトウェアをインストールするようにしてく
ださい。

IS-NITRO-DEBUGGER 又は IS-TWL-DEBUGGER ソフトウェアをインストールしていない状態
で CodeWarrior のインストールを行ってしまった場合には、以下の手順で CodeWarrior
のインストールを完了してください。

１）IS-NITRO-DEBUGGER 及び IS-TWL-DEBUGGER ソフトウェアをインストールしてくださ
    い。インストール時に、CodeWarrior IDE ソースツリーで必要となる環境変数が作
    成されます。
    - DS:  IS-NITRO-DEBUGGER をインストールし、環境変数 IS_NITRO_DIR が作成される。
    - DSi: IS-TWL-DEBUGGER をインストールし、環境変数 IS_TWL_DEBUGGER_DIR が作成される。

２）CodeWarrior インストールフォルダ内の以下のバッチファイルを実行してください。
     .\bin\setTWLSrcTree.bat
    バッチファイルの実行によりソースツリーの設定が正しく行われます。


===============================================================================
CodeWarrior for NINTENDO DSi のインストールについて
===============================================================================

インストール方法：

1) CW_NINTENDO_DSi_R1.1.exe を実行してインストーラを実行してください。

   インストーラの終了時にコンピュータの再起動が必要となります。

   Windows Vistaへインストールしている場合は、本文書の「既知の問題・制限事項」
   の欄もご参照ください。

2) エディタやデバッガで日本語を表示するためには、「編集 - 環境設定」メニューか
   ら「IDE設定」ダイアログを表示し、「フォント & タブ」パネルで日本語フォントを
   指定してください。

（例）フォント: MSゴシック, スクリプト: 日本語, 標準エンコーディング: Shift-JIS

環境変数の設定
----------------
インストーラは TWL SDK 及び Nitro SDK のフォルダ位置を検索するようになりました。
次の順番で検索を行います。

    1. TWLSDK_ROOT 及び NITROSDK_ROOT 環境変数
    2. IRISSDK_ROOT 環境変数
    3. ドライブ C のルート（デフォルトのフォルダ名を使用します）

どの場合でも、インストーラは処理を進める前にパス確認のメッセージを表示します。
ユーザーのパス確認後に、インストーラは CW_TWLSDK_ROOT 及び CW_NITROSDK_ROOT
環境変数の作成を行います。

ソースツリーの設定
--------------------
インストーラは処理の終了前に、再起動を行うためのダイアログを表示します。再起動
を行うことを選択すると、CodeWarrior IDE 用の ソースツリー {TWLSDK_ROOT}を 
CW_TWLSDK_ROOT 環境変数を参照するように設定し、ソースツリー {NITROSDK_ROOT}を
CW_NITROSDK_ROOT 環境変数を参照するように設定します。

注意：インストール時に環境変数に設定するパスが正しくないと、CodeWarrior プロジ
ェクトでのビルドが正常に行えません。ビルドを正常に行うために、CW_TWLSDK_ROOT 
及び CW_NITROSDK_ROOT 環境変数が正しいパスを指すように修正してください。また、
パス位置表現はオペレーティングシステム標準の表現方法である必要があります。
（Windows Vistaへインストールしている場合は、本文書の「既知の問題」の欄もご参照
ください。）

パス区切りの文字にはスラッシュ '/' では無く、'\'をご使用下さい。スラッシュが使
用された場合、IDEが正しく動作しない場合があります。

問題の修正方法
----------------
再起動中に問題が発生した場合、ソースツリーの作成に失敗しているかもしれません。
インストールの完了にはIDE の起動が必要ですので、インストール時の起動に失敗した
場合には IDE の起動状態が予期しない状態になっているかもしれません。

起動が失敗したような場合には、{CW インストールフォルダ}\bin を開いて、ソースツ
リーの追加を行うために setTWLSrcTree.bat を実行してください。

SDK 更新時の注意
----------------------
新たに TWL SDK 又は Nitro SDK を更新する場合には、CodeWarriorの使用する
CW_TWLSDK_ROOT 又は CW_NITROSDK_ROOT 環境変数が、使用する SDK のインストールフ
ォルダに設定されていることを確認してください。


===============================================================================
新しい機能
===============================================================================

- LTDMAIN セクションに LTD用ライブラリを追加して使用することをサポートしました。
  LTD用ライブラリを LTDMAIN セクションに追加する手順は次の通りです。

  １．CodeWarriorプロジェクトウィンドウの『オーバーレイ』タブ内で右クリックし、
      コンテキストメニューから『オーバーレイ グループ作成...』を選択する。
      オーバーレイグループ名として「@LTDMAIN」という名前を入力する。
      （先頭に半角の @ (アットマーク) が必ず必要です。）
   
   ２．作成されたグループをダブルクリックし、『ベースコードアドレス』に「FF」を
       指定する。
   
       *  「@LTDMAIN」オーバーレイグループは、共有のオーバーレイグループより上
          位のアドレスに配置する必要があります。「@LTDMAIN」オーバーレイグルー
          プを作成する場合、通常のオーバーレイグループの上位アドレスになるよう
          に配置して下さい。
          （『オーバーレイ』タブ内での配置設定では、下側が上位アドレスになりま
             す。）
   
   ３．「@LTDMAIN」オーバーレイグループのツリーを展開表示させ、作成されているオ
       ーバーレイモジュール「新規オーバーレイ」をダブルクリックし、オーバーレイ
       名を「LTDMAIN」という名前に変更する。
   
   ４．LTD用ライブラリ等を「LTDMAIN」オーバーレイモジュールへドラッグ＆ドロップ
       する。 もしくは、オーバーレイモジュールを右クリックし、コンテキストメニ
       ューから『ファイルを追加...』を選択して追加する。

- 新しいプリフィックスファイル「twl_TS_LTD_prefix.h」が
   {CW インストールフォルダ}\ARM_EABI_Support\TWL\prefix\
  の中に追加されました。
  全てのLTD用プロジェクトで必要な SDK_TWLLTD の定義が記述されています。
  このプリフィックスファイルは全てのLTD用ステーショナリに含まれます。
  既存のプリフィックスファイル「twl_TS_prefix.h」には SDK_TWLHYB の定義が記述さ
  れており、全てのハイブリッド用プロジェクトから使われます。
  
   *  以前の twl_TS_prefix.h には SDK_RELEASE の定義が記述されていましたが削除
      されました。また、twl_TS_LTD_prefix.h にも SDK_RELEASE の定義は記述しませ
      ん。 以前の twl_TS_prefix.h では、この SDK_RELEASE の定義が入ってしまって
      いたため、Debug用ターゲット及びROM用ターゲットで問題がありました。
      この削除により、既存のプロジェクトではビルドに失敗する可能性があるかもし
      れません。 その場合は、ターゲット設定ウィンドウの C/C++ Preprocessor パネ
      ルの Prefix Text 欄に適切な SDK のターゲット定義（SDK_DEBUG / SDK_RELEASE
      / SDK_FINALROM）が記述されているかを確認して下さい。

- 本製品は次のオペレーティングシステム上でテストされました。
       Windows XP SP2
       Windows XP SP3
       Windows Vista
       Windows Vista SP1


===============================================================================
このリリースでの変更の概要 - DSiリリース 1.1
===============================================================================

全般
-----------
- MTWX31599  Windows Vista で、Program Files フォルダ以下にインストールされた場
             合に {CW インストールフォルダ}\Examples にあるプロジェクトのビルド
             がWindows の「ユーザーアカウント制御」の機能の影響により失敗する問
             題を修正しました。

- MTWX31868  Nitro用環境とTWL用環境を統合したインストーラーでの提供になりました。

- MTWX31870  公式な製品名称を変更しました。

- MTWX31872  Nitro用のステーショナリとサンプルを SDK 5.0 に対応させました。

- MTWX31873  LTDアプリケーション用のステーショナリを追加しました。

- MTWX31875  NANDアプリケーション用のステーショナリを追加しました。

- MTWX31896  LTDMAIN セクションに LTD用ライブラリを追加して使用する為の機能を追
             加しました。

- MTWX31993  ステーショナリ内の、makerom.TWL.exe 用の TARGET_PLATFORM オプショ
             ンに指定しているパラメータ値をSDKの仕様に合わせて変更しました。

- MTWX32501  TWL用のプリフィックスファイル「twl_TS_prefix.h」に SDK_RELEASE が
             記述されている問題を修正しました。

CodeWarrior for DS 及び DSi の以前のリリースでの変更については ChangeHistory.txt
をご参照ください。

コンパイラ
-----------
- MTWX31921  最適化レベルが2以上の場合に、charポインタ型を使用する処理において
             間違ったコードが生成される場合がある問題を修正しました。

- MTWX31928  警告「illegal jump past declaration/initializer」が発生する状況の
             場合、問題が無い変数に対してもこの警告が表示されてしまう問題を修正
             しました。

- MTWX31931  コマンドラインでバイナリコンパイラ（BinToELF.exe）を使用した時、
             「-output」オプションで与える文字列の長さが偶数になる場合、 出力フ
             ァイルが生成されない問題を修正しました。

- MTWX31970  Thumbモードの場合、インラインアセンブラでイミディエイトを伴わない
             「ldr」命令について間違ったコードが生成される問題を修正しました。

このリリースでのARMコンパイラへの変更の詳細については ARM_Compiler_Notes.txt を
ご参照ください。


===============================================================================
有用な情報
===============================================================================

- 複数のIDE設定/ワークスペース - インストールされたCodeWarriorのIDE設定は、通常
  は共有されるものとして、次のフォルダ位置で管理されています。

  C:\Documents and Settings\(ユーザー名)\Local Settings\Application Data\Metrowerks

  CodeWarriorのインストール毎に、次の2つのファイルを"..\bin\IDE.exe"と同じディレ
  クトリにコピーする事を推奨します。

	1. CodeWarrior IDE 5.9 Prefs...(IDE設定)
	2. default-5.9.0.cww...........(デフォルトワークスペース)

  これにより、インストールされているそれぞれの CodeWarrior ツール毎に、専用の設
  定を持てるようになります。

- DSi用プロジェクトのステーショナリは X4 ハードウェアをサポートするために
  #define SDK_TS_VERSION 400 を使用しています。他のバージョンのハードウェアを
  使用している場合は、ご使用中の環境に合わせて Twl_TS.h 内の SDK_TS_VERSION の
  定義を変更してください。


===============================================================================
制限事項
===============================================================================

- 使用できない機能
  IDE User's Guideに記載されている機能のいくつかは、この製品では使用できません。
  以下は、使用できないかまたは非対応の機能のリストです。
    * コンソールアプリケーションの作成 (IDE User's Guide 第8章)
    * 「Flash Programmer」ダイアログ (IDE User's Guide 第22章)
    * 「Hardware Diagnosticsダイアログ (IDE User's Guide 第22章)
    * ロジックアナライザの使用  (IDE User's Guide 第22章)

- ソースツリーの作成
　CodeWarriorのインストールの際、存在しないフォルダを環境変数に指定すると、ソ
  ースツリーの作成が失敗します。これは、CodeWarriorのインストールの前に SDKや
  IS-TWL-DEBUGGER ソフトウェアがインストールされなかった場合に起こる事がありま
  す。プラットフォームの SDK や IS-TWL-DEBUGGER ソフトウェアを CodeWarrior よ
  りも先にインストールする事を推奨します。

- メイクファイルエクスポータの制限事項
  このエクスポータは初歩的な makefile を生成します。生成された makefile を GNU
  の make ユーティリティで正しく動作させるには変更が必要です。IDE が生成する
  makefile には、修正と追加が必要な箇所を特定するのを助けるテキストが含まれてい
  ます。make ユーティリティに使用させたいビルドコマンド、コンパイラスイッチとオ
  プションも追加することになります。
  この制限のため、メイクファイルエクスポータは単純な CodeWarriorプロジェクトほ
  ど、より有用なエクスポートが行われる傾向があります。

  メイクファイルエクスポータを起動するには、「プロジェクト」メニューから「プロ
  ジェクトをGNU Makefile形式で書き出す」を選択します。

- 評価式ウィンドウの制限事項
  複数のスコープにある複数の同名の変数をデバッグすると、各スコープの全ての変数
  の値が評価式ウィンドウに正しく反映されないときがあります。

- CW_MULTICORE_FOCUS_ONLY 環境変数について
  インストーラは、環境変数 CW_MULTICORE_FOCUS_ONLY を設定するようになりました。
  この環境変数はCodeWarrior内部で使用しています。この環境変数を手動で削除または
  変更しないでください。

- デバッガは FS_StartOverlay() 関数の内部にステップイン出来ません。
  また、FS_StartOverlay() 関数の先頭位置にブレークポイントを設置することは出来
  ますが、デバッガはこのブレークポイントでは停止できません。
  これは、デバッガがオーバーレイ管理の為にこの位置に内部的なブレークポイントを
  設置し使用している為です。
  FS_StartOverlay() 関数内部で先頭ではない位置に設置したブレークポイントならば
  デバッガは停止できます。

- 再配置可能 EL モジュールのデバッグ
  再配置可能 EL モジュールのデバッグを正しく行うためには、それらのモジュールが
  リンカの部分リンク機能（-partial オプション）を使ってビルドされている必要があ
  ります。静的ライブラリ（-library オプション）を指定した再配置可能モジュールの
  ビルドでは、デバッガはそのファイルを正しくデバッグできません。

  elfファイルをIDEにドラッグ＆ドロップしたときにデバッガに再配置可能 EL モジュ
  ールのシンボル情報をロードさせてソースレベルデバッグをできるようにするには、
  シンボル情報を持っている部分リンクされたファイルを次のどちらかに置いてくださ
  い：
    * .tlfファイルと同じディレクトリ内。
    * ドラッグ＆ドロップ操作によって作成されたプロジェクトのサーチパス内。

- DSiでのウォッチポイントの制限事項
  ウォッチポイントがヒットしたときに、デバッガは、ウォッチポイントがヒットした
  位置から 1命令 または 2 命令後ろで停止することがあります。これはハードウェア
  の制限によるものです。

  2つのウォッチポイントが設定されると、ウォッチポイントのダイアログがメッセー
  ジ「アドレス0xXXXXXXXXのWatchpoint」を表示します。ハードウェアの制限により、
  デバッガは、どちらのウォッチポイントにヒットしたのかを知ることができません。


===============================================================================
既知の問題
===============================================================================

- FB6033     IDEは、波ダッシュ（U+301C）など、Shift_JISで定義されていない日本語
             文字を含むUTF-8のファイルを正しく表示できません。

- MTWX28573  「IDEその他設定」の「テキストベースプロジェクトを使用」がオフのと
             き、ワークスペースを指定する事でテキストベースプロジェクトを開くか、
             または、ファイルメニューからテキストベースプロジェクトを開くと、エ
             ラーメッセージ「リソースファイルエラー 207008。プロジェクトを開け
             ません...」が表示される場合があります。テキストベースプロジェクト
             のmcpファイルをIDEにドラッグ＆ドロップすると、その内容がIDEの内蔵
             エディタで表示されます。

- MTWX30362  メモリビューを使用しているときにステップ実行を行うと、ビューの再表
             示が行われ、間違ったアドレスが表示される場合があります。変更される
             前の位置に戻すには「表示領域」欄をクリックしてEnterキーを押します。

- MTWX31311  大量の文字列が連続して出力される場合に、OS_Printf() または 
             OS_TPrintf() による出力文字列が正しく表示されない場合がある。

- no number  BOMの無いUTF-16 ビッグエンディアンのファイルは、内蔵エディタおよび
             デバッガウィンドウで正しく表示されません。

- no number  内蔵エディタでUTF-8/16のファイルを保存するとBOMバイトが削除されま
             す。

- インストーラは任天堂の SDK ディレクトリを指し示す環境変数を作成しますが、
  Windows Vistaでのインストールでは、環境変数が正しく作成されない場合があります。
  環境変数は CodeWarrior のソースツリー設定パネルで確認および変更することができ
  ます。

  環境変数が正しく定義されたか確認するには：
  1. CodeWarrior IDE を起動します。
  2. 編集 -> 環境設定... を選択し、「一般設定」にある「ソースツリー」を選択しま
     す。
  3. TWLSDK_ROOT, CW_TWLSDK_ROOT, NITROSDK_ROOT, CW_NITROSDK_ROOT が、使用して
     いる SDK のインストール先を指し示すように定義されている事を確認します。
     また、IS_TWL_DEBUGGER_DIR 及び IS_NITRO_DIR が IS-TWL-DEBUGGER 及び
     IS-NITRO-DEBUGGER のインストール先を指し示すように定義されている事を確認し
     ます。

     TWL のパスの定義が正しく無かった場合は以下を行ってください。
     a. ソースツリー情報の「名前」欄に TWLSDK_ROOT と書き込む。
     b. 「形式」欄で絶対パスを選択する。
     c. 「選択...」ボタンを押して「フォルダの参照」ダイアログを開き、TWL SDKの
        ルートディレクトリ（IS_TWL_DEBUGGER_DIR を設定する場合はIS_TWL_DEBUGGER
        のインストール先）を選択する。
     d. 「追加」ボタンをクリックする。
     e. IS_TWL_DEBUGGER_DIR と CW_TWLSDK_ROOT についても上記手順 a から d を繰
        り返す。
     f. 「適用」ボタンをクリックする。
     g. 「OK」ボタンをクリックしてIDE設定パネルを閉じる。

     Nitro のパスの定義が正しく無かった場合は以下を行ってください。
     a. ソースツリー情報の「名前」欄に NITROSDK_ROOT と書き込む。
     b. 「形式」欄で絶対パスを選択する。
     c. 「選択...」ボタンを押して「フォルダの参照」ダイアログを開き、TWL SDKの
        ルートディレクトリ（IS_NITRO_DIR を設定する場合は IS-NITRO-DEBUGGER の
        インストール先）を選択する。
     d. 「追加」ボタンをクリックする。
     e. IS_NITRO_DIR と CW_NITROSDK_ROOT についても上記手順 a から d を繰り返す。
     f. 「適用」ボタンをクリックする。
     g. 「OK」ボタンをクリックしてIDE設定パネルを閉じる。


- デバッグターゲットとしてEnsataを使用している場合に、デバッグ開始時にEnsataが
  正しく起動しない場合は、以下のファイルにEnsataへのパスが正しく設定されている
  かを確認して下さい。
    {CW インストールフォルダ}\bin\\plugins\support\Nitro\IS\est_cw_debugger.ini
  また、デバッグ開始時にEnsataをアップデートする必要があるというエラーメッセー
  ジが表示された後にIDEを終了させる時、まれにIDEがクラッシュする場合があります。

- デバッガは2バイトコードを含むフォルダ内にあるROMバイナリファイル(.srl)のロー
  ドができません。

- ターゲット設定の『リモートデバッグ』パネルで接続先のデバイスが表示されない場
  合があります。
  もしこの現象が発生した場合は、設定ファイルが壊れている可能性がありますので、
    {Windowsユーザディレクトリ}\{自分のログオン名}\Local Settings\Application Data\Metrowerks\
  の中の Remote_Connections.xml ファイルを消してみて下さい。
  （IDEを起動すると再度このファイルが作り直されます。）

- プロジェクトでプロファイルデータの表示用にプロファイリング機能を使用すると、
  「データ」メニューの「トレースを表示」メニューが使用可能になりますが、
  CodeWarrior for DSのデバッガではトレース機能がサポートされていないため、トレ
  ースウィンドウには有効なデータは表示されません。


