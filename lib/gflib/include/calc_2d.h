//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *	GAME FREAK inc.
 *
 *	@file		calc_2d.h
 *	@brief		2D計算処理
 *	@author		tomoya takahashi
 *	@data		2009.03.30
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#ifndef __CALC_2D_H__
#define __CALC_2D_H__

#include <nitro.h>

#ifdef _cplusplus
extern "C"{
#endif


//-----------------------------------------------------------------------------
/**
 *					定数宣言
*/
//-----------------------------------------------------------------------------
#define	GFL_CALC2D_AFFINE_MAX_NORMAL	( 0 )	// 拡縮の角度を0〜0xffffで計算
#define	GFL_CALC2D_AFFINE_MAX_256		( 1 )	// 拡縮の角度を0〜255で計算
#define	GFL_CALC2D_AFFINE_MAX_360		( 2 )	// 拡縮の角度の0〜359で計算

//-----------------------------------------------------------------------------
/**
 *					構造体宣言
*/
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
/**
 *					プロトタイプ宣言
*/
//-----------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
/**
 * BG・OBJのAffine用変換行列を作成 ( 2D )
 *
 * @param	mtx			変換行列格納場所
 * @param	rad			角度 ( MAX = 0xffff )
 * @param	scale_x		X方向の拡大率
 * @param	scale_y		Y方向の拡大率
 * @param	mode		角度変換モード
 *
 * @return	変換行列
 *
 * @li	mode = GFL_CALC2D_AFFINE_MAX_256 : theta < 256
 * @li	mode = GFL_CALC2D_AFFINE_MAX_360 : theta < 360
 * @li	scale_x(y) = FX32_ONE : １倍
 */
//--------------------------------------------------------------------------------------------
extern void GFL_CALC2D_GetAffineMtx22( MtxFx22 * mtx, u16 rad, fx32 scale_x, fx32 scale_y, u8 mode );


//-----------------------------------------------------------------------------
/**
 *	Game Freak　オリジナル
 *	平面２頂点から回転動さ距離値を取得する
 */
//-----------------------------------------------------------------------------
//----------------------------------------------------------------------------
/**
 *	@brief	平面２頂点からGameFreakオリジナル回転動さ値を取得する
 *
 *	@param	x0		A点ｘ座標
 *	@param	y0		A点ｙ座標
 *	@param	x1		B点ｘ座標
 *	@param	y1		B点ｙ座標
 *
 *	@return	ゲーフリ独自回転動さ距離値
 */
//-----------------------------------------------------------------------------
extern s32 GFL_CALC2D_CircleVectorMove( s32 x0, s32 y0, s32 x1, s32 y1 );


//----------------------------------------------------------------------------
/**
 *	@brief	平面２頂点から任意の動作値を取得する
 *
 *	@param	x0		A点ｘ座標
 *	@param	y0		A点ｙ座標
 *	@param	x1		B点ｘ座標
 *	@param	y1		B点ｙ座標
 *	@param	roopnum	１回転を表す距離
 *
 *	@return	roopnum単位の動作値
 */
//-----------------------------------------------------------------------------
extern s32 GFL_CALC2D_CircleVectorNum( s32 x0, s32 y0, s32 x1, s32 y1, u16 roopnum );


//----------------------------------------------------------------------------
/**
 *	@brief	平面２頂点から任意の動作値を取得する
 *
 *	@param	x0		A点ｘ座標
 *	@param	y0		A点ｙ座標
 *	@param	x1		B点ｘ座標
 *	@param	y1		B点ｙ座標
 *	@param	r		基準半径	この半径で上で移動した距離を求めます
 *
 *	@return	移動距離
 *
 *	応用方法
 *		rの円周を求め、移動距離が円周の何パーセントに当たるかにより、回転角度を求めることも出来ます
 */
//-----------------------------------------------------------------------------
extern s32 GFL_CALC2D_CircleVectorDistance( s32 x0, s32 y0, s32 x1, s32 y1, u32 r );

//----------------------------------------------------------------------------
/**
 *	@brief	半径と距離から現在の回転角を取得する
 *
 *	@param	r		半径
 *	@param	dist	移動距離
 *
 *	@return	移動距離から
 */
//-----------------------------------------------------------------------------
extern s32 GFL_CALC2D_CircleVectroDistRotaGet( u16 r, s32 dist );





#ifdef _cplusplus
}	// extern "C"{
#endif

#endif		// __CALC_2D_H__


