//============================================================================================
/**
 * @file	button_man.h
 * @bfief	ボタン状態管理マネージャ
 * @date	2005.11.08
 * @author	taya GAME FREAK inc.
 *
 *	2009.01.15	Ariizumi
 *				GSより移植。
 *				GFL_BMN_Createの要素数を削る
 *				判定方法を変更。もし重なっているボタンがあった場合、
 *				挙動が変わる(両方反応したのが配列で上のほうのみ反応するようになる)
 */
//============================================================================================
#ifndef __BUTTON_MAN_H__
#define __BUTTON_MAN_H__

#include "ui.h"

//--------------------------------------------------------------
/**
 *  ボタンイベント種類の定義
 *
 *  マネージャに登録したボタンについて、これらのイベントが発生すると
 *  登録コールバック関数が呼び出される
 */
//--------------------------------------------------------------
enum {
	GFL_BMN_EVENT_TOUCH,		///< 触れた瞬間
	GFL_BMN_EVENT_RELEASE,		///< 離された瞬間
	GFL_BMN_EVENT_HOLD,			///< 触りつづけている
	GFL_BMN_EVENT_SLIDEOUT,		///< 画面タッチしたままボタン領域から外れた瞬間
};


//--------------------------------------------------------------
/**
 * コールバック関数型定義。
 * 引数内容は以下の順である。
 *
 * u32		ボタンID
 * u32		イベント種類
 * void*	マネージャ作成時に引数として設定した任意ポインタ
 *
 */
//--------------------------------------------------------------
typedef		void (*pBmnCallBackFunc)(u32, u32, void*);


//--------------------------------------------------------------
/**
 * ボタン管理マネージャのワーク構造体宣言
 */
//--------------------------------------------------------------
typedef		struct _GFL_BUTTON_MAN		GFL_BUTTON_MAN;




//======================================================================================================
/**
 * ボタン管理マネージャ作成
 *
 * @param   hit_tbl			[in]  当たり判定テーブルへのポインタ
 * @param   callback		[in]  ボタンイベント発生時に呼び出されるコールバック関数
 * @param   callback_arg	[in]  callback 呼び出し時に引数として渡される任意のポインタ
 * @param   heapID			[in]  マネージャ領域作成用ヒープID
 *
 * @retval  BUTTON_MAN*		マネージャポインタ
 *
 *
 * btn_cnt の数だけ、内部ではボタン管理用ワークが生成される。
 * コールバックで引き渡されるボタンIDというのは、0 〜 (btn_cnt-1）の数値で、
 * hit_tbl の何件目に該当するかを示す。
 *
 * 引数変更しました。 2009.01.15Ariizumi
 */
//======================================================================================================
extern GFL_BUTTON_MAN* GFL_BMN_Create( const GFL_UI_TP_HITTBL *hit_tbl, pBmnCallBackFunc callback, void *callback_arg, u32 heapID );


//======================================================================================================
/**
 * ボタン管理マネージャメイン
 *
 * 各ボタン状態のチェック＆更新、イベントが発生すればコールバック呼び出しを行う。
 *
 * @param   bmn		マネージャポインタ
 *
 * @retval	TRUE	有効なトリガーイベントを検出した
 * @retval	FALSE	有効なトリガーイベントを検出しなかった
 */
//======================================================================================================
extern BOOL GFL_BMN_Main( GFL_BUTTON_MAN *bmn );


//======================================================================================================
/**
 * ボタン管理マネージャ消去
 *
 * @param   bmn		マネージャポインタ
 */
//======================================================================================================
extern void GFL_BMN_Delete( GFL_BUTTON_MAN *bmn );


//======================================================================================================
/**
 * ボタンがホールド状態にある時、そのホールド時間（フレーム数）を返す
 *
 * @param   bmn		マネージャワーク
 * @param   idx		ボタンインデックス
 *
 * @retval  u32		ホールド中ならホールド時間、ホールド中以外なら０
 */
//======================================================================================================
extern u32 GFL_BMN_GetHoldFrameCount( GFL_BUTTON_MAN* bmn, u32 idx );


#endif
