/*=============================================================================
/*!

	@file	npSystem.h

	@brief	ライブラリシステム定義ファイル
	
	@author	ka2<br>
			Copyright (c) 2005 Polygon Magic, Inc.

	$Revision: 1.8 $
	$Date: 2006/03/22 05:10:39 $

*//*=========================================================================*/
#ifndef	NPSYSTEM_H
#define	NPSYSTEM_H

/*! @name	C リンケージ外対応 */
//!@{

#include "npObject.h"

//!@}

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
//-----------------------------------------------------------------------------
//	include
//-----------------------------------------------------------------------------

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
//-----------------------------------------------------------------------------
//	define
//-----------------------------------------------------------------------------

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
//-----------------------------------------------------------------------------
//	enum
//-----------------------------------------------------------------------------

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
//-----------------------------------------------------------------------------
//	struct
//-----------------------------------------------------------------------------
struct __npCONTEXT;

/*!

	@struct	システム用初期化引数

*/
typedef struct __npSYSTEMDESC
{
	/*! 作成するレンダリングコンテキストの最大数 */
	npSIZE	MaxContext;
}
npSYSTEMDESC;

/*!

	@struct	システムオブジェクト

	@note	ライブラリを使用している間、保持しなければならない.<br>
			シングルトンオブジェクト

*/
typedef NP_HSTRUCT __npSYSTEM
{
	npOBJECT				Object;

	void*					m_pInstance;
	/* レンダリングコンテキストのバッファ */
	struct	__npCONTEXT*	m_pBuf;
	npSIZE					m_nNum;

	npU32					m_pReserved[ 1 ];
}
NP_FSTRUCT npSYSTEM;

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
//-----------------------------------------------------------------------------
//	global variable
//-----------------------------------------------------------------------------
extern npSYSTEM	npINSTANCE;

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
//-----------------------------------------------------------------------------
//	global function
//-----------------------------------------------------------------------------
/*!

	システムに必要なメモリサイズを取得する

	@param	pDesc	npSYSTEMDESC 構造体
	
	@return	システムに必要なメモリサイズ

*/
#define	npCheckSystemHeapSize( pDesc )	\
	( npSIZE )( sizeof( npCONTEXT ) * ( pDesc )->MaxContext )

/*!

	システムの初期化処理

	@param	pInstance	外部インスタンス
	@param	pDesc		システムの初期化引数
	@param	pBuf		システムが使用するバッファを渡す
	@param	nSize		バッファのサイズ（ Byte 単位 ）
	@param	ppSystem	生成したシステムオブジェクトを受け取る変数

	@return	エラーコード

	@note	ライブラリを使用する前に必ず呼び出す

*/
NP_API npERROR NP_APIENTRY npInitSystem(
				npVOID*			pInstance,
	NP_CONST	npSYSTEMDESC*	pDesc,
				npVOID*			pBuf,
				npSIZE			nSize,
				npSYSTEM** 		ppSystem 
);

/*!

	システムの終了処理

	@param	pSystem	操作対象のシステムオブジェクト

	@note	ライブラリを終了する時は必ず呼び出す

*/
NP_API npVOID NP_APIENTRY npExitSystem( npSYSTEM* pSystem );

/*!

	システムのインスタンスを参照する

	@return	システムオブジェクト
			
*/
#define npRefSystem()	( &npINSTANCE )

/*!

	システムメモリをダンプする

*/
#ifdef NP_DEBUG
NP_API npVOID NP_APIENTRY npDumpSystemMemory( npVOID );
#else
#	define npDumpSystemMemory( npVOID )
#endif

/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */


#endif	/* NPSYSTEM_H */
