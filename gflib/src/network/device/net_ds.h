//=============================================================================
/**
 * @file	net_ds.h
 * @brief	DSデバイスとのアクセス関数
 * @author	GAME FREAK Inc.
 * @date    2006.12.5
 */
//=============================================================================

#ifndef __NET_DS_H__
#define __NET_DS_H__
// 関数切り出し自動生成 funccut.rb  k.ohno 2006.12.5 
//==============================================================================
/**
 * @brief   接続クラスの初期化
 * @param   heapID   ワーク確保ID
 * @retval  _COMM_WORKのポインタ
 */
//==============================================================================
extern void* CommMPInitialize(int heapID, GameServiceID serviceNo, u8 num);
//==============================================================================
/**
 * @brief   接続しているかどうか (削除予定)
 * @param   none
 * @retval  TRUE  接続している
 */
//==============================================================================
extern BOOL CommMPIsConnect(void);
//==============================================================================
/**
 * @brief   WVRをVRAMDに移動
 * @param   none
 * @retval  none
 */
//==============================================================================
extern void CommVRAMDInitialize(void);
//==============================================================================
/**
 * @brief   WVRをVRAMDに移動し終わったら1
 * @param   none
 * @retval  none
 */
//==============================================================================
extern BOOL CommIsVRAMDInitialize(void);
//==============================================================================
/**
 * @brief   WVRをVRAMDに移動しはじめたら１
 * @param   none
 * @retval  none
 */
//==============================================================================
extern BOOL CommIsVRAMDStart(void);
//==============================================================================
/**
 * @brief   イクニューモン開放
 * @param   none
 * @retval  none
 */
//==============================================================================
extern void CommVRAMDFinalize(void);
//==============================================================================
/**
 * @brief   子機の使用しているデータの初期化
 * @param   bssdesc   グループ情報
 * @retval  none
 */
//==============================================================================
extern void ChildBconDataInit(void);
//==============================================================================
/**
 * @brief   通信ライブラリに必要なワークサイズを返す
 * @param   none
 * @retval  ワークサイズ
 */
//==============================================================================
extern u32 CommGetWorkSize(void);
//==============================================================================
/**
 * @brief   受信コールバック
 * @param   work_area 　システムで使うメモリー領域
 *                      NULLの場合すでに初期化済みとして動作
 * @param   serviceNo     ゲームの種類
 * @param   regulationNo  ゲームの種類
 * @param   bTGIDChange  新規のゲームの初期化の場合TRUE 古いビーコンでの誤動作を防ぐため用
 * @param   size 受信サイズ
 * @retval  none
 */
//==============================================================================
extern void _receiverFunc(u16 aid, u16 *data, u16 size);
//==============================================================================
/**
 * @brief   親機の接続開始を行う
 * @param   work_area 　システムで使うメモリー領域
 *                      NULLの場合すでに初期化済みとして動作
 * @param   serviceNo     ゲームの種類
 * @param   regulationNo  ゲームの種類
 * @param   bTGIDChange  新規のゲームの初期化の場合TRUE 古いビーコンでの誤動作を防ぐため用
 * @param  子機を受け付けるかどうか
 * @retval  初期化に成功したらTRUE
 */
//==============================================================================
extern BOOL CommMPParentInit(BOOL bAlloc, BOOL bTGIDChange, BOOL bEntry);
//==============================================================================
/**
 * @brief   子機の接続開始を行う
 * @param   work_area 　システムで使うメモリー領域
 *                      NULLの場合はすでに初期化済みとして扱う
 * @param   serviceNo  ゲームの種類
 * @param   regulationNo  ゲームの種類
 * @param   bBconInit  ビーコンデータを初期化するのかどうか
 * @retval  初期化に成功したらTRUE
 */
//==============================================================================
extern BOOL CommMPChildInit(BOOL bAlloc, BOOL bBconInit);
//==============================================================================
/**
 * @brief   通信切り替えを行う（親子反転に必要な処理）
 * @param   none
 * @retval  リセットしたらTRUE
 */
//==============================================================================
extern BOOL CommMPSwitchParentChild(void);
//==============================================================================
/**
 * @brief   通信切断を行う  ここではあくまで通信終了手続きに入るだけ
 *  ホントに消すのは下の_commEnd
 * @param   none
 * @retval  終了処理に移った場合TRUE
 */
//==============================================================================
extern BOOL CommMPFinalize(void);
//==============================================================================
/**
 * @brief   通信切断を行う  ただしメモリー開放を行わない
 * @param   切断の場合TRUE
 * @retval  none
 */
//==============================================================================
extern void CommMPStealth(BOOL bStalth);
//==============================================================================
/**
 * @brief   探すことができた親の数を返す
 * @param   none
 * @retval  親機の数
 */
//==============================================================================
extern int CommMPGetParentCount(void);
//--------------------------------------------------------------
/**
 * @brief   BmpListの位置からBconの存在するIndex位置を取得する
 * @param   index		BmpList位置
 * @retval  Index
 */
//--------------------------------------------------------------
extern int CommBmpListPosBconIndexGet(int index);
//==============================================================================
/**
 * @brief   親機リストに変化があった場合TRUE
 * @param   none
 * @retval  親機リストに変化があった場合TRUE なければFALSE
 */
//==============================================================================
extern BOOL CommMPIsScanListChange(void);
//==============================================================================
/**
 * @brief   親機の変化を知らせるフラグをリセットする
 * @param   none
 * @retval  none
 */
//==============================================================================
extern void CommMPResetScanChangeFlag(void);
//==============================================================================
/**
 * @brief   この親機がいくつとコネクションをもっているのかを得る
 * @param   index   親のリストのindex
 * @retval  コネクション数 0-16
 */
//==============================================================================
extern int CommMPGetParentConnectionNum(int index);
//==============================================================================
/**
 * @brief   すぐに接続していい人が見つかった場合indexを返す
 * @param   none
 * @retval  該当したらindexを返す
 */
//==============================================================================
extern int CommMPGetFastConnectIndex(void);
//==============================================================================
/**
 * @brief   次のレベルで繋いでいい人がいたらそのindexを返します
 * @param   none
 * @retval  該当したらindexを返す
 */
//==============================================================================
extern int CommMPGetNextConnectIndex(void);
//==============================================================================
/**
 * @brief   子機　MP状態で接続
 * @param   index   親のリストのindex
 * @retval  子機接続を親機に送ったらTRUE
 */
//==============================================================================
extern BOOL CommMPChildIndexConnect(u16 index);
//==============================================================================
/**
 * @brief   ビーコンデータの定期確認
 *  接続が完了する間での間、この関数を呼び、タイムアウト処理を行う
 * @param   none
 * @retval  none
 */
//==============================================================================
extern void CommMPParentBconCheck(void);
//==============================================================================
/**
 * @brief   通信ライブラリー内部の状態を見て、処理をする関数
 * VBlankとは関係ないのでprocessの時に処理すればいい
 * 子機はお互いの接続がわからないので、通信結果をcommsystemからもらってエラー検査する
 * @param   none
 * @retval  none
 */
//==============================================================================
extern void CommMpProcess(u16 bitmap);
//==============================================================================
/**
 * @brief  通信切断モードにはいったかどうか
 * @param   none
 * @retval  接続人数
 */
//==============================================================================
extern BOOL CommMPIsConnectStalth(void);
//==============================================================================
/**
 * @brief  初期化しているかどうかを返す
 * @param   none
 * @retval  初期が終わっていたらTRUE
 */
//==============================================================================
extern BOOL CommMPIsInitialize(void);
//==============================================================================
/**
 * @brief  WHライブラリで　状態がIDLEになっているか確認する
 * @param   none
 * @retval  IDLEになっている=TRUE
 */
//==============================================================================
extern BOOL CommMPIsStateIdle(void);
//==============================================================================
/**
 * @brief  WHライブラリで　通信状態のBITを確認  子機がつながっているかどうか
 * @param   none
 * @retval  つながったらTRUE
 */
//==============================================================================
extern BOOL CommMPIsChildsConnecting(void);
//==============================================================================
/**
 * @brief  親機が落ちたかどうか
 * @param   none
 * @retval  落ちた場合TRUE
 */
//==============================================================================
extern BOOL CommMPParentDisconnect(void);
//==============================================================================
/**
 * @brief  エラー状態かどうか
 * @param   none
 * @retval  エラーの時TRUE
 */
//==============================================================================
extern BOOL CommMPIsError(void);
//==============================================================================
/**
 * @brief  子機がいないのをエラー扱いにするかどうかをSET
 * @param   bOn  有効時にTRUE
 * @retval  none
 */
//==============================================================================
extern void CommMPSetNoChildError(BOOL bOn);
//==============================================================================
/**
 * @brief 誰かが落ちたのをエラー扱いにするかどうかをSET
 * @param   bOn  有効時にTRUE
 * @retval  none
 */
//==============================================================================
extern void CommMPSetDisconnectOtherError(BOOL bOn);
//==============================================================================
/**
 * @brief   サービス番号に対応したビーコン間隔を得ます
 *          サービス番号は include/communication/comm_def.hにあります
 * @param   serviceNo サービス番号
 * @retval  beacon間隔 msec
 */
//==============================================================================
extern u16 _getServiceBeaconPeriod(u16 serviceNo);
//==============================================================================
/**
 * @brief   ビーコンデータを得る
 * @param   index ビーコンバッファに対するindex
 * @retval   WMBssDesc*  ビーコンバッファポインタ
 */
//==============================================================================
extern WMBssDesc* CommMPGetWMBssDesc(int index);
//==============================================================================
/**
 * @brief   GFビーコンデータを得る
 * @param   index ビーコンバッファに対するindex
 * @retval   GF_BSS_DATA_INFO*  ビーコンバッファポインタ
 */
//==============================================================================
extern void* CommMPGetGFBss(int index);
//==============================================================================
/**
 * @brief    ビーコンデータを消す
 * @param    index ビーコンバッファに対するindex
 * @retval   none
 */
//==============================================================================
extern void CommMPResetWMBssDesc(int index);
//==============================================================================
/**
 * @brief    ビーコンデータを消す
 * @param    index ビーコンバッファに対するindex
 * @retval   none
 */
//==============================================================================
extern void CommMPResetGFBss(int index);
//==============================================================================
/**
 * @brief   macアドレスをバックアップする
 * @param   pMac   mac address
 * @retval  none
 */
//==============================================================================
extern void CommMPSetBackupMacAddress(u8* pMac, int netID);
//==============================================================================
/**
 * @brief   自動切断モードに入ったかどうかを返す
 * @param   none
 * @retval  入っているならばTRUE
 */
//==============================================================================
extern BOOL CommMPIsAutoExit(void);
//==============================================================================
/**
 * @brief   自動切断モードON
 * @param   none
 * @retval  none
 */
//==============================================================================
extern void CommMPSetAutoExit(void);
//==============================================================================
/**
 * @brief   ビーコンデータに現在の状況を反映させる
 * @param   none
 * @retval  none
 */
//==============================================================================
extern void CommMPFlashMyBss(void);
//==============================================================================
/**
 * @brief   ライフタイムを小さくする または元に戻す
 * @param   bMinimum TRUEなら小さくする
 * @retval  none
 */
//==============================================================================
extern void CommMPSetLifeTime(BOOL bMinimum);
//------------------------------------------------------
/**
 * @brief   サービス番号のビーコン数を返します
 * @param   serviceNo   comm_def.hにあるサービス番号
 * @retval  利用者数
 */
//------------------------------------------------------
extern int CommMPGetServiceNumber(int serviceNo);
//------------------------------------------------------
/**
 * @brief   親機が一回でもビーコンを送信し終わったかどうか
 * @param   none
 * @retval  送信完了=TRUE
 */
//------------------------------------------------------
extern BOOL CommMPIsParentBeaconSent(void);
//------------------------------------------------------
/**
 * @brief   スキャン状態かどうか
 * @param   none
 * @retval  送信完了=TRUE
 */
//------------------------------------------------------
extern BOOL CommMPIsChildStateScan(void);
//------------------------------------------------------
/**
 * @brief   チャンネルを返す
 * @retval  接続チャンネル
 */
//------------------------------------------------------
extern int CommMPGetChannel(void);
//==============================================================================
/**
 * @brief	自機ビーコン送信内容の取得
 * @param none
 * @return ビーコンの中身
 */
//==============================================================================
extern void* CommMPGetMyGFBss(void);
//------------------------------------------------------
/**
 * @brief	ビーコンを拾ってからのカウントダウンタイマ取得
 * @param	index	位置
 */
//------------------------------------------------------
extern int CommMPGetBConUncacheTime(int index);

#endif  //__NET_DS_H__

