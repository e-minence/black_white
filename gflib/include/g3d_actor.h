//=============================================================================================
/**
 * @file	g3d_actor.h
 * @brief	３Ｄアクタープログラム
 */
//=============================================================================================
#ifndef _G3D_ACTOR_H_
#define _G3D_ACTOR_H_

//=============================================================================================
//	型宣言
//=============================================================================================
typedef struct _GFL_G3D_ACTSYS	GFL_G3D_ACTSYS;
typedef struct _GFL_G3D_ACTOR	GFL_G3D_ACTOR;	
typedef void					(GFL_G3D_ACTFUNC)( GFL_G3D_ACTOR*, void* );

typedef struct {
	u16					objID;
	u8					movePriority;				
	u8					drawPriority;				
	BOOL				drawSW;
	GFL_G3D_OBJSTATUS	status; 
	GFL_G3D_ACTFUNC*	func;
}GFL_G3D_ACTOR_DATA;

//=============================================================================================
/**
 * 管理システム
 */
//=============================================================================================
//--------------------------------------------------------------------------------------------
/**
 * システム作成
 *
 * @param	g3Dutil			依存するg3Dutil
 * @param	actMax			設定可能なアクター数
 * @param	wksiz			１アクターに割り当てるワークのサイズ
 * @param	heapID			ヒープＩＤ
 */
//--------------------------------------------------------------------------------------------
extern GFL_G3D_ACTSYS*
	GFL_G3D_ActorSysCreate
		( GFL_G3D_UTIL* g3Dutil, const u16 actMax, const u32 wksiz, const HEAPID heapID );

//--------------------------------------------------------------------------------------------
/**
 * システムメイン（動作）
 *
 * @param	g3DactSys		システムポインタ
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ActorSysMain
		( GFL_G3D_ACTSYS* g3DactSys );  

//--------------------------------------------------------------------------------------------
/**
 * システムメイン（描画）
 *
 * @param	g3DactSys		システムポインタ
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ActorSysDraw
		( GFL_G3D_ACTSYS* g3DactSys );  

//--------------------------------------------------------------------------------------------
/**
 * システム破棄
 *
 * @param	g3DactSys		システムポインタ
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ActorSysDelete
		( GFL_G3D_ACTSYS* g3DactSys );

//--------------------------------------------------------------------------------------------
/**
 * アクターポインタをＩＮＤＥＸより取得
 *
 * @param	g3DactSys		システムポインタ
 * @param	idx				アクター配置ＩＮＤＥＸ
 */
//--------------------------------------------------------------------------------------------
GFL_G3D_ACTOR*
	GFL_G3D_G3DActorGet
		( GFL_G3D_ACTSYS* g3DactSys, u32 idx );

//=============================================================================================
/**
 * アクター
 */
//=============================================================================================
//--------------------------------------------------------------------------------------------
/**
 * 作成
 *
 * @param	g3DactSys		システムポインタ
 * @param	actTbl			アクター設定データ
 * @param	actCount		アクター数
 *
 * @return	idx				アクター配置先頭ＩＮＤＥＸ
 */
//--------------------------------------------------------------------------------------------
extern u32
	GFL_G3D_ActorAdd
		( GFL_G3D_ACTSYS* g3DactSys, const GFL_G3D_ACTOR_DATA* actTbl, const u16 actCount );

//--------------------------------------------------------------------------------------------
/**
 * 破棄
 *
 * @param	g3DactSys		システムポインタ
 * @param	idx				アクター配置先頭ＩＮＤＥＸ
 * @param	resCount		アクター数
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ActorDel
		( GFL_G3D_ACTSYS* g3DactSys, u32 idx, const u16 actCount );

//--------------------------------------------------------------------------------------------
/**
 * オブジェクトＩＤの取得と変更
 *
 * @param	g3Dact			アクターポインタ
 * @param	objID			オブジェクトＩＤの格納もしくは参照ワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void GFL_G3D_ActorObjIDGet( GFL_G3D_ACTOR* g3Dact, u16* objID );
extern void GFL_G3D_ActorObjIDSet( GFL_G3D_ACTOR* g3Dact, u16* objID );

//--------------------------------------------------------------------------------------------
/**
 * 描画プライオリティーの取得と変更
 *
 * @param	g3Dact			アクターポインタ
 * @param	drawPri			描画プライオリティーの格納もしくは参照ワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void GFL_G3D_ActorDrawPriGet( GFL_G3D_ACTOR* g3Dact, u8* drawPri );
extern void GFL_G3D_ActorDrawPriSet( GFL_G3D_ACTOR* g3Dact, u8* drawPri );

//--------------------------------------------------------------------------------------------
/**
 * 描画スイッチの取得と変更
 *
 * @param	g3Dact			アクターポインタ
 * @param	drawSW			描画スイッチの格納もしくは参照ワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void GFL_G3D_ActorDrawSWGet( GFL_G3D_ACTOR* g3Dact, BOOL* drawSW );
extern void GFL_G3D_ActorDrawSWSet( GFL_G3D_ACTOR* g3Dact, BOOL* drawSW );

//--------------------------------------------------------------------------------------------
/**
 * ステータス（位置情報）の取得と変更
 *
 * @param	g3Dact			アクターポインタ
 * @param	trans			位置情報の格納もしくは参照ワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void GFL_G3D_ActorStatusTransGet( GFL_G3D_ACTOR* g3Dact, VecFx32* trans );
extern void GFL_G3D_ActorStatusTransSet( GFL_G3D_ACTOR* g3Dact, VecFx32* trans );

//--------------------------------------------------------------------------------------------
/**
 * ステータス（スケール情報）の取得と変更
 *
 * @param	g3Dact			アクターポインタ
 * @param	scale			スケール情報の格納もしくは参照ワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void GFL_G3D_ActorStatusScaleGet( GFL_G3D_ACTOR* g3Dact, VecFx32* scale );
extern void GFL_G3D_ActorStatusScaleSet( GFL_G3D_ACTOR* g3Dact, VecFx32* scale );

//--------------------------------------------------------------------------------------------
/**
 * ステータス（回転情報）の取得と変更
 *
 * @param	g3Dact			アクターポインタ
 * @param	rotate			回転情報の格納もしくは参照ワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void GFL_G3D_ActorStatusRotateGet( GFL_G3D_ACTOR* g3Dact, MtxFx33* rotate );
extern void GFL_G3D_ActorStatusRotateSet( GFL_G3D_ACTOR* g3Dact, MtxFx33* rotate );

//--------------------------------------------------------------------------------------------
/**
 * 動作関数の取得と変更
 *
 * @param	g3Dact			アクターポインタ
 * @param	scale			スケール情報の格納もしくは参照ワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void GFL_G3D_ActorFuncGet( GFL_G3D_ACTOR* g3Dact, GFL_G3D_ACTFUNC** func );
extern void GFL_G3D_ActorFuncSet( GFL_G3D_ACTOR* g3Dact, GFL_G3D_ACTFUNC** func );



#endif
