//=============================================================================================
/**
 * @file	g3d_system.h
 * @brief	３Ｄ描画管理システムプログラム
 */
//=============================================================================================
#ifndef _G3D_SYSTEM_H_
#define _G3D_SYSTEM_H_

//=============================================================================================
/**
 *
 *
 * システムマネージャ関数
 *
 *
 */
//=============================================================================================
//	セットアップ関数型
typedef void (*GFL_G3D_SETUP_FUNC)( void );

//	各リソースマネージャモード定義	
typedef enum {
	GFL_G3D_VMANLNK = 0,		///<リンクドモード
	GFL_G3D_VMANFRM,			///<フレームモード
}GFL_G3D_VMAN_MODE;

//	テクスチャマネージャサイズ定義	
typedef enum {
	GFL_G3D_TEX128K = 1,	///<128KB(1ブロック)
	GFL_G3D_TEX256K = 2,	///<256KB(2ブロック)
	GFL_G3D_TEX384K = 3,	///<384KB(3ブロック)
	GFL_G3D_TEX512K = 4,	///<512KB(4ブロック)
}GFL_G3D_VMAN_TEXSIZE;

//	パレットマネージャサイズ定義	
typedef enum {
	GFL_G3D_PLT16K = 1,		///<16KB
	GFL_G3D_PLT32K = 2,		///<32KB
	GFL_G3D_PLT64K = 4,		///<64KB
	GFL_G3D_PLT80K = 5,		///<80KB
	GFL_G3D_PLT96K = 6,		///<96KB
}GFL_G3D_VMAN_PLTSIZE;

#define GEBUF_SIZE_MAX	(0x1800)	//ジオメトリバッファ最大サイズ。暫定

//--------------------------------------------------------------------------------------------
/**
 * システムマネージャ設定
 *
 * @param	texmanMode		テクスチャマネージャ使用モード
 * @param	texmanSize		テクスチャマネージャ使用領域サイズ（byte）
 * @param	palmanMode		パレットマネージャ使用モード
 * @param	palmanSize		パレットマネージャ使用領域サイズ（byte）
 * @param	GeBufEnable		ジオメトリバッファの使用サイズ(0:使用しない)
 * @param	heapID			メモリ取得用ヒープエリア
 * @param	setUp			セットアップ関数(NULLの時はDefaultSetUp)
 *
 * @return	マネージャワークポインタ
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_sysInit
		( GFL_G3D_VMAN_MODE texmanMode, GFL_G3D_VMAN_TEXSIZE texmanSize, 
			GFL_G3D_VMAN_MODE pltmanMode, GFL_G3D_VMAN_PLTSIZE pltmanSize,
				u16 GeBufSize, u16 heapID, GFL_G3D_SETUP_FUNC setup );

//--------------------------------------------------------------------------------------------
/**
 *
 * 終了
 *
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_sysExit
		( void );


//=============================================================================================
/**
 *
 *
 * ３Ｄリソース管理関数
 *
 *
 */
//=============================================================================================
//	リソース管理構造体型
typedef struct _GFL_G3D_RES	GFL_G3D_RES;

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄリソースの読み込み
 *
 * @param	arcID or path	アーカイブＩＤ or ファイルパス
 * @param	datID			データＩＤ
 *
 * @return	g3Dres	３Ｄリソースポインタ(失敗=NULL)
 */
//--------------------------------------------------------------------------------------------
extern GFL_G3D_RES*
	GFL_G3D_ResourceCreateArc
		( int arcID, int datID ); 
extern GFL_G3D_RES*
	GFL_G3D_ResourceCreatePath
		( const char* path, int datID ); 

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄリソースの破棄
 *
 * @param	g3Dres	３Ｄリソースポインタ
 *
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ResourceDelete
		( GFL_G3D_RES* g3Dres );
	
//--------------------------------------------------------------------------------------------
/**
 * テクスチャリソースの転送(→ＶＲＡＭ)
 *
 * @param	g3Dres	３Ｄリソースポインタ
 *
 * @return	BOOL	結果(成功=TRUE)
 */
//--------------------------------------------------------------------------------------------
extern BOOL 
	GFL_G3D_TransVramTex
		( GFL_G3D_RES* g3Dres );

//--------------------------------------------------------------------------------------------
/**
 * テクスチャデータリソースの転送(→ＶＲＡＭ)
 *
 * @param	g3Dres	３Ｄリソースポインタ
 *
 * @return	BOOL	結果(成功=TRUE)
 *
 * 連続してテクスチャを読み込む場合に効率的に使用するための関数
 * 連続読み込みの際は、外部で
 *    開始時にGX_BeginLoadTex関数
 *    終了時にGX_EndLoadTex関数
 * を呼ぶ必要がある
 */
//--------------------------------------------------------------------------------------------
extern BOOL 
	GFL_G3D_TransVramTexDataOnly
		( GFL_G3D_RES* g3Dres );

//--------------------------------------------------------------------------------------------
/**
 * テクスチャパレットリソースの転送(→ＶＲＡＭ)
 *
 * @param	g3Dres	３Ｄリソースポインタ
 *
 * @return	BOOL	結果(成功=TRUE)
 *
 * 連続してパレットを読み込む場合に効率的に使用するための関数
 * 連続読み込みの際は、外部で
 *    開始時にGX_BeginLoadPltt関数
 *    終了時にGX_EndLoadPltt関数
 * を呼ぶ必要がある
 */
//--------------------------------------------------------------------------------------------
extern BOOL 
	GFL_G3D_TransVramTexPlttOnly
		( GFL_G3D_RES* g3Dres );


//=============================================================================================
/**
 *
 *
 * 各オブジェクト管理関数
 *
 *
 */
//=============================================================================================
//	オブジェクト管理構造体型
typedef struct _GFL_G3D_OBJ	GFL_G3D_OBJ;

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄオブジェクトの作成
 *
 * @param	mdl			参照モデルセットリソース構造体ポインタ
 * @param	mdlidx		mdl内データインデックス(複数登録されている場合。１つの場合は0)
 * @param	tex			参照テクスチャリソース構造体ポインタ(使用しない場合はNULL)
 * @param	anm			参照アニメーションリソース構造体ポインタ(使用しない場合はNULL)
 * @param	anmidx		anm内データインデックス(複数登録されている場合。１つの場合は0)
 *
 * @return	GFL_3D_OBJ	３Ｄオブジェクトハンドル
 */
//--------------------------------------------------------------------------------------------
extern GFL_G3D_OBJ*
	GFL_G3D_ObjCreate
		( GFL_G3D_RES* mdl, int mdlidx, GFL_G3D_RES* tex, GFL_G3D_RES* anm, int anmidx );  

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄオブジェクトの破棄
 *
 * @param	g3Dobj	３Ｄオブジェクトハンドル
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ObjDelete
		( GFL_G3D_OBJ* g3Dobj ); 
	

//=============================================================================================
/**
 *
 *
 * 各オブジェクト描画関数
 *
 *	SAMPLE
 *	{
 *		MtxFx33 rotate;									//回転変数宣言
 *
 *		GFL_G3D_DrawStart();							//描画開始
 *		xxxxx();										//カメラセットアップ関数			
 *		{
 *			GFL_G3D_ObjDrawStart							//各オブジェクト描画開始
 *			GFL_G3D_ObjDrawRotateCalcXY( g3Dobj, &rotate );	//各オブジェクト回転計算
 *			GFL_G3D_ObjDraw( g3Dobj, &rotate );				//各オブジェクト描画
 *		}
 *		GFL_G3D_DrawEnd();								//描画終了（バッファスワップ）
 *	}
 */
//=============================================================================================
//--------------------------------------------------------------------------------------------
/**
 * ３Ｄ描画の開始
 *
 * 全体描画関数内、描画開始時に呼び出される
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_DrawStart
		( void );

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄ描画の終了
 *
 * 全体描画関数内、描画を終了時に呼び出される
 * 内部でバッファのスワップを行う。
 * @param	sortmode	ソートモード(指定型はNitoroSystem参照)
 * @param	buffermode	バッファモード(指定型はNitoroSystem参照)
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_DrawEnd
		( GXSortMode sortmode, GXBufferMode buffermode );

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄオブジェクトの描画の開始
 *
 * グローバルステート
 * （射影変換行列、カメラ行列、モデリング行列、ビューポート、ライト設定、マテリアルカラー等）
 * をジオメトリエンジンに送信する。
 * 特にこのステートに外部加工をしていなければ、各オブジェクト描画関数(ObjDraw)直前に
 * いずれかの関数を毎回呼び出すことになる。
 */
//--------------------------------------------------------------------------------------------
// カレント射影行列に射影変換行列が、
// カレント位置座標行列と方向ベクトル行列にカメラ行列とモデリング行列が合成された行列
// が設定されます。
extern void
	GFL_G3D_ObjDrawStart
		( void );
// カレント射影行列に射影変換行列とカメラ行列が合成された行列が、
// カレント位置座標行列と方向ベクトル行列にモデリング行列
// が設定されます。
extern void
	GFL_G3D_ObjDrawStartVP
		( void ); 
// カレント射影行列に射影変換行列とカメラ行列とモデリング行列が合成された行列が、
// カレント位置座標行列と方向ベクトル行列に単位行列
// が設定されます。
extern void
	GFL_G3D_ObjDrawStartWVP
		( void ); 

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄオブジェクトの描画
 *
 * @param	g3Dobj	３Ｄオブジェクトハンドル
 * @param	rotate	回転行列
 *
 * 通常描画関数
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ObjDraw
		( GFL_G3D_OBJ* g3Dobj, MtxFx33* rotate );
	
//--------------------------------------------------------------------------------------------
/**
 * ３Ｄオブジェクトの描画(1mat1shape)
 *
 * @param	g3Dobj	３Ｄオブジェクトハンドル
 * @param	rotate	回転行列
 *
 * １つのモデルに１つのマテリアルのみ設定されているときに高速描画するための関数
 */
//--------------------------------------------------------------------------------------------
extern void
	GFL_G3D_ObjDraw1mat1shape
		( GFL_G3D_OBJ* g3Dobj, MtxFx33* rotate );

//--------------------------------------------------------------------------------------------
/**
 * ３Ｄオブジェクトの回転行列の作成
 *
 * @param	g3Dobj	３Ｄオブジェクトハンドル
 * @param	dst		計算後の回転行列格納ポインタ
 *
 * この関数等を使用し、オブジェクト毎に適切な回転行列を作成したものを、描画に流す。
 */
//--------------------------------------------------------------------------------------------
// Ｘ→Ｙ→Ｚの順番で計算
extern void
	GFL_G3D_ObjDrawRotateCalcXY
		( GFL_G3D_OBJ* g3Dobj, MtxFx33* rotate );

// Ｘ→Ｙ→Ｚの順番で計算（相対）
extern void
	GFL_G3D_ObjDrawRotateCalcXY_Rev
		( GFL_G3D_OBJ* g3Dobj, MtxFx33* rotate );

// Ｙ→Ｘ→Ｚの順番で計算
extern void
	GFL_G3D_ObjDrawRotateCalcYX
		( GFL_G3D_OBJ* g3Dobj, MtxFx33* rotate );

// Ｙ→Ｘ→Ｚの順番で計算（相対）
extern void
	GFL_G3D_ObjDrawRotateCalcYX_Rev
		( GFL_G3D_OBJ* g3Dobj, MtxFx33* rotate );


#endif

