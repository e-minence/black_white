//==============================================================================
/**
 *@file		ui.h
 *@brief	ユーザーインターフェイス用公開関数 公開テーブル
 *@author	k.ohno
 *@data		2006.11.16
 */
//==============================================================================

#ifndef __UI_H__
#define	__UI_H__

//-----------------------------------------------------------------------------
/**
 * @brief 定数宣言
 */
//-----------------------------------------------------------------------------

/** @gflib キーカスタマイズテーブル用 */
#define   GFL_UI_KEY_COPY          (1)     ///< １から２へキーをコピーします
#define   GFL_UI_KEY_CHANGE        (2)     ///< １と２を交換します
#define   GFL_UI_KEY_RESET         (3)     ///< １を消します
#define   GFL_UI_KEY_END         (0)     ///< テーブルの終了

/** @brief タッチパネルテーブル用 */
#define		GFL_UI_TP_HIT_END		(0xff)			///< テーブル終了コード
#define		GFL_UI_TP_USE_CIRCLE	(0xfe)			///< 円形として使う
#define		GFL_UI_TP_HIT_NONE		(-1)	///< あたったテーブルなし

//-----------------------------------------------------------------------------
/**
 *	@brief 構造体宣言
 */
//-----------------------------------------------------------------------------

/**
 * @struct GFL_UI_KEY_CUSTOM_TBL
 * @brief  キーデータ構造体  キーコンフィグパターンを指定するテーブル.
 * 使用例  配列要素優先順位:0>1>2>3>4>.....です
 *
 * GFL_UI_KEY_CUSTOM_TBL key_data[] ={
 *		{PAD_BUTTON_SELECT,PAD_BUTTON_START,GFL_UI_KEY_CHANGE},		//START SELECT 交換
 *		{PAD_BUTTON_L,PAD_BUTTON_A,GFL_UI_KEY_COPY},		//LをA扱いに
 *		{PAD_BUTTON_R,0,GFL_UI_KEY_RESET},		//LをA扱いに
 *		{GFL_UI_KEY_END,0,0},		// 終了データ
 * };
 *
 */
typedef struct{
    int keySource;
    int keyDist;
    u8 mode;
}GFL_UI_KEY_CUSTOM_TBL;

/**
 * @struct GFL_UI_TP_HITTBL
 * @brief  タッチパネルあたり範囲を矩形、円形で指定するテーブル.
 * @note  使用例  配列要素優先順位:0>1>2>3>4>.....です 
 * <BR>GFL_UI_TP_HITTBL tp_data[] ={
 * <BR>		{128,191,0,64},
 * <BR>		{32,94,129,200},
 * <BR>		{0,191,0,255},
 * <BR>      {TP_USE_CIRCLE, 100, 80, 16 },	 円形として使う。
 * <BR>		{TP_HIT_END,0,0,0},		 終了データ
 * <BR>};
 * 
 */
typedef union{
	struct {
		u8	top;	///< 上（もしくは特殊コード）
		u8	bottom;	///< 下
		u8	left;	///< 左
		u8	right;	///< 右
	}rect;

	struct {
		u8	code;	///< TP_USE_CIRCLE を指定
		u8	x;      ///< 中心x座標
		u8	y;      ///< 中心y座標
		u8	r;      ///< 半径
	}circle;

}GFL_UI_TP_HITTBL;

//------------------------------------------------------------------
/**
 * \var  UISYS
 * @brief	UISYS 型宣言
 * ユーザーインターフェイスの管理を保持する構造体
 * 内容は隠蔽
  */
//------------------------------------------------------------------
typedef struct _UISYS UISYS;


//----------------------------------------------------------------------------
//プロトタイプ宣言 touchpanel.c
//----------------------------------------------------------------------------

//------------------------------------------------------------------
/**
 * @brief 両タイプ（矩形・円形）を見ながら判定する（ベタ入力）
 * @param[in]   pUI	    ユーザーインターフェイスシステム
 * @param[in]   tbl		当たり判定テーブル（終端コードあり）
 * @return  int		当たりがあればその要素番号、なければ TP_HIT_NONE
 */
//------------------------------------------------------------------
extern int GFL_UI_TouchPanelHitCont( const UISYS* tpsys, const GFL_UI_TP_HITTBL *tbl );

//------------------------------------------------------------------
/**
 * @brief 両タイプ（矩形・円形）を見ながら判定する（トリガ入力）
 * @param[in]   pUI	    ユーザーインターフェイスシステム
 * @param[in]   tbl		当たり判定テーブル（終端コードあり）
 * @retval  int		当たりがあればその要素番号、なければ TP_HIT_NONE
 */
//------------------------------------------------------------------
extern int GFL_UI_TouchPanelHitTrg( const UISYS* tpsys, const GFL_UI_TP_HITTBL *tbl );

//------------------------------------------------------------------
/**
 * @brief  タッチパネルに触れているか
 * @param[in]   pUI	    ユーザーインターフェイスシステム
 * @retval  BOOL		TRUEで触れている
 */
//------------------------------------------------------------------
extern BOOL GFL_UI_TouchPanelGetCont( const UISYS* tpsys );

//------------------------------------------------------------------
/**
 * @brief タッチパネルに触れているか（トリガ）
 * @param[in]   pUI	    ユーザーインターフェイスシステム
 * @retval  BOOL		TRUEで触れた
 */
//------------------------------------------------------------------
extern BOOL GFL_UI_TouchPanelGetTrg( const UISYS* tpsys );

//----------------------------------------------------------------------------
/**
 *	@brief	指定した座標で、当たり判定を行います。	複数
 *	@param	tbl		当たり判定テーブル（配列）
 *	@param	x		判定ｘ座標
 *	@param	y		判定ｙ座標
 *	@retval  int		当たりがあればその要素番号、なければ TP_HIT_NONE
 */
//-----------------------------------------------------------------------------
extern int GFL_UI_TouchPanelHitSelf( const GFL_UI_TP_HITTBL *tbl, u32 x, u32 y );

//------------------------------------------------------------------
/**
 * @brief タッチパネルに触れているならその座標取得（ベタ入力）
 * @param[in]   pUI	    ユーザーインターフェイスシステム
 * @param[out]   x		Ｘ座標受け取り変数アドレス
 * @param[out]   y		Ｙ座標受け取り変数アドレス
 * @retval  TRUE  触れている
 * @retval  FALSE 触れていない。引数には何もしない。
 */
//------------------------------------------------------------------
extern BOOL GFL_UI_TouchPanelGetPointCont( const UISYS* tpsys, u32* x, u32* y );

//------------------------------------------------------------------
/**
 * @brief タッチパネルに触れているならその座標取得（トリガ入力）
 * @param[in]   pUI	    ユーザーインターフェイスシステム
 * @param[out]   x		Ｘ座標受け取り変数アドレス
 * @param[out]   y		Ｙ座標受け取り変数アドレス
 * @retval  TRUE  触れている
 * @retval  FALSE 触れていない。引数には何もしない。
 */
//------------------------------------------------------------------
extern BOOL GFL_UI_TouchPanelGetPointTrg( const UISYS* tpsys, u32* x, u32* y );

//----------------------------------------------------------------------------
//プロトタイプ宣言 key.c
//----------------------------------------------------------------------------

#endif //__UI_H__

