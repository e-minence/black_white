//=============================================================================================
/**
 * @file	tcbl.h
 * @brief	TCB + メモリ管理
 * @author	tamada GAME FREAK inc.
 * @date	2007.02.02
 *
 */
//=============================================================================================

#ifndef	__TCBL_H__
#define	__TCBL_H__




/*====================================================================================*/
/*  型宣言                                                                            */
/*====================================================================================*/

//------------------------------------------------------------------
/**
 * @brief	タスクシステム型定義
 *
 * TCBシステムワーク構造体の宣言。
 * メイン処理用・VBlank用など、任意の箇所で実行される
 * 複数のTCBシステムを作成することが出来る。
 *
 * 内容は隠蔽されており、直接のアクセスはできない。
  */
//------------------------------------------------------------------
typedef struct _GFL_TCBLSYS GFL_TCBLSYS;

//------------------------------------------------------------------
/**
 * @brief	タスク型定義
 *
 * TCBへはこのポインタ型経由でアクセスする。
 * TCB構造体を直接アクセスできないようになっている。
 */
//------------------------------------------------------------------
typedef struct _GFL_TCBL GFL_TCBL;

//------------------------------------------------------------------
/**
 * @brief	タスク動作関数型定義
 *
 * TCBに登録する実行関数の型定義。
 * 引数としてTCB *と、ワークへのポインタをとるようになっている
 */
//------------------------------------------------------------------
typedef void (GFL_TCBLFUNC)(GFL_TCBL *, void *);

/*====================================================================================*/
/*  関数宣言                                                                          */
/*====================================================================================*/


//------------------------------------------------------------------
/**
 * TCBシステムを作成
 *
 * @param   heap_id				使用するヒープの指定ID
 * @param   task_max			稼働できる最大タスク数
 * @param	default_work_size	各タスクが保持するワークのサイズ
 *
 * @retval  GFL_TCBLSYS*		作成されたTCBシステムポインタ
 *
 */
//------------------------------------------------------------------
extern GFL_TCBLSYS * GFL_TCBL_SysInit( HEAPID heap_id, u32 task_max, u32 default_work_size);

//------------------------------------------------------------------
/**
 *	@brief	TCBシステムメイン
 *
 *	TCBシステムに登録されている各タスクを優先順に呼び出す
 *
 *  @param	tcbsys		TCBシステムワークポインタ
 *
 */
//------------------------------------------------------------------
extern void GFL_TCBL_SysMain( GFL_TCBLSYS * tcbsys );

//------------------------------------------------------------------
/**
 *	@brief	TCBシステム終了
 *  @param	tcbsys		TCBシステムワークポインタ
 */
//------------------------------------------------------------------
extern void GFL_TCBL_SysExit( GFL_TCBLSYS * tcbsys );

//------------------------------------------------------------------------------
/**
	@brief	TCBを追加する
	@param	tcbsys		TCBシステムポインタ
	@param	func		TCB_FUNC:関連付ける実行関数ポインタ
	@param	work_size	
	@param	pri			u32:タスクプライオリティ

	@return	TCB *	追加したTCBを示すポインタ
*/
//------------------------------------------------------------------------------
extern GFL_TCBL * GFL_TCBL_Create(GFL_TCBLSYS * tcbsys, GFL_TCBLFUNC * func, u32 work_size, u32 pri);


//------------------------------------------------------------------------------
/**
	@brief	TCBを消去する
	@param	tcb		TCBポインタ
*/
//------------------------------------------------------------------------------
extern void GFL_TCBL_Delete(GFL_TCBL * tcb);


//------------------------------------------------------------------
/**
 * @brief	TCB関数の切り替え
 *
 * TCBの動作関数を切り替える
 *
 * @param	tcb		対象となるTCBへのポインタ
 * @param	func	新しく切り替える動作関数
*/
//------------------------------------------------------------------
//extern void GFL_TCBL_ChangeFunc(TCB * tcb, TCB_FUNC func);

//------------------------------------------------------------------
/**
 * @brief	TCBワークの取得
 *
 * TCBの保持しているワークアドレスを取得する
 *
 * @param	tcb	TCBへのポインタ
 * @return	ワークへのポインタ
 */ 
//------------------------------------------------------------------
extern void * GFL_TCBL_GetWork(GFL_TCBL * tcb);

//------------------------------------------------------------------
/**
 * @brief	TCBプライオリティの取得
 *
 * TCBの動作優先順位を取得する
 *
 * @param	tcb	TCBへのポインタ
 * @return	プライオリティの値
 */
//------------------------------------------------------------------
extern u32 GFL_TCBL_GetPriority(const GFL_TCBL * tcb);


#endif /*__TCBL_H__*/
