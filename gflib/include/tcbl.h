//=============================================================================================
/**
 * @file	tcbl.h
 * @brief	TCB + メモリ管理
 * @author	tamada GAME FREAK inc.
 * @date	2007.02.02
 *
 */
//=============================================================================================

#ifndef	__TCBL_H__
#define	__TCBL_H__


//#define TCBL_DEBUG 

#include <nitro.h>
#include "heap.h"


/*====================================================================================*/
/*  型宣言                                                                            */
/*====================================================================================*/

//------------------------------------------------------------------
/**
 * @brief	タスクシステム型定義
 *
 * TCBLシステムワーク構造体の宣言。
 * メイン処理用・VBlank用など、任意の箇所で実行される
 * 複数のTCBLシステムを作成することが出来る。
 *
 * 内容は隠蔽されており、直接のアクセスはできない。
  */
//------------------------------------------------------------------
typedef struct _GFL_TCBLSYS GFL_TCBLSYS;

//------------------------------------------------------------------
/**
 * @brief	タスク型定義
 *
 * TCBLへはこのポインタ型経由でアクセスする。
 * TCBL構造体を直接アクセスできないようになっている。
 */
//------------------------------------------------------------------
typedef struct _GFL_TCBL GFL_TCBL;

//------------------------------------------------------------------
/**
 * @brief	タスク動作関数型定義
 *
 * TCBLに登録する実行関数の型定義。
 * 引数としてTCBL *と、ワークへのポインタをとるようになっている
 */
//------------------------------------------------------------------
typedef void (GFL_TCBLFUNC)(GFL_TCBL *, void *);

/*====================================================================================*/
/*  関数宣言                                                                          */
/*====================================================================================*/


//------------------------------------------------------------------
/**
 * タスクシステムを作成
 *
 * @param   sys_heap_id			タスクシステムに使用するヒープの指定ID
 * @param	usr_heap_id			タスクワークに使用するヒープの指定ID
 * @param   task_max			稼働できる最大タスク数
 * @param	work_size			各タスクが保持するワークのサイズ
 *
 * @retval  GFL_TCBLSYS*		作成されたタスクシステムポインタ
 *
 * work_sizeで指定したワークｘ最大タスク数分のワークエリアはsys_heap_idから取得する。
 * タスク生成時にwork_sizeを超えるサイズのワークを必要とするとき、自動的にusr_heap_id
 * で指定するヒープからワークをallocする。
 *
 */
//------------------------------------------------------------------
extern GFL_TCBLSYS * GFL_TCBL_Init( HEAPID sys_heap_id, HEAPID usr_heap_id,
		u32 task_max, u32 work_size);

//------------------------------------------------------------------
/**
 *	@brief	タスクシステムメイン
 *
 *	タスクシステムに登録されている各タスクを優先順に呼び出す
 *
 *  @param	tcbsys		タスクシステムワークポインタ
 *
 */
//------------------------------------------------------------------
extern void GFL_TCBL_Main( GFL_TCBLSYS * tcbsys );

//------------------------------------------------------------------
/**
 *	@brief	タスクシステム終了
 *  @param	tcbsys		タスクシステムワークポインタ
 */
//------------------------------------------------------------------
extern void GFL_TCBL_Exit( GFL_TCBLSYS * tcbsys );

//------------------------------------------------------------------------------
/**
	@brief	タスクを追加する
	@param	tcbsys		タスクシステムポインタ
	@param	func		TCB_FUNC:関連付ける実行関数ポインタ
	@param	work_size	使用するワークのサイズ
	@param	pri			u32:タスクプライオリティ

	@return	TCBL *	追加したタスクを示すポインタ

	必要なワークは内部で自動的に確保される
*/
//------------------------------------------------------------------------------
extern GFL_TCBL * GFL_TCBL_Create(GFL_TCBLSYS * tcbsys, GFL_TCBLFUNC * func, u32 work_size, u32 pri);


//------------------------------------------------------------------------------
/**
	@brief	タスクを消去する
	@param	TCBL		タスクポインタ

	保持しているワークの開放処理も同時に行われる
*/
//------------------------------------------------------------------------------
extern void GFL_TCBL_Delete(GFL_TCBL * tcb);


//------------------------------------------------------------------
/**
 * @brief	タスク関数の切り替え
 *
 * タスクの動作関数を切り替える
 *
 * @param	tcb		対象となるタスクへのポインタ
 * @param	func	新しく切り替える動作関数
*/
//------------------------------------------------------------------
extern void GFL_TCBL_ChangeFunc(GFL_TCBL * tcb, GFL_TCBLFUNC func);

//------------------------------------------------------------------
/**
 * @brief	タスクワークの取得
 *
 * タスクの保持しているワークアドレスを取得する
 *
 * @param	tcb	タスクへのポインタ
 * @return	ワークへのポインタ
 */ 
//------------------------------------------------------------------
extern void * GFL_TCBL_GetWork(GFL_TCBL * tcb);

//------------------------------------------------------------------
/**
 * @brief	タスクプライオリティの変更
 *
 * タスクの動作優先順位を取得する
 *
 * @param	tcb	タスクへのポインタ
 * @param	pri	変更後のプライオリティ
 */
//------------------------------------------------------------------
extern void GFL_TCBL_ChangePriority(GFL_TCBL * tcb, u32 pri);

//------------------------------------------------------------------
/**
 * @brief	タスクプライオリティの取得
 *
 * タスクの動作優先順位を取得する
 *
 * @param	tcb	タスクへのポインタ
 * @return	プライオリティの値
 */
//------------------------------------------------------------------
extern u32 GFL_TCBL_GetPriority(const GFL_TCBL * tcb);


#endif /*__TCBL_H__*/
