//ミュージカル関係
#include "musical/musical_local.h"
#include "musical/musical_dressup_sys.h"
#include "musical/musical_stage_sys.h"
#include "musical/musical_shot_sys.h"
#include "poke_tool/poke_tool.h"
#include "poke_tool/monsno_def.h"
FS_EXTERN_OVERLAY(musical);

static BOOL TESTMODE_ITEM_SelectFuncMusical( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectFuncMusical_Comm( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectFuncDressUp( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectFuncStage( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectFuncShot( TESTMODE_WORK *work , const int idx );

static TESTMODE_MENU_LIST menuMusical[] = 
{
	{L"ミュージカル(通し・通信)",TESTMODE_ITEM_SelectFuncMusical_Comm },
	{L"ミュージカル(通し)"		  ,TESTMODE_ITEM_SelectFuncMusical },
	{L"ドレスアップ"		,TESTMODE_ITEM_SelectFuncDressUp },
	{L"ステージ"			,TESTMODE_ITEM_SelectFuncStage },
	{L"ミュージカルショット"			,TESTMODE_ITEM_SelectFuncShot },
	
	{L"もどる"				,TESTMODE_ITEM_BackTopMenu },
};

static BOOL TESTMODE_ITEM_SelectFuncMusical( TESTMODE_WORK *work , const int idx )
{
  MUSICAL_INIT_WORK *initWork;
	initWork = GFL_HEAP_AllocMemory( GFL_HEAPID_APP|HEAPDIR_MASK , sizeof(MUSICAL_INIT_WORK));
	initWork->saveCtrl = SaveControl_GetPointer();
	initWork->pokePara = PP_Create( MONSNO_KOROMORI , 20 , PTL_SETUP_POW_AUTO , GFL_HEAPID_APP|HEAPDIR_MASK );
  initWork->isComm = FALSE;
  initWork->gameComm = NULL;
  initWork->isDebug = TRUE;
	TESTMODE_COMMAND_ChangeProc(work,NO_OVERLAY_ID, &Musical_ProcData, initWork);
	return TRUE;
}

static BOOL TESTMODE_ITEM_SelectFuncMusical_Comm( TESTMODE_WORK *work , const int idx )
{
  MUSICAL_INIT_WORK *initWork;
	initWork = GFL_HEAP_AllocMemory( GFL_HEAPID_APP|HEAPDIR_MASK , sizeof(MUSICAL_INIT_WORK));
	initWork->saveCtrl = SaveControl_GetPointer();
	initWork->pokePara = PP_Create( MONSNO_PIKUSII , 20 , PTL_SETUP_POW_AUTO , GFL_HEAPID_APP|HEAPDIR_MASK );
  initWork->isComm = TRUE;
  initWork->gameComm = NULL;
  initWork->isDebug = TRUE;

	TESTMODE_COMMAND_ChangeProc(work,NO_OVERLAY_ID, &Musical_ProcData, initWork);
	return TRUE;
}

static BOOL TESTMODE_ITEM_SelectFuncDressUp( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(musical), &DressUp_ProcData, NULL);
	return TRUE;
}
static BOOL TESTMODE_ITEM_SelectFuncStage( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(musical), &MusicalStage_ProcData, NULL);
	return TRUE;
}
static BOOL TESTMODE_ITEM_SelectFuncShot( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(musical), &MusicalShot_ProcData, NULL);
	return TRUE;
}

//個人テストパート関係

#include "app/pms_Input.h"
#include "app/codein.h"
#include "app/wifi_note.h"
#include "app/pokelist.h"
#include "app/p_status.h"
#include "app/local_tvt_sys.h"
#include "test/ariizumi/musical_editor.h"
#include "test/ariizumi/debug_ariizumi.h"
#include "multiboot/mb_parent_sys.h"
#include "multiboot/mb_select_sys.h"
#include "multiboot/mb_capture_sys.h"
#include "net_app/comm_tvt_sys.h"
FS_EXTERN_OVERLAY(pmsinput);
FS_EXTERN_OVERLAY(pokelist);
FS_EXTERN_OVERLAY(poke_status);
FS_EXTERN_OVERLAY(wifinote);
FS_EXTERN_OVERLAY(comm_tvt);
FS_EXTERN_OVERLAY(ariizumi_debug);
extern const GFL_PROC_DATA ProcData_PMSInput;
static BOOL TESTMODE_ITEM_SelectDebWifiNote( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebCodeIn( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebPmsInput( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebPokeList( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebPokeStatus( TESTMODE_WORK *work , const int idx );
#if USE_MUSICAL_EDIT
static BOOL TESTMODE_ITEM_SelectMusicalEditor( TESTMODE_WORK *work , const int idx );
#endif //USE_MUSICAL_EDIT

static BOOL TESTMODE_ITEM_SelectDebDebugAriizumi( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebCameraTest( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebLocalTvt( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebMultiBoot( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebMultiBootBox( TESTMODE_WORK *work , const int idx );
static BOOL TESTMODE_ITEM_SelectDebMultiBootCapture( TESTMODE_WORK *work , const int idx );

static TESTMODE_MENU_LIST menuAriizumi[] = 
{
	{L"CommTVT"	  		,TESTMODE_ITEM_SelectDebCameraTest },
	{L"ポケステータス"  ,TESTMODE_ITEM_SelectDebPokeStatus },
	{L"ポケリスト"		  ,TESTMODE_ITEM_SelectDebPokeList },
	{L"ミュージカル"		,TESTMODE_ITEM_ChangeMusicalMenu },
#if USE_MUSICAL_EDIT
	{L"ミュージカルデバッグ"	,TESTMODE_ITEM_SelectMusicalEditor },
#endif //USE_MUSICAL_EDIT
	{L"テスト"	        ,TESTMODE_ITEM_SelectDebDebugAriizumi },
	{L"友達手帳"				,TESTMODE_ITEM_SelectDebWifiNote },
	{L"数値入力"			  ,TESTMODE_ITEM_SelectDebCodeIn },
	{L"かんい文入力"			,TESTMODE_ITEM_SelectDebPmsInput },
	{L"LocalTVT"			,TESTMODE_ITEM_SelectDebLocalTvt },
	{L"MB_BOX"	      ,TESTMODE_ITEM_SelectDebMultiBootBox },
	{L"MB_CAP"	      ,TESTMODE_ITEM_SelectDebMultiBootCapture },
	{L"マルチブート"	,TESTMODE_ITEM_SelectDebMultiBoot },
	
	{L"もどる"				,TESTMODE_ITEM_BackTopMenu },
};

static BOOL TESTMODE_ITEM_SelectDebWifiNote( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(wifinote), &WifiNoteProcData, NULL );
	return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebCodeIn( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(wifinote), &CodeInput_ProcData, NULL );
	return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebPmsInput( TESTMODE_WORK *work , const int idx )
{
	PMSI_PARAM	*initParam;
	initParam = PMSI_PARAM_Create( PMSI_MODE_SENTENCE , PMSI_GUIDANCE_DEFAULT , 
  NULL, TRUE,
  SaveControl_GetPointer() , GFL_HEAPID_APP );
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(pmsinput), &ProcData_PMSInput, initParam);
	return TRUE;
	
}

static BOOL TESTMODE_ITEM_SelectDebPokeList( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(pokelist), &PokeList_ProcData, NULL );
	return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebPokeStatus( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(poke_status), &PokeStatus_ProcData, NULL );
	return TRUE;
}

#if USE_MUSICAL_EDIT
static BOOL TESTMODE_ITEM_SelectMusicalEditor( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(musical), &MusicalEdit_ProcData, NULL);
	return TRUE;
}
#endif //USE_MUSICAL_EDIT

static BOOL TESTMODE_ITEM_SelectDebDebugAriizumi( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(ariizumi_debug), &DebugAriizumiMainProcData, NULL);
	return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebCameraTest( TESTMODE_WORK *work , const int idx )
{
	TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(comm_tvt), &COMM_TVT_ProcData, NULL);
	return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebLocalTvt( TESTMODE_WORK *work , const int idx )
{
  TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(local_tvt), &LocalTvt_ProcData, NULL);
  return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebMultiBoot( TESTMODE_WORK *work , const int idx )
{
  TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(multiboot), &MultiBoot_ProcData, NULL);
  return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebMultiBootBox( TESTMODE_WORK *work , const int idx )
{
  TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(multiboot), &MultiBootSelect_ProcData, NULL);
  return TRUE;
}

static BOOL TESTMODE_ITEM_SelectDebMultiBootCapture( TESTMODE_WORK *work , const int idx )
{
  TESTMODE_COMMAND_ChangeProc(work,FS_OVERLAY_ID(multiboot), &MultiBootCapture_ProcData, NULL);
  return TRUE;
}
