////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  調査レーダー 全画面共通データ
 * @file   research_common_data.cdat
 * @author obata
 * @date   2010.02.26
 */
//////////////////////////////////////////////////////////////////////////////////////////////// 
#include <gflib.h>
#include "palette_anime.h"
#include "research_common.h"
#include "research_common_index.h"
#include "research_common_def.h"


//===============================================================================
// ■VRAM-Bank 設定
//===============================================================================
static const GFL_DISP_VRAM VRAMBankSettings =
{
  GX_VRAM_BG_128_A,            // MAIN-BG
  GX_VRAM_BGEXTPLTT_NONE,      // MAIN-BG-EXP-PLT
  GX_VRAM_SUB_BG_128_C,        // SUB--BG
  GX_VRAM_SUB_BGEXTPLTT_NONE,  // SUB--BG-EXP-PLT
  GX_VRAM_OBJ_64_E,            // MAIN-OBJ
  GX_VRAM_OBJEXTPLTT_NONE,     // MAIN-OBJ-EXP-PLT
  GX_VRAM_SUB_OBJ_16_I,        // SUB--OBJ
  GX_VRAM_SUB_OBJEXTPLTT_NONE, // SUB--OBJ-EXP-PLT
  GX_VRAM_TEX_0_B,             // TEX-IMG
  GX_VRAM_TEXPLTT_0_G,         // TEX-PLT
  GX_OBJVRAMMODE_CHAR_1D_32K,  // MAIN-OBJ-MAPPING-MODE
  GX_OBJVRAMMODE_CHAR_1D_32K,  // SUB--OBJ-MAPPING-MODE
}; 

//===============================================================================
// ■BGモード設定
//===============================================================================
// 2D
static const GFL_BG_SYS_HEADER BGSysHeader2D = 
{
  GX_DISPMODE_GRAPHICS,   // 表示モード指定
  GX_BGMODE_0,            // ＢＧモード指定(メインスクリーン)
  GX_BGMODE_0,            // ＢＧモード指定(サブスクリーン)
  GX_BG0_AS_2D            // ＢＧ０の２Ｄ、３Ｄモード選択
}; 
// 3D
static const GFL_BG_SYS_HEADER BGSysHeader3D = 
{
  GX_DISPMODE_GRAPHICS,   // 表示モード指定
  GX_BGMODE_0,            // ＢＧモード指定(メインスクリーン)
  GX_BGMODE_0,            // ＢＧモード指定(サブスクリーン)
  GX_BG0_AS_3D            // ＢＧ０の２Ｄ、３Ｄモード選択
};


//===============================================================================
// ■セルアクターシステム
//===============================================================================
// 初期化データ
static const GFL_CLSYS_INIT CommonClactSystemInitData = 
{
  0, 0,   // メイン サーフェースの左上座標
  0, 512, // サブ サーフェースの左上座標
  4, 124, // メイン画面OAM管理開始位置/管理数 4の倍数
  4, 124, // サブ画面OAM管理開始位置/管理数 4の倍数
  0,      // セルVram転送管理数
  256,    ///< 登録できるキャラデータ数
  32,     ///< 登録できるパレットデータ数
  32,     ///< 登録できるセルアニメパターン数
  32,     ///< 登録できるマルチセルアニメパターン数（※現状未対応）
  16,     ///< メイン CGR VRAM管理領域 開始オフセット（キャラクタ単位）
  16,     ///< サブ CGR VRAM管理領域開始オフセット（キャラクタ単位）
};

//------------------------
// □セルアクターユニット
//------------------------

// 最大ワーク数
static const u16 CommonClactUnitWorkSize[ COMMON_CLUNIT_NUM ] = 
{
  COMMON_CLUNIT_MAIN_OBJ_WORK_SIZE,  // index COMMON_CLUNIT_MAIN_OBJ
};

// 描画優先順位
static const u8 CommonClactUnitPriority[ COMMON_CLUNIT_NUM ] = 
{
  COMMON_CLUNIT_MAIN_OBJ_PRIORITY,  // index COMMON_CLUNIT_MAIN_OBJ
};

// 初期化データ
typedef struct
{
  s16             posX;            // x 座標
  s16             posY;            // y 座標
  s16             animeSeq;        // アニメーションシーケンス
  u8              softPriority;    // ソフト優先順位
  u8              BGPriority;      // BG 優先順位
  COMMON_CLUNIT_INDEX    unitIdx;         // 所属ユニット
  COMMON_OBJ_RESOURCE_ID characterResID;  // キャラクタ リソース
  COMMON_OBJ_RESOURCE_ID paletteResID;    // パレット リソース
  COMMON_OBJ_RESOURCE_ID cellAnimeResID;  // セルアニメ リソース
  u16             setSurface;      // サーフェス指定

} COMMON_CLWK_INIT_DATA;

static const COMMON_CLWK_INIT_DATA CommonClactWorkInitData[ COMMON_CLWK_NUM ] = 
{
  { // COMMON_CLWK_RETURN,
    CLWK_RETURN_POS_X,         // x 座標
    CLWK_RETURN_POS_Y,         // y 座標
    CLWK_RETURN_ANIME_SEQ,     // アニメーションシーケンス
    CLWK_RETURN_SOFT_PRIORITY, // ソフト優先順位
    CLWK_RETURN_BG_PRIORITY,   // BG 優先順位
    COMMON_CLUNIT_MAIN_OBJ,                   // 所属ユニット
    COMMON_OBJ_RESOURCE_MAIN_CHARACTER,       // キャラクタ リソース
    COMMON_OBJ_RESOURCE_MAIN_PALETTE_ICON,    // パレット リソース
    COMMON_OBJ_RESOURCE_MAIN_CELL_ANIME,      // セルアニメ リソース
    CLSYS_DEFREND_MAIN,                // サーフェス指定
  },
};

//==============================================================================================
// ■パレットアニメーション
//==============================================================================================
typedef struct {
  u16*       destAdrs;  // 転送先アドレス
  u16*       srcAdrs;   // 元データのアドレス
  u8         colorNum;  // 転送カラー数
  ANIME_TYPE animeType; // アニメーションタイプ
  u16        fadeColor; // フェードカラー
} COMMON_PALETTE_ANIME_DATA;

static const COMMON_PALETTE_ANIME_DATA CommonPaletteAnimeData[ COMMON_PALETTE_ANIME_NUM ] = 
{
  // 選択リアクション (「もどる」アイコン )
  { 
    (u16*)( HW_OBJ_PLTT + (0 * ONE_PALETTE_SIZE) ),  // 転送先アドレス
    (u16*)( HW_OBJ_PLTT + (0 * ONE_PALETTE_SIZE) ),  // 元データのアドレス
    16,                                              // 転送カラー数
    ANIME_TYPE_BLINK_BRIGHT,                         // アニメーションタイプ
    0xffff,                                          // フェードカラー
  },
};

//==============================================================================================
// ■タッチ領域
//==============================================================================================
// 初期化データ
typedef struct
{
  u8 left;    // 左 (ドット単位)
  u8 right;   // 右 (ドット単位)
  u8 top;     // 上 (ドット単位)
  u8 bottom;  // 下 (ドット単位)

} COMMON_TOUCH_AREA_INIT_DATA;

static const COMMON_TOUCH_AREA_INIT_DATA CommonTouchAreaInitData[ COMMON_TOUCH_AREA_NUM ] = 
{
  //「もどる」ボタン
  {
    TOUCH_AREA_RETURN_BUTTON_X,
    TOUCH_AREA_RETURN_BUTTON_X + TOUCH_AREA_RETURN_BUTTON_WIDTH,
    TOUCH_AREA_RETURN_BUTTON_Y,
    TOUCH_AREA_RETURN_BUTTON_Y + TOUCH_AREA_RETURN_BUTTON_HEIGHT,
  },
  // 終端コード
  { GFL_UI_TP_HIT_END, 0, 0, 0 }, 
};
