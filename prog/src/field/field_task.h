//////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  フィールドマップ上で動作するタスク
 * @file   field_task.h
 * @author obata
 * @date   2009.11.13
 */
//////////////////////////////////////////////////////////////////////////////////////////
#pragma once


//========================================================================================
// ■関数一覧
//========================================================================================
/*
FIELD_TASK* FIELD_TASK_Create( HEAPID heap_id, int work_size, 
                               FIELD_TASK_MAIN_FUNC* main_func );
void FIELD_TASK_Delete( FIELD_TASK* task );
void FIELD_TASK_Main( FIELD_TASK* task );
void FIELD_TASK_Boot( FIELD_TASK* task );
TASK_STATE FIELD_TASK_GetTaskState( const FIELD_TASK* task );
*/


//========================================================================================
// ■不完全型の宣言
//========================================================================================
typedef struct _FIELD_TASK FIELD_TASK;


//========================================================================================
// ■タスク制御関数
//========================================================================================
// タスク処理関数の戻り値
typedef enum{
  CONTINUE,   // 続行
  FINISH,     // 終了
} RETVAL_MAIN;

// タスク処理関数
typedef RETVAL_MAIN (FIELD_TASK_MAIN_FUNC)( void* work );


//========================================================================================
// ■定数
//========================================================================================
// タスクの状態
typedef enum{
  TASK_STATE_WAIT,     // 起動待ち
  TASK_STATE_EXECUTE,  // 実行中
  TASK_STATE_END,      // 終了
  TASK_STATE_NUM,
  TASK_STATE_MAX = TASK_STATE_NUM - 1
} TASK_STATE;



//========================================================================================
// ■作成・破棄
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief タスクを作成する
 *
 * @param heap_id   使用するヒープID
 * @param work_size ワークサイズ
 * @param main_func タスク処理関数
 *
 * @return 作成したタスク
 */
//----------------------------------------------------------------------------------------
extern FIELD_TASK* FIELD_TASK_Create( HEAPID heap_id, int work_size, 
                                      FIELD_TASK_MAIN_FUNC* main_func );
                              

//----------------------------------------------------------------------------------------
/**
 * @brief タスクを破棄する
 *
 * @param task 破棄するタスク
 */
//----------------------------------------------------------------------------------------
extern void FIELD_TASK_Delete( FIELD_TASK* task );


//========================================================================================
// ■動作
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief タスクを動かす
 *
 * @param task 動かすタスク
 */
//----------------------------------------------------------------------------------------
extern void FIELD_TASK_Main( FIELD_TASK* task );


//========================================================================================
// ■制御
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief タスクを起動する
 *
 * @param task 起動させるタスク
 */
//----------------------------------------------------------------------------------------
extern void FIELD_TASK_Boot( FIELD_TASK* task );


//========================================================================================
// ■取得
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief タスクワークを取得する
 *
 * @param task ワークを取得するタスク
 *
 * @return 指定したタスクのワーク
 */
//----------------------------------------------------------------------------------------
extern void* FIELD_TASK_GetWork( const FIELD_TASK* task );

//----------------------------------------------------------------------------------------
/**
 * @brief タスクが終了したかどうかを調べる
 *
 * @param task 調べるタスク
 * 
 * @return 終了していたら TRUE, そうでなければ FALSE
 */
//----------------------------------------------------------------------------------------
extern BOOL FIELD_TASK_IsEnd( const FIELD_TASK* task );

//----------------------------------------------------------------------------------------
/**
 * @brief タスクの状態を取得する
 *
 * @param task 取得対象のタスク
 *
 * @return 指定タスクの状態
 */ 
//----------------------------------------------------------------------------------------
extern TASK_STATE FIELD_TASK_GetState( const FIELD_TASK* task );
