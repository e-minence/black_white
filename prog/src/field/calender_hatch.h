#pragma once 

/////////////////////////////////////////////////////////////////////////////////// 
/**
 *
 * @brief  カレンダーの孵化データ
 * @author obata
 * @date   2009.08.05
 *
 */
/////////////////////////////////////////////////////////////////////////////////// 

#include <gflib.h>


// 不完全型の宣言
typedef struct _CALENDER_HATCH_INFO CALENDER_HATCH_INFO;


// 孵化変化番号
enum
{
  HATCH_NO_0,
  HATCH_NO_1,
  HATCH_NO_MAX
};


//---------------------------------------------------------------------------------
/**
 * @brief 孵化データを作成する
 *
 * @param heap_id 使用するヒープID
 *
 * @return 作成した孵化データ
 */
//---------------------------------------------------------------------------------
CALENDER_HATCH_INFO* CALENDER_HATCH_INFO_Create( HEAPID heap_id );

//---------------------------------------------------------------------------------
/**
 * @brief 指定日の孵化変化番号を取得する
 *
 * @param p_info データ
 * @parma p_date 日付
 *
 * @return 指定した日付の孵化変化番号
 */
//---------------------------------------------------------------------------------
u8 CALENDER_HATCH_INFO_GetHatchNo( CALENDER_HATCH_INFO* p_info, const RTCDate* p_date ); 

//---------------------------------------------------------------------------------
/**
 * @brief 孵化データを破棄する
 *
 * @param p_info 破棄するデータ
 */ 
//---------------------------------------------------------------------------------
void CALENDER_HATCH_INFO_Delete( CALENDER_HATCH_INFO* p_info ); 
