//////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  フィールドタスク管理
 * @file   field_task_manager.h
 * @author obata
 * @date   2009.11.13
 */
//////////////////////////////////////////////////////////////////////////////////////////
#pragma once


//========================================================================================
// ■関数一覧
//========================================================================================
/*
FIELD_TASK_MAN* FIELD_TASK_MAN_Create( int max_task_num, HEAPID heap_id );
void FIELD_TASK_MAN_Delete( FIELD_TASK_MAN* man );
void FIELD_TASK_MAN_Main( FIELD_TASK_MAN* man );
void FIELD_TASK_MAN_AddTask( FIELD_TASK_MAN* man, FIELD_TASK* task, FIELD_TASK* trig );
u8 FIELD_TASK_MAN_GetTaskNum( const FIELD_TASK_MAN* man );
BOOL FIELD_TASK_MAN_IsAllTaskEnd( const FIELD_TASK_MAN* man );
*/


//========================================================================================
// ■不完全型の宣言
//========================================================================================
typedef struct _FIELD_TASK_MAN FIELD_TASK_MAN;


//========================================================================================
// ■作成・破棄
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief タスクマネージャを作成する
 *
 * @param max_task_num タスクの最大登録数
 * @param heap_id      使用するヒープID
 *
 * @return 作成したマネージャ
 */
//----------------------------------------------------------------------------------------
extern FIELD_TASK_MAN* FIELD_TASK_MAN_Create( u8 max_task_num, HEAPID heap_id );

//----------------------------------------------------------------------------------------
/**
 * @brief タスクマネージャを破棄する
 *
 * @param man 破棄するマネージャ
 */
//----------------------------------------------------------------------------------------
extern void FIELD_TASK_MAN_Delete( FIELD_TASK_MAN* man );


//========================================================================================
// ■動作
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief タスクマネージャを動かす
 *
 * @param man 動かすマネージャ
 */
//----------------------------------------------------------------------------------------
extern void FIELD_TASK_MAN_Main( FIELD_TASK_MAN* man );


//========================================================================================
// ■制御
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief タスクを登録する
 *
 * @param man  登録先マネージャ
 * @param task 登録するマネージャ
 * @param trig タスク実行のトリガとなるタスク(不要ならNULLを指定)
 */
//----------------------------------------------------------------------------------------
extern void FIELD_TASK_MAN_AddTask( FIELD_TASK_MAN* man, 
                                    FIELD_TASK* task, FIELD_TASK* trig );


//========================================================================================
// ■取得
//========================================================================================

//----------------------------------------------------------------------------------------
/**
 * @brief 保持タスクの数を取得する
 *
 * @param man タスクの数を調べるマネージャ
 *
 * @return 動作中タスクの数
 */
//----------------------------------------------------------------------------------------
extern u8 FIELD_TASK_MAN_GetTaskNum( const FIELD_TASK_MAN* man );

//----------------------------------------------------------------------------------------
/**
 * @brief すべてのタスクが終了したかどうかを取得する
 *
 * @param man マネージャ
 *
 * @return 全タスクが終了していたら TRUE, そうでなければ FALSE
 */
//----------------------------------------------------------------------------------------
extern BOOL FIELD_TASK_MAN_IsAllTaskEnd( const FIELD_TASK_MAN* man );
