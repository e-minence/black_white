
//============================================================================================
/**
 * @file	rotate_sel.cdat
 * @brief	ローテーション選択用タッチパネル＆キー操作データテーブル
 * @author	soga
 * @date	2009.11.10
 */
//============================================================================================

#ifdef ROTATION_NEW_SYSTEM
static const GFL_UI_TP_HITTBL RotateTouchDataHitTbl[] = {
  //UP      DOWN    LEFT    RIGHT
  { 0x04*8, 0x0a*8, 0x00*8, 0x10*8},  //技1
  { 0x04*8, 0x0a*8, 0x10*8, 255},     //技2
  { 0x0a*8, 0x10*8, 0x00*8, 0x10*8},  //技3
  { 0x0a*8, 0x10*8, 0x10*8, 255},     //技4
  { 0x12*8, 0x18*8, 0x16*8, 255},     //キャンセル
  { 0x13*8, 0x18*8, 0x00*8, 0x0a*8},  //左側ボタン（スクリーンによって意味が変化）
  { 0x13*8, 0x18*8, 0x0a*8, 0x14*8},  //右側ボタン（スクリーンによって意味が変化）
  { GFL_UI_TP_HIT_END, 0, 0, 0 },   
};

static const BOOL RotateTouchDataCancel[] = {
  FALSE,  //技1
  FALSE,  //技2
  FALSE,  //技3
  FALSE,  //技4
  TRUE,   //キャンセル
  FALSE,  //左側ボタン
  FALSE,  //右側ボタン
};

static const int RotateTouchDataPltt[] = {
  1 <<  9,  //技1
  1 << 10,  //技2
  1 << 11,  //技3
  1 << 12,  //技4
  1 <<  4,  //キャンセル
  1 <<  2,  //左側ボタン
  1 <<  3,  //右側ボタン
};

static const BTLV_INPUT_HITTBL RotateTouchData = {
  RotateTouchDataHitTbl,
  RotateTouchDataCancel,
  RotateTouchDataPltt,
};

static const BTLV_INPUT_KEYTBL  RotateKey1_L[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE,  2,  BTLV_INPUT_NOMOVE,  1,  0,  4 },  //技1

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L   R                   A   B
  { { 1,  1,  1,  1,  -1, -1 }, BTLV_INPUT_NOMOVE,  3,  0,  BTLV_INPUT_NOMOVE,  1,  4 },  //技2

  //  LU  RU  LD  RD  LD2 RD2   U   D   L                   R   A   B
  { { 2,  2,  2,  2,  -1, -1 }, 0,  5,  BTLV_INPUT_NOMOVE,  3,  2,  4 },                  //技3

  //  LU  RU  LD  RD  LD2 RD2   U   D   L   R                   A   B
  { { 3,  3,  3,  3,  -1, -1 }, 1,  4,  2,  BTLV_INPUT_NOMOVE,  3,  4 },                  //技4

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L   R                   A   B
  { { 4,  4,  4,  4,  -1, -1 }, 3,  BTLV_INPUT_NOMOVE,  5,  BTLV_INPUT_NOMOVE,  4,  4 },  //キャンセル

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L                   R   A   B
  { { 5,  5,  5,  5,  -1, -1 }, 2,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  4,  5,  4 },  //左ボタン
};

static const BTLV_INPUT_KEYTBL  RotateKey1_R[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE,  2,  BTLV_INPUT_NOMOVE,  1,  0,  4 },  //技1

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L   R                   A   B
  { { 1,  1,  1,  1,  -1, -1 }, BTLV_INPUT_NOMOVE,  3,  0,  BTLV_INPUT_NOMOVE,  1,  4 },  //技2

  //  LU  RU  LD  RD  LD2 RD2   U   D   L                   R   A   B
  { { 2,  2,  2,  2,  -1, -1 }, 0,  5,  BTLV_INPUT_NOMOVE,  3,  2,  4 },                  //技3

  //  LU  RU  LD  RD  LD2 RD2   U   D   L   R                   A   B
  { { 3,  3,  3,  3,  -1, -1 }, 1,  4,  2,  BTLV_INPUT_NOMOVE,  3,  4 },                  //技4

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L   R                   A   B
  { { 4,  4,  4,  4,  -1, -1 }, 3,  BTLV_INPUT_NOMOVE,  5,  BTLV_INPUT_NOMOVE,  4,  4 },  //キャンセル

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L                   R   A   B
  { { 6,  6,  6,  6,  -1, -1 }, 2,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  4,  6,  4 },  //右ボタン
};

static const BTLV_INPUT_KEYTBL  RotateKey2[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE,  2,  BTLV_INPUT_NOMOVE,  1,  0,  4 },      //技1

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L   R                   A   B
  { { 1,  1,  1,  1,  -1, -1 }, BTLV_INPUT_NOMOVE,  3,  0,  BTLV_INPUT_NOMOVE,  1,  4 },      //技2

  //  LU  RU  LD  RD  LD2 RD2   U   D                       L                   R   A   B
  { { 2,  2,  2,  2,  -1, -1 }, 0,  5|BTLV_INPUT_MOVETBL,   BTLV_INPUT_NOMOVE,  3,  2,  4 },  //技3

  //  LU  RU  LD  RD  LD2 RD2   U   D   L   R                   A   B
  { { 3,  3,  3,  3,  -1, -1 }, 1,  4,  2,  BTLV_INPUT_NOMOVE,  3,  4 },                      //技4

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L   R                   A   B
  { { 4,  4,  4,  4,  -1, -1 }, 3,  BTLV_INPUT_NOMOVE,  6,  BTLV_INPUT_NOMOVE,  4,  4 },      //キャンセル

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L                   R   A   B
  { { 5,  5,  5,  5,  -1, -1 }, 2,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  6,  5,  4 },      //左ボタン

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L   R   A   B
  { { 6,  6,  6,  6,  -1, -1 }, 2,  BTLV_INPUT_NOMOVE,  5,  4,  6,  4 },                      //右ボタン
};

static const BTLV_INPUT_KEYTBL  *RotateKeyData[ 3 ] = { 
  RotateKey2,
  RotateKey1_L,
  RotateKey1_R,
};

static  const u8  RotateMoveTbl[] = {  
   5, 6, 0xff
};

enum
{ 
  ROTATE_SCR_C = 0,
  ROTATE_SCR_L,
  ROTATE_SCR_R,
  ROTATE_SCR_NONE,

  ROTATE_SCROLL_X0 = 256,
  ROTATE_SCROLL_X1 = 256,
  ROTATE_SCROLL_X2 = 0,
  ROTATE_SCROLL_X3 = 0,

  ROTATE_SCROLL_Y0 = 0x1c0,
  ROTATE_SCROLL_Y1 = 0x0c0,
  ROTATE_SCROLL_Y2 = 0x0c0,
  ROTATE_SCROLL_Y3 = 0x1c0,
};

static  const rotate_scroll_table[][ 2 ] =
{ 
  { ROTATE_SCROLL_X0, ROTATE_SCROLL_Y0 },   //SCR_C
  { ROTATE_SCROLL_X1, ROTATE_SCROLL_Y1 },   //SCR_L
  { ROTATE_SCROLL_X2, ROTATE_SCROLL_Y2 },   //SCR_R
  { ROTATE_SCROLL_X3, ROTATE_SCROLL_Y3 },   //NONE
};

static  const u8  rotate_button_exist_table[][ 2 ] =
{ 
  //L       R
  { TRUE,   TRUE,  },    //SCR_C
  { TRUE,   FALSE, },    //SCR_L
  { FALSE,  TRUE,  },    //SCR_R
};

static  const u8  rotate_screen_table[][ 2 ] =
{ 
  //L                 R                 
  { ROTATE_SCR_R,     ROTATE_SCR_L,     },    //SCR_C
  { ROTATE_SCR_C,     ROTATE_SCR_NONE,  },    //SCR_L
  { ROTATE_SCR_NONE,  ROTATE_SCR_C,     },    //SCR_R
};

static  const int  rotate_camera_focus[][ 2 ] =
{ 
  //L                               R                 
  { BTLEFF_ROTATION_POS_A_TO_E,     BTLEFF_ROTATION_POS_A_TO_C,     },    //SCR_C
  { BTLEFF_ROTATION_POS_C_TO_A,     NULL,                           },    //SCR_L
  { NULL,                           BTLEFF_ROTATION_POS_E_TO_A,     },    //SCR_R
};

static  const BtlRotateDir  rotate_result[] =
{ 
  BTL_ROTATEDIR_STAY,    //SCR_C
  BTL_ROTATEDIR_R,       //SCR_L
  BTL_ROTATEDIR_L,       //SCR_R
};

static  const BtlvMcssPos  rotate_focus_pos[] =
{ 
  BTLV_MCSS_POS_A,    //SCR_C
  BTLV_MCSS_POS_C,    //SCR_L
  BTLV_MCSS_POS_E,    //SCR_R
};

static const GFL_UI_TP_HITTBL RotateTouchDataHitTblWaruagaki[] = {
  //UP      DOWN    LEFT    RIGHT
  { 0x07*8, 0x0d*8, 0x08*8, 0x18*8},  //技1
  { 0x07*8, 0x0d*8, 0x08*8, 0x18*8},  //技2
  { 0x07*8, 0x0d*8, 0x08*8, 0x18*8},  //技3
  { 0x07*8, 0x0d*8, 0x08*8, 0x18*8},  //技4
  { 0x12*8, 0x18*8, 0x16*8, 255},     //キャンセル
  { 0x13*8, 0x18*8, 0x00*8, 0x0a*8},  //左側ボタン（スクリーンによって意味が変化）
  { 0x13*8, 0x18*8, 0x0a*8, 0x14*8},  //右側ボタン（スクリーンによって意味が変化）
  { GFL_UI_TP_HIT_END, 0, 0, 0 },   
};

static const BOOL RotateTouchDataCancelWaruagaki[] = {
  FALSE,  //技1
  FALSE,  //技2
  FALSE,  //技3
  FALSE,  //技4
  TRUE,   //キャンセル
  FALSE,  //左側ボタン
  FALSE,  //右側ボタン
};

static const int RotateTouchDataPlttWaruagaki[] = {
  1 <<  9,  //技1
  1 << 10,  //技2
  1 << 11,  //技3
  1 << 12,  //技4
  1 <<  4,  //キャンセル
  1 <<  2,  //左側ボタン
  1 <<  3,  //右側ボタン
};

static const BTLV_INPUT_HITTBL RotateTouchDataWaruagaki = {
  RotateTouchDataHitTblWaruagaki,
  RotateTouchDataCancelWaruagaki,
  RotateTouchDataPlttWaruagaki,
};

static const BTLV_INPUT_KEYTBL  RotateKey1Waruagaki[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技1

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技2

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技3

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技4

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L   R                   A   B
  { { 4,  4,  4,  4,  -1, -1 }, 0,  BTLV_INPUT_NOMOVE,  5,  BTLV_INPUT_NOMOVE,  4,  4 },  //キャンセル

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L                   R   A   B
  { { 5,  5,  5,  5,  -1, -1 }, 0,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  4,  5,  4 },  //左ボタン
};

static const BTLV_INPUT_KEYTBL  RotateKey2Waruagaki[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技1

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技2

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技3

  //  LU  RU  LD  RD  LD2 RD2   U                   D   L                   R                   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE, -5,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  4 },  //技4

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L   R                   A   B
  { { 4,  4,  4,  4,  -1, -1 }, 0,  BTLV_INPUT_NOMOVE,  6,  BTLV_INPUT_NOMOVE,  4,  4 },  //キャンセル

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L                   R   A   B
  { { 5,  5,  5,  5,  -1, -1 }, 0,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  6,  5,  4 },  //左ボタン

  //  LU  RU  LD  RD  LD2 RD2   U   D                   L   R   A   B
  { { 6,  6,  6,  6,  -1, -1 }, 0,  BTLV_INPUT_NOMOVE,  5,  4,  6,  4 },                  //右ボタン
};

static const BTLV_INPUT_KEYTBL  *RotateKeyDataWaruagaki[ 3 ] = { 
  RotateKey2Waruagaki,
  RotateKey1Waruagaki,
  RotateKey1Waruagaki,
};

#else
static const GFL_UI_TP_HITTBL RotateTouchDataHitTbl[] = {
  //UP      DOWN    LEFT    RIGHT
  { 0x12*8, 0x18*8, 0x00*8, 0x0a*8},  //左周り
  { 0x12*8, 0x18*8, 0x16*8, 255},     //右周り
  { 0x13*8, 0x18*8, 0x0b*8, 0x15*8},  //けってい
  { GFL_UI_TP_HIT_END, 0, 0, 0 },   
};

static const BOOL RotateTouchDataCancel[] = {
  FALSE,  //左周り
  FALSE,  //右周り
  FALSE,  //けってい
};

static const int RotateTouchDataPltt[] = {
  1 << 2,  //左周り
  1 << 3,  //右周り
  1 << 4,  //けってい
};

static const BTLV_INPUT_HITTBL RotateTouchData = {
  RotateTouchDataHitTbl,
  RotateTouchDataCancel,
  RotateTouchDataPltt,
};

static const BTLV_INPUT_KEYTBL  RotateKeyL[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L                   R   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  1,  0,  BTLV_INPUT_NOMOVE },  //0
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L   R                   A   B
  { { 2,  2,  2,  2,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  BTLV_INPUT_NOMOVE,  2,  BTLV_INPUT_NOMOVE },  //1
};

static const BTLV_INPUT_KEYTBL  RotateKeyR[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L   R                   A   B
  { { 1,  1,  1,  1,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  1,  BTLV_INPUT_NOMOVE,  1,  BTLV_INPUT_NOMOVE },  //0
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L                   R   A   B
  { { 2,  2,  2,  2,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  2,  BTLV_INPUT_NOMOVE },  //1
};

static const BTLV_INPUT_KEYTBL  RotateKeyC[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L                   R   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  1,  0,  BTLV_INPUT_NOMOVE },  //0
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L   R                   A   B
  { { 1,  1,  1,  1,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  BTLV_INPUT_NOMOVE,  1,  BTLV_INPUT_NOMOVE },  //1
};

static const BTLV_INPUT_KEYTBL  RotateKeyC_All[] = {  
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L                   R   A   B
  { { 0,  0,  0,  0,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  2,  0,  BTLV_INPUT_NOMOVE },  //0
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L   R                   A   B
  { { 1,  1,  1,  1,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  2,  BTLV_INPUT_NOMOVE,  1,  BTLV_INPUT_NOMOVE },  //1
  //  LU  RU  LD  RD  LD2 RD2   U                   D                   L   R   A   B
  { { 2,  2,  2,  2,  -1, -1 }, BTLV_INPUT_NOMOVE,  BTLV_INPUT_NOMOVE,  0,  1,  2,  BTLV_INPUT_NOMOVE },  //2
};

static const BTLV_INPUT_KEYTBL  *RotateKeyData[ 4 ] = { 
  RotateKeyL,
  RotateKeyR,
  RotateKeyC,
  RotateKeyC_All,
};

static  const u8  button_exist_table[][ 3 ] =
{ 
  //L       R       C
  { TRUE,   FALSE,  TRUE  },    //SCR_L
  { FALSE,  TRUE,   TRUE  },    //SCR_R
  { TRUE,   TRUE,   FALSE },    //SCR_C
  { TRUE,   TRUE,   TRUE  },    //SCR_C_ALL
};

enum
{ 
  ROTATE_SCR_L = 0,
  ROTATE_SCR_R,
  ROTATE_SCR_C,
  ROTATE_SCR_C_ALL,
  ROTATE_SCR_NONE,

  ROTATE_SCROLL_X0 = 0,
  ROTATE_SCROLL_X1 = 256,
  ROTATE_SCROLL_X2 = 0,
  ROTATE_SCROLL_X3 = 256,

  ROTATE_SCROLL_Y0 = 0x1c0,
  ROTATE_SCROLL_Y1 = 0x1c0,
  ROTATE_SCROLL_Y2 = 0x0c0,
  ROTATE_SCROLL_Y3 = 0x0c0,
};

typedef struct
{ 
  u8  init_scr;   //初期スクリーン
  u8  left_scr;   //左周り時のスクリーン
  u8  right_scr;  //右周り時のスクリーン
}BTLV_INPUT_ROTATE_DATA;

static  const BTLV_INPUT_ROTATE_DATA  bird[] =
{ 
  { ROTATE_SCR_C_ALL, ROTATE_SCR_R,     ROTATE_SCR_L },
  { ROTATE_SCR_C,     ROTATE_SCR_R,     ROTATE_SCR_L },
  { ROTATE_SCR_L,     ROTATE_SCR_R,     ROTATE_SCR_NONE },
  { ROTATE_SCR_R,     ROTATE_SCR_NONE,  ROTATE_SCR_L },
};

static  const rotate_scroll_table[][ 2 ] =
{ 
  { ROTATE_SCROLL_X0, ROTATE_SCROLL_Y0 },
  { ROTATE_SCROLL_X1, ROTATE_SCROLL_Y1 },
  { ROTATE_SCROLL_X2, ROTATE_SCROLL_Y2 },
  { ROTATE_SCROLL_X3, ROTATE_SCROLL_Y3 },
};

/*
  BTL_ROTATEDIR_NONE = 0,
  BTL_ROTATEDIR_STAY,
  BTL_ROTATEDIR_R,
  BTL_ROTATEDIR_L,
*/
#endif
