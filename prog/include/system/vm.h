//============================================================================================
/**
 * @file	vm.h
 * @brief	仮想インタープリタマシン　メイン部分(スクリプトコマンド実行に使用される)
 * @author	tamada GAME FREAK inc.
 * @date	01.11.07
 *
 * 08.11.12	tamada	DPから持ってきて汎用性・拡張性を持たせるよう改造開始
 *
 * 仮想マシンを利用する箇所でこのヘッダをインクルードする
 */
//============================================================================================
#pragma once
#ifdef	__cplusplus
extern "C" {
#endif


//============================================================================================
//	定義
//============================================================================================
//-------------------------------------------------------------------------
///	仮想マシン構造体宣言
//-------------------------------------------------------------------------
typedef struct VM_HANDLE_STRUCT VMHANDLE;

//-------------------------------------------------------------------------
/**
 * @brief	仮想マシン用データ
 */
//-------------------------------------------------------------------------
typedef	u8	VM_CODE;				// スクリプト、イベントデータの型宣言

//-------------------------------------------------------------------------
/**
 * @brief	仮想マシンが扱う基本データサイズ
 *
 * スタックやレジスタのサイズを規定する
 */
//-------------------------------------------------------------------------
typedef u32 VM_VALUE;


//-------------------------------------------------------------------------
/**
 * @brief	仮想マシン命令の戻り値定義
 */
//-------------------------------------------------------------------------
typedef enum {
	VMCMD_RESULT_CONTINUE = 0,	///<連続実行
	VMCMD_RESULT_SUSPEND,		///<コマンド実行を中断して制御を返す
}VMCMD_RESULT;

//-------------------------------------------------------------------------
/**
 * @brief	仮想マシン命令用関数の定義
 *
 * @param	VMHANDLE *	仮想マシンへのポインタ
 * @param	void *		コンテキストワークへのポインタ
 * @return	VMCMD_RESULT	VMCMD_RESULTの定義を参照
 */
//-------------------------------------------------------------------------
typedef VMCMD_RESULT ( * VMCMD_FUNC)(VMHANDLE *, void *);

//-------------------------------------------------------------------------
/**
 * @brief	仮想マシン用ウェイト関数の定義
 *
 * @param	VMHANDLE *	仮想マシンへのポインタ
 * @param	void *		コンテキストワークへのポインタ
 * @return	BOOL		TRUEのとき、ウェイト終了
 */
//-------------------------------------------------------------------------
typedef BOOL (*VM_WAIT_FUNC)(VMHANDLE *, void *);

//-------------------------------------------------------------------------
/**
 * @brief	仮想マシン生成時の初期化パラメータ定義
 */
//-------------------------------------------------------------------------
typedef struct {
	u16 stack_size;						///<使用するスタックのサイズ
	u16 reg_size;						///<使用するレジスタの数
	const VMCMD_FUNC * command_table;	///<使用する仮想マシン命令の関数テーブル
	const u32 command_max;				///<使用する仮想マシン命令定義の最大数
}VM_INITIALIZER;

//********************************************************************************************
//	仮想マシン制御用
//********************************************************************************************

//--------------------------------------------------------------------------------------------
/**
 * @brief	仮想マシンの生成処理
 * @param	heapID		使用するヒープ指定ID
 * @param	init		初期化パラメータへのポインタ
 * @return	VMHANDLE	生成した仮想マシンへのポインタ
 */
//--------------------------------------------------------------------------------------------
extern VMHANDLE * VM_Create(HEAPID heapID, const VM_INITIALIZER * init);

//--------------------------------------------------------------------------------------------
/**
 * @brief	仮想マシンの破棄処理
 * @param	core	破棄する仮想マシンへのポインタ
 */
//--------------------------------------------------------------------------------------------
extern void VM_Delete(VMHANDLE * core);

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシン初期化
 *
 * @param	core			仮想マシン制御構造体へのポインタ
 * @param	context_work	参照ポインタ
 */
//--------------------------------------------------------------------------------------------
extern void VM_Init(VMHANDLE * core, void * context_work);

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンにコードを設定
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 * @param	start		実行コードの開始アドレス
 */
//--------------------------------------------------------------------------------------------
extern void VM_Start( VMHANDLE * core, const VM_CODE * start );

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシン実行終了
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 */
//--------------------------------------------------------------------------------------------
extern void VM_End( VMHANDLE * core );

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシン制御メイン
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 *
 * @retval	"TRUE = 実行中"
 * @retval	"FALSE = 停止中・実行終了"
 */
//--------------------------------------------------------------------------------------------
extern BOOL VM_Control( VMHANDLE * core );

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンコンテキスト取得
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 *
 * @return	void *		仮想マシンが保持しているコンテキストポインタを返す
 *
 * コンテキストはVM_Initで与えたもの
 *
 */
//--------------------------------------------------------------------------------------------
extern void * VM_GetContext( VMHANDLE * core );

#ifdef	__cplusplus
};	/* extern "C" */
#endif

