//============================================================================================
/**
 * @file	vm_cmd.h
 * @brief	仮想インタープリタマシン　命令定義用ヘッダ
 * @author	tamada GAME FREAK inc.
 * @date	01.11.07
 *
 * 08.11.12	tamada	DPから持ってきて汎用性・拡張性を持たせるよう改造開始
 *
 * 仮想マシン用命令を定義するところでこのヘッダをインクルードする。
 * 仮想マシンを利用するだけの箇所ではインクルードする必要はない。
 */
//============================================================================================
#pragma once
#ifdef	__cplusplus
extern "C" {
#endif

#include "system/vm.h"

//-------------------------------------------------------------------------
/**
 * @brief	仮想マシン構造体定義
 */
//-------------------------------------------------------------------------
struct VM_HANDLE_STRUCT{
	VM_INITIALIZER init_value;		///< 初期化データ
	u8	stackcount;					///< スタックポインタ
	u8	status;						///< 動作状態
	u8	cmp_flag;					///< 計算結果フラグ
	VM_WAIT_FUNC routine;			///< ウェイト関数
	const VM_CODE * adrs;			///< 現在のスクリプトアドレス
	VM_VALUE * stack;				///< スタック
	VM_VALUE * vm_register;			///< 汎用レジスタ
	void * context;					///< コマンドなどで参照するワークのポインタ

	VM_CODE * pScript;				///< ロードしたスクリプト
};



//********************************************************************************************
//	スタック操作
//********************************************************************************************

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンスタックプッシュ
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 * @param	value		プッシュする値
 *
 */
//--------------------------------------------------------------------------------------------
extern void VMCMD_Push( VMHANDLE * core, VM_VALUE value);

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンスタックポップ
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 *
 * @return
 */
//--------------------------------------------------------------------------------------------
extern VM_VALUE VMCMD_Pop( VMHANDLE * core );


//********************************************************************************************
//	分岐命令
//********************************************************************************************

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンジャンプ命令
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 * @param	adrs		ジャンプ先アドレス
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void VMCMD_Jump( VMHANDLE * core, const VM_CODE * adrs );

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンコール命令
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 * @param	adrs		呼び出すアドレス
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void VMCMD_Call( VMHANDLE * core, const VM_CODE * adrs );

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンリターン命令
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void VMCMD_Return( VMHANDLE * core );

//--------------------------------------------------------------------------------------------
/**
 * 仮想マシンをウェイト状態に設定
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 * @param	func		ウェイト関数
 *
 * @return	none
 *
 * @li	TRUEが返ってくるまでウェイト関数を毎回呼びだす
 */
//--------------------------------------------------------------------------------------------
extern void VMCMD_SetWait( VMHANDLE * core, VM_WAIT_FUNC func );


//********************************************************************************************
//	データ取得
//********************************************************************************************

//--------------------------------------------------------------------------------------------
/**
 @brief	u8サイズのデータを取得するためのinline関数
 */
//--------------------------------------------------------------------------------------------
static inline u8 VMGetU8(VMHANDLE *core)
{
	u8 ret = *(core->adrs);
	++ core->adrs;
	return ret;
}

//--------------------------------------------------------------------------------------------
/**
 * adrsのアドレスから16bit(2byte)データ取得
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 *
 * @return	取得データ
 */
//--------------------------------------------------------------------------------------------
extern u16 VMGetU16( VMHANDLE * core );

//--------------------------------------------------------------------------------------------
/**
 * adrsのアドレスから32bit(4byte)データ取得
 *
 * @param	core		仮想マシン制御構造体へのポインタ
 *
 * @return	取得データ
 */
//--------------------------------------------------------------------------------------------
extern u32 VMGetU32( VMHANDLE * core );

//--------------------------------------------------------------------------------------------
/**
 * @brief	値の比較
 * @param	core		仮想マシン制御構造体へのポインタ
 * @param	r1			比較する値その１
 * @param	r2			比較する値その２
 *
 * 比較結果はVMHANDLE::cmp_flagに反映する
 */
//--------------------------------------------------------------------------------------------
extern void VMCompare(VMHANDLE * core, VM_VALUE r1, VM_VALUE r2 );

#ifdef	__cplusplus
};	/* extern "C" */
#endif

