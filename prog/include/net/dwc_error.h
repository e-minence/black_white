//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *
 *	@file		dwc_error.h
 *	@brief  DWC汎用エラーチェック検知関数
 *	@author	Toru=Nagihashi
 *	@date		2010.02.18
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once

//=============================================================================
/**
 *					定数宣言
*/
//=============================================================================
//-------------------------------------
///	終了タイプ
//=====================================
typedef enum
{
  GFL_NET_DWC_ERROR_RESULT_NONE,        //エラーはおきていない
  GFL_NET_DWC_ERROR_RESULT_PRINT_MSG,   //メッセージを描画するだけ
  GFL_NET_DWC_ERROR_RESULT_RETURN_PROC, //PROCから抜けなければならない
  GFL_NET_DWC_ERROR_RESULT_FATAL,       //電源切断のため無限ループになる
  GFL_NET_DWC_ERROR_RESULT_TIMEOUT,     //タイムアウト中
} GFL_NET_DWC_ERROR_RESULT;


//=============================================================================
/**
 *					プロトタイプ宣言
*/
//=============================================================================
//----------------------------------------------------------------------------
/**
 *	@brief  DWCでエラーをチェックしエラーの軽度によって表示を切り分ける
 *	        軽いエラーならば、その場で表示
 *	        重いエラーならば、プロセス移動時に表示
 *	        Fatalならば、その場で表示し無限ループになる
 *
 *	@param	強制的に  軽度エラーも重度扱い（PROC後切断しメッセージ表示）にするか？
 *
 *	@return GFL_NET_DWC_ERROR_RESULT
 */
//-----------------------------------------------------------------------------
extern GFL_NET_DWC_ERROR_RESULT GFL_NET_DWC_ERROR_ReqErrorDisp( BOOL is_heavy );
