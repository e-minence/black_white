//============================================================================================
/**
 * @file	pm_sndsys.h
 * @brief	ポケモンサウンドシステム
 * @author	
 * @date	
 */
//============================================================================================
#ifndef __PMSNDSYS_H__
#define __PMSNDSYS_H__

#include "sound/sound_data.h"
#include "sound/wb_sound_data.sadl"		//サウンドラベルファイル
//------------------------------------------------------------------
/**
 * @brief	データＩＮＤＥＸ有効範囲
 */
//------------------------------------------------------------------
#define PMSND_BGM_START		(BGM_START)
#define PMSND_BGM_END			(SEQ_MUS_END)
#define PMSND_SE_START		(SE_START)
#define PMSND_SE_END			(SEQ_SE_END)

//------------------------------------------------------------------
/**
 * @brief	ＳＥプレーヤー設定定義
 */
//------------------------------------------------------------------
typedef enum {
	SEPLAYER_SYS = 0,
	SEPLAYER_SE1,
	SEPLAYER_SE2,

}SEPLAYER_ID;

#define SEPLAYER_MAX (3)
//------------------------------------------------------------------
/**
 * @brief	関数引数用定義
 */
//------------------------------------------------------------------
#define PMSND_NOEFFECT (-1)

//============================================================================================
/**
 *
 * @brief	サウンドシステム（main.c等から呼び出される）
 *
 */
//============================================================================================
extern void	PMSND_Init( void );
extern void	PMSND_Main( void );
extern void	PMSND_Exit( void );

//	情報取得
extern u32						PMSND_GetSndHeapFreeSize( void );
extern NNSSndHandle*	PMSND_GetBGMhandlePointer( void );
extern u32						PMSND_GetBGMsoundNo( void );
extern u32						PMSND_GetNextBGMsoundNo( void );	//再生予定or再生中のIDX取得
extern u32						PMSND_GetBGMplayerNoIdx( void );
extern BOOL						PMSND_CheckOnReverb( void );

//	リバーブ設定
extern void PMSND_EnableCaptureReverb( u32 depth, u32 samplingRate, int volume, int stopFrames );
extern void PMSND_DisableCaptureReverb( void );
extern void PMSND_ChangeCaptureReverb( u32 depth, u32 samplingRate, int volume, int stopFrames );

//============================================================================================
/**
 *
 * @brief	ＢＧＭサウンド関数（各appから呼び出される）
 *
 */
//============================================================================================
//ＢＧＭを再生
extern void	PMSND_PlayBGM_EX( u32 soundIdx, u16 trackBit );
#define PMSND_PlayBGM( soundIdx ) PMSND_PlayBGM_EX( soundIdx, 0xffff )	//上記簡易版
//ＢＧＭ自動フェード再生
extern void	PMSND_PlayNextBGM_EX
		( u32 soundIdx, u16 trackBit, u8 fadeOutFrame, u8 fadeInFrame );	
#define PMSND_PlayNextBGM( soundIdx, fadeInFrame, fadeOutFrame ) \
					PMSND_PlayNextBGM_EX( soundIdx, 0xffff, fadeInFrame, fadeOutFrame );	//上記簡易版
//ＢＧＭ終了検出(TRUE実行中)
extern BOOL	PMSND_CheckPlayBGM( void );
//ＢＧＭの再生トラック変更
extern void	PMSND_ChangeBGMtrack( u16 trackBit );
//ＢＧＭステータス変更
extern void	PMSND_SetStatusBGM( int tempoRatio, int pitch, int pan );

//現在のＢＧＭを停止
extern void	PMSND_StopBGM( void );
//現在のＢＧＭを一時停止(TRUE停止,FALSE再開)
extern void	PMSND_PauseBGM( BOOL pauseFlag );
//現在のＢＧＭをフェードイン
extern void	PMSND_FadeInBGM( u16 frames );
//現在のＢＧＭをフェードアウト
extern void	PMSND_FadeOutBGM( u16 frames );
//フェード実行チェック(TRUE実行中)
extern BOOL	PMSND_CheckFadeOnBGM( void );

//現在のＢＧＭを退避
extern void	PMSND_PushBGM( void );
//現在のＢＧＭを復元
extern void	PMSND_PopBGM( void );

//システムフェード（自動）フレーム設定
extern void PMSND_SetSystemFadeFrames( int fadeOutFrame, int fadeInFrame );

//============================================================================================
/**
 *
 * @brief	ＳＥサウンド関数（各appから呼び出される）
 *
 */
//============================================================================================
//ＳＥ初期設定SEPLAYER_ID取得
extern SEPLAYER_ID	PMSND_GetSE_DefaultPlayerID( u32 soundIdx );
//ＳＥプレーヤーハンドル取得
extern NNSSndHandle* PMSND_GetSE_SndHandle( SEPLAYER_ID sePlayerID );

extern void	PMSND_PlaySE_byPlayerID( u32 soundIdx, SEPLAYER_ID sePlayerID );
#define PMSND_PlaySystemSE( soundNum ) PMSND_PlaySE( soundNum )
//ＳＥを再生
extern void	PMSND_PlaySE( u32 soundIdx );
//ＳＥをプレーヤーを指定して再生
extern void	PMSND_PlaySE_byPlayerID( u32 soundIdx, SEPLAYER_ID sePlayerID );
//全ＳＥを停止
extern void	PMSND_StopSE( void );
//ＳＥをプレーヤーを指定して停止
extern void	PMSND_StopSE_byPlayerID( SEPLAYER_ID sePlayerID );
//全ＳＥの終了を検出(TRUE実行中)
extern BOOL	PMSND_CheckPlaySE( void );
//ＳＥの終了をプレーヤーを指定して終了検出(TRUE実行中)
extern BOOL	PMSND_CheckPlaySE_byPlayerID( SEPLAYER_ID sePlayerID );
//ＳＥのステータスを変更
extern void	PMSND_SetStatusSE( int tempoRatio, int pitch, int pan );
//ＳＥのステータスをプレーヤーを指定して変更
extern void	PMSND_SetStatusSE_byPlayerID(SEPLAYER_ID sePlayerID,int tempoRatio,int pitch,int pan);

//============================================================================================
/**
 *
 *
 * @brief	プリセット関数ラッパー
 *					とりあえずシステムでハンドルを１つだけ用意し簡易登録可能にする
 *
 *
 */
//============================================================================================
extern void	PMDSND_PresetSoundTbl( const u32* soundIdxTbl, u32 tblNum );
extern void	PMSND_PresetGroup( u32 groupIdx );
extern void	PMSND_ReleasePreset( void );




//サウンドテスト用
//※現在マップ切り替わり時のデータ取得と戦闘などSubProcから帰ってくる
//　場所が切り分けられていないので仮でフラグ管理する
extern BOOL debugBGMsetFlag;
#endif
