//============================================================================
/**
 *
 *	@file		ui_scene.h
 *	@brief	シーン管理モジュール
 *	@author	hosaka genya
 *	@data		2009.07.01
 *
 */
//============================================================================
#pragma once

// 不完全型定義
typedef struct UI_SCENE_CNT_tag * UI_SCENE_CNT_PTR;

// 各シーン用関数
typedef BOOL (*UI_SCENE_FUNC)( UI_SCENE_CNT_PTR cnt, void* work );

//=============================================================================
/**
 *								定数定義
 */
//=============================================================================
enum
{	
	UI_SCENE_ID_NULL	= 0xffff,
	UI_SCENE_ID_END	  = 0xfffe,	///< このIDをセットするとシーン管理終了
};

//=============================================================================
/**
 *								構造体定義
 */
//=============================================================================

//--------------------------------------------------------------
///	シーンを構成する関数テーブル
//==============================================================
typedef struct {
	UI_SCENE_FUNC Init;			///< 初期化処理
	UI_SCENE_FUNC SetUp;		///< 前処理
	UI_SCENE_FUNC Main;			///< 主処理
	UI_SCENE_FUNC CleanUp;	///< 後処理
	UI_SCENE_FUNC Exit;			///< 終了処理
} UI_SCENE_FUNC_SET;

//=============================================================================
/**
 *								プロトタイプ宣言
 */
//=============================================================================
//-----------------------------------------------------------------------------
/**
 *	@brief	シーン管理モジュール 生成
 *
 *	@param	HEAPID heapID	ヒープID
 *	@param	UI_SCENE_FUNC_SET* func_set_tbl	シーンテーブル
 *	@param	scene_max	シーン数
 *	@param	work  シーン全体で参照するワーク
 *
 *	@retval	生成したワーク
 */
//-----------------------------------------------------------------------------
extern UI_SCENE_CNT_PTR UI_SCENE_CNT_Create( HEAPID heapID, const UI_SCENE_FUNC_SET* func_set_tbl, int scene_max, void* work );

//-----------------------------------------------------------------------------
/**
 *	@brief	シーン管理モジュール 削除
 *
 *	@param	UI_SCENE_CNT_PTR ptr 
 *
 *	@retval	none
 */
//-----------------------------------------------------------------------------
extern void UI_SCENE_CNT_Delete( UI_SCENE_CNT_PTR ptr );

//-----------------------------------------------------------------------------
/**
 *	@brief	シーン管理モジュール 主処理
 *
 *	@param	UI_SCENE_CNT_PTR ptr 
 *
 *	@retval
 */
//-----------------------------------------------------------------------------
extern BOOL UI_SCENE_CNT_Main( UI_SCENE_CNT_PTR ptr );

//-----------------------------------------------------------------------------
/**
 *	@brief	次のシーンをセット
 *
 *	@param	UI_SCENE_CNT_PTR ptr
 *	@param	scene_id 
 *
 *	@retval
 */
//-----------------------------------------------------------------------------
extern void UI_SCENE_CNT_SetNextScene( UI_SCENE_CNT_PTR ptr, int scene_id );

//-----------------------------------------------------------------------------
/**
 *	@brief	現在のシーンIDを取得
 *
 *	@param	UI_SCENE_CNT_PTR ptr 
 *
 *	@retval
 */
//-----------------------------------------------------------------------------
extern int UI_SCENE_CNT_GetSceneID( UI_SCENE_CNT_PTR ptr );

//-----------------------------------------------------------------------------
/**
 *	@brief	サブシーケンサを取得
 *
 *	@param	UI_SCENE_CNT_PTR ptr 
 *
 *	@retval
 */
//-----------------------------------------------------------------------------
extern u8 UI_SCENE_CNT_GetSubSeq( UI_SCENE_CNT_PTR ptr );

//-----------------------------------------------------------------------------
/**
 *	@brief	サブシーケンサをインクリメント
 *
 *	@param	UI_SCENE_CNT_PTR ptr 
 *
 *	@retval
 */
//-----------------------------------------------------------------------------
extern void UI_SCENE_CNT_IncSubSeq( UI_SCENE_CNT_PTR ptr );



