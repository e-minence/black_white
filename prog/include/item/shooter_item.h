//[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
/**
 *
 *	@file		shooter_item.h
 *	@brief  シューターアイテム使用許可テーブル
 *	@author	Toru=Nagihashi
 *	@date		2010.03.09
 *
 */
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
#pragma once

#include "shooter_item_data.h"
//=============================================================================
/**
 *					定数宣言
*/
//=============================================================================
//-------------------------------------
///	下記はshooter_item.cの中でビットが足りるかコンパイラアサートをしています
//  直接BITをMAXに変換しないのは、企画の方がエクセルをいじるとMAXが勝手にかわる場合があるため
//  それを防ぐようにしています
//  （例えば、配信用レギュレーションでも使われているので容易に変えられないようにしています）
//=====================================
#define SHOOTER_ITEM_BIT_TBL_MAX  (7)

//=============================================================================
/**
 *					構造体宣言
*/
//=============================================================================
//-------------------------------------
///	シューターアイテム使用許可テーブル
//    直接BATTLE_SETUP_PARAMの構造体に載せられるように
//    外部公開しています。
//=====================================
typedef struct 
{
  u8 bit_tbl[ SHOOTER_ITEM_BIT_TBL_MAX ];
} SHOOTER_ITEM_BIT_WORK;

//=============================================================================
/**
 *					プロトタイプ宣言
*/
//=============================================================================
//-------------------------------------
///	使用許可フラグ取得
//    ０〜SHOOTER_ITEM_MAXまでforで回し、
//    そのインデックスをshooter_itemにいれてください
//=====================================
extern BOOL SHOOTER_ITEM_IsUse( const SHOOTER_ITEM_BIT_WORK *cp_wk, u32 shooter_item );
//-------------------------------------
//  シューターアイテムインデックスからアイテムへの変換
//    上記インデックスをアイテムに変換します
//=====================================
extern u32  SHOOTER_ITEM_ShooterIndexToItemIndex( u32 shooter_item );
//-------------------------------------
//  シューターインデックスからシューターのコストを取得
//=====================================
extern u32  SHOOTER_ITEM_ShooterIndexToCost( u32 shooter_item );
//-------------------------------------
//  アイテムインデックスからシューターのコストを取得
//=====================================
extern u32  SHOOTER_ITEM_ItemIndexToCost( u32 item );
