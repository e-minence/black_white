//======================================================================
/**
 * @file	name_input.h
 * @brief	名前入力
 * @author	Toru=Nagihashi
 * @data	09/10/07
 */
//======================================================================

#ifndef NAME_INPUT_H__
#define NAME_INPUT_H__

#include "savedata\config.h"
#include "savedata\box_savedata.h"

//=============================================================================
/**
 *	定義
 */
//=============================================================================
//-------------------------------------
///	名前入力モード
//=====================================
typedef enum 
{
	NAMEIN_MYNAME = 0,	// 自分の名前	param1自分の性別
	NAMEIN_POKEMON,		// ポケモンの名前 param1モンスター番号 param2フォルム番号
	NAMEIN_BOX,			// ボックスの名前
	NAMEIN_RIVALNAME,	// ライバルネーム
	NAMEIN_FRIENDNAME,  // WIFIともだち手帳に書き込むともだちの名前 param1 フィールド３DOBJ
//	NAMEIN_FRIENDCODE,	// ともだちコード
//	NAMEIN_RANDOMGROUP, // 乱数の種グループの名前
//	NAMEIN_STONE,		// 石碑(配布）
	NAMEIN_MAX,
}NAMEIN_MODE;

//-------------------------------------
///	入力文字数
//=====================================
// ポケモン名前入力の長さ
#if (PM_LANG==LANG_JAPAN)
#define NAMEIN_POKEMON_LENGTH	(  5 )
#else
#define NAMEIN_POKEMON_LENGTH	( 10 )
#endif

// トレーナー名入力の長さ
#if (PM_LANG==LANG_JAPAN)
#define NAMEIN_PERSON_LENGTH	(  5 )
#else
#define NAMEIN_PERSON_LENGTH	( 7 )
#endif


// グループ名入力の長さ
#if (PM_LANG==LANG_JAPAN)
#define NAMEIN_GROUP_LENGTH		(  5 )
#else
#define NAMEIN_GROUP_LENGTH		( 7 )
#endif

//=============================================================================
/**
 *	構造体
 */
//=============================================================================
//-------------------------------------
///	PROCに渡すパラメータ
//=====================================
typedef struct
{
	NAMEIN_MODE mode;		// 入力モード(enum参照）

	union								//種類ごとに違う引数１
	{	
		u16 param1;				//各モードにて必要
		u16 hero_sex;			//NAMEIN_MYNAME			…主人公の性別
		u16 mons_no;			//NAMEIN_POKEMON		…モンスター番号
		u16 fld_person_id;//NAMEIN_FRIENDNAME	…友達の姿（フィールド３DOBJ）
	};

	union								//種類ごとに違う引数２
	{	
		u16 param2;				//NAMEIN_POKEMON以外は必要なし
		u16 form;					//NAMEIN_POKEMON	…フォルム番号
	};

	BOOL cancel;		// 名前入力が終了した時に反映されるフラグ。
									// 入力文字が０文字だった。もしくは最初と同じだった場合はこのフラグがTRUE

	u32 wordmax;		// 入力文字最大数
	STRBUF *strbuf; // このSTRBUFには２つの意味が存在する。
									// １つは名前入力画面からデータを受け取るワークであること。
									// 名前入力が終わったらここからコピーする
									// もう１つは、名前入力に行くときにここに文字列を格納しておくと,
									// 名前入力画面はその文字列を表示しながら開始する。引数としても機能する

	//現在未使用
#if 0
	// --------ポケモン捕獲でボックス転送になった時に必要-------------
	int get_msg_id; 	// ポケモン捕獲の時にBOX転送が発生した時のメッセージIDが入る
	BOX_MANAGER  *boxdata;	// ポケモン捕獲の時にBOX転送が発生した時に、BOXの名前を取得するために必要
	CONFIG    *config;  // コンフィグ構造体
#endif 
} NAMEIN_PARAM;

//=============================================================================
/**
 *	外部参照
 */
//=============================================================================
//-------------------------------------
///	PROCデータ
//=====================================
extern const GFL_PROC_DATA NameInputProcData;

//-------------------------------------
///	PARAM作成、破棄
//=====================================
//----------------------------------------------------------------------------
/**
 *	@brief	NAMEIN_PARAMを作成
 *					解放は下記、NameIn_ParamDeleteで行ってください
 *
 *	@param	HEAPID		ヒープID
 *	@param	mode			入力の種類
 *	@param	param1		種類による引数1
 *	@param	param2		種類による引数2
 *	@param	wordmax		文字入力数
 *	@param	default_str	初期に入力されている文字。いらない場合はNULL
 *
 *	@return	NAMEIN_PARAM
 */
//-----------------------------------------------------------------------------
extern NAMEIN_PARAM *NameIn_ParamAllocMake( HEAPID heapId, NAMEIN_MODE mode, int param1, int param2, int wordmax, const STRBUF *default_str );
//----------------------------------------------------------------------------
/**
 *	@brief	NAMEIN_PARAM解放
 *
 *	@param		NAMEIN_PARAM
 */
//-----------------------------------------------------------------------------
extern void NameIn_ParamDelete( NAMEIN_PARAM *param );
//-------------------------------------
///	PARAMからの取得
//=====================================
extern void NameIn_CopyStr( const NAMEIN_PARAM *param, STRBUF *strbuf );
extern STRBUF* NameIn_CreateCopyStr( const NAMEIN_PARAM *param, HEAPID heapID );
extern BOOL NameIn_IsCancel( const NAMEIN_PARAM *param );
#endif	//NAME_INPUT_H__
