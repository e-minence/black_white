/////////////////////////////////////////////////////////////////////////////////////////////
/**
 *
 * @brief  育て屋ワーク
 * @file   sodateya_work.h
 * @author obata
 * @date   2009.10.01
 *
 */
/////////////////////////////////////////////////////////////////////////////////////////////
#pragma once


//===========================================================================================
// ■ 定数
//===========================================================================================
// 飼育ポケモン最大数
#define SODATEYA_POKE_MAX (2)


//===========================================================================================
// ■ 不完全型の宣言
//===========================================================================================
typedef struct _SODATEYA_WORK SODATEYA_WORK;


//===========================================================================================
// ■ ポケモン, タマゴの取得・設定・削除
//===========================================================================================

//-------------------------------------------------------------------------------------------
/**
 * @brief タマゴ
 */
//-------------------------------------------------------------------------------------------
void SODATEYA_WORK_SetEgg( SODATEYA_WORK* work );
void SODATEYA_WORK_ClrEgg( SODATEYA_WORK* work );

//-------------------------------------------------------------------------------------------
/**
 * @brief ポケモン
 */
//-------------------------------------------------------------------------------------------
const POKEMON_PARAM* SODATEYA_WORK_GetPokemon( const SODATEYA_WORK* work, int index );
void SODATEYA_WORK_SetPokemon( SODATEYA_WORK* work, int index, const POKEMON_PARAM* poke );
void SODATEYA_WORK_ClrPokemon( SODATEYA_WORK* work, int index ); 


//===========================================================================================
// ■ 有効かどうかの判定
//===========================================================================================

//-------------------------------------------------------------------------------------------
/**
 * @brief タマゴ
 */
//-------------------------------------------------------------------------------------------
BOOL SODATEYA_WORK_IsValidEgg( const SODATEYA_WORK* work );

//-------------------------------------------------------------------------------------------
/**
 * @brief ポケモン
 */
//-------------------------------------------------------------------------------------------
BOOL SODATEYA_WORK_IsValidPokemon( const SODATEYA_WORK* work, int index );


//===========================================================================================
// ■ 取得関数
//===========================================================================================

// 飼育ポケモンの数
int SODATEYA_WORK_GetPokemonNum( const SODATEYA_WORK* work );

// 飼育ポケモンの成長経験値
u32 SODATEYA_WORK_GetGrowUpExp( const SODATEYA_WORK* work, int index );


//===========================================================================================
// ■ 設定関数
//===========================================================================================

// 飼育ポケモンを並べ替える
void SODATEYA_WORK_ExchangePokemon( SODATEYA_WORK* work, int index1, int index2 );

// 成長経験値を増やす
void SODATEYA_WORK_AddGrowUpExp( SODATEYA_WORK* work, u32 exp );


//===========================================================================================
// ■ セーブデータ登録関数
//===========================================================================================

//-------------------------------------------------------------------------------------------
/**
 * @brief	育て屋ワークのサイズ取得
 *
 * @return 育て屋ワークのサイズ
 */
//-------------------------------------------------------------------------------------------
u32 SODATEYA_WORK_GetWorkSize(void);

//-------------------------------------------------------------------------------------------
/**
 * @brief	育て屋ワークの初期化
 *
 * @param	work 初期化するワーク
 */
//-------------------------------------------------------------------------------------------
void SODATEYA_WORK_InitWork( void* work );

//-------------------------------------------------------------------------------------------
/**
 * @brief ワークへのポインタを取得する
 *
 * @param scw セーブデータ保持ワークへのポインタ
 *
 * @return 育て屋ワークへのポインタ
 */
//-------------------------------------------------------------------------------------------
SODATEYA_WORK* SODATEYA_WORK_GetSodateyaWork( SAVE_CONTROL_WORK* scw );
