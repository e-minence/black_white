====================================================================
====================================================================
====================================================================
  ポケットモンスター金銀プログラムソースコーディング規約

2008/03/03 初版作成
岩澤幸・斉藤望・森昭人
====================================================================
====================================================================
====================================================================


＝＝＝＝ファイル＝＝＝＝
・ファイル名の長さは24文字＋拡張子とする。

・アルファベット小文字+_＋数字で名前を付ける。記号の使用は禁止する。
　
・拡張子は.h.c.s.datに統一する。
　define定義は出来るだけ.hに入れること(ctagsの検索対象にするため)

・.hには実データを入れてはいけない。

・.datファイルは実データのみでコードを入れてはいけない。
　ソースと別ディレクトリに配置する。

＝＝＝＝ファイル構成＝＝＝＝
基本的に以下の構成に倣うこと

・dotCファイル構成

ソース内での定義順は以下の順番で記述するようにする
①doxygen用ヘッダー定義
②必要なインクルドファイル
③define 定義とenum
④構造体定義
⑤static 関数前方宣言
⑥外部公開関数群
⑦static関数群

Cファイル内の関数群は、外部公開関数をまずまとめて書き、
その後ろにstatic 関数群を書くようにする。
そのファイル内のstatic関数は必ず前方宣言する。

モジュールの外部公開関数を明確にするため、
doxygen用ヘッダー定義にモジュール名を書くようにする

/**
 *	@file	pgear_act.c
 *	@brief	ポケギア　アクター制御
 *	@author	Miyuki Iwasawa
 *	@date	07.06.28
 *	
 *	モジュール名：PGear
 */

・dotHファイル構成

①ヘッダ
	/**
		@file
		@brief
	*/

②2重インクルード防止定義
	#ifndef XXXX_XXXX
	#define XXXX_XXXX

③関数extern宣言

④2重インクルード防止定義終了タグ
	#endif	//XXXX_XXXX


＝＝＝＝命名規則＝＝＝＝
☆グローバル関数名＆ローカル関数名

・グローバル関数名
　モジュール名＋＿＋動詞（＋目的語etc.）で定義する。
	（例）

　最初の一文字は大文字で以後は 小文字+_ 単語頭ごとにキャピタライズ。数字使用可。
　グローバル関数には基本的にモジュール名(系統名)を示すプレフィックスが付く。
　＊グローバル関数のプレフィックスは .c のヘッダ部にコメントとして明示すること

・ローカル関数名
　基本は自由。小文字始まり可。
　ただし、グローバル関数のプレフィックスとは区別が付くようにすること


	(ポケギアの・・・)
	PGear_Get～
	PGear_Set～

	(セルアクター系の・・・)
	CellAct_～

	/**
		@file	pmtel_book.c
		@brief	電話システム　電話帳データマネージャ
		
		グローバル
		PMTel_
	*/

	//これはグローバル
	void PMTel_AllocDataAll(){
		・・・
	}

	//こっちはローカル
	static void pmtel_sub_clear(){

	}

	//同じくローカル。
	//大文字で始めていいけど、グローバル関数のプレフィックスとはかぶらないように
	static void PMTelSub_()

	（例）
	static u16 GetNowWetherStatus(void);
	static u16 pgframe_CursorMvRelease(PGEAR_SYS_WORK* wk);

☆長さについて
　制限はないが、レイアウトの横幅100の制限を考慮する。

☆グローバル変数について
　基本的に禁止。使用する場合は同じ命名規則に従う。

☆変数名について

・オート変数命名規則
　小文字＋アンダーバー＋数字で命名する。

　（例）
	u8 count_item_max;

・グローバル変数の命名規則
　大文字で始まり、以降 小文字+_ 。数字可。単語ごとにキャピタライズ
　＊スコープがstaticかどうかは区別しない

　（例）u16 LasterBuffer[];
　		static u16 ZoneDataTable[];

・構造体のメンバ変数命名規則
　基本自由


☆マクロ定義
・マクロは大文字＋アンダーバー＋数字で命名する。
	（例）
	#define	NELEMS(array)	(sizeof(array)/sizeof((array)[0]))

☆構造体
・構造体はマクロと同じ命名規則でおこなう。
　つまり、大文字、アンダーバー、数字で命名する。
　typedef struct {（略）}POKEMON_PARAM;

・構造体メンバ名は、自由に命名してもよい。

☆モジュールの外部公開関数
　モジュールでしか使用しない名前と、通常のグローバルで使用する名前を区別するため、
　モジュール名＋アンダーバー＋通常の関数／変数名という形式で命名する。
　（例）
　BoxSel_InitWindow
　BoxSel_QuitWindow

☆通常のグローバル関数（外部公開関数）
最初の一文字は大文字で以後は小文字、単語頭ごとにキャピタライズ。
数字は使用してもよい。
	（例）
	static u16 GetNowWetherStatus(void);





＝＝＝＝レイアウト・記法＝＝＝＝
・横幅は100文字で統一する。これ以上長くなる場合は行の途中で折り返すこと。

・タブ幅は４タブで統一する。

・条件文に続く中括弧の開始位置は同一行に配置する。
　（例）
	if (condition) {
	}

	for (i=0; i<ITEM_MAX; i++) {
	}

・switch caseの頭はそろえる
　（例）
	switch (n) {
	case 0:
		func1();
		break;
	case 1:
		func2();
		break;
	default:
		func_other();
		break;
	}

・行が長くなる場合の折り返し位置の頭は自由に配置してよい。
　見易さに配慮する。
　（例）
	if ((condition == STAT_GREEN) ||	(condition == STAT_BLUE) ||
			(condition == STAT_YELLOW)) {
		func_normal();
	}
	と
	if ((condition == STAT_GREEN) ||
		(condition == STAT_BLUE) ||
		(condition == STAT_YELLOW)) {
		func_normal();
	}
	のどちらでもかまわない

・複数の条件判定を記述する場合、対応する()をきちんとつけて、
　処理や結合の優先順位を明示すること

	//こう書くより
	if( !flag && i < max){}

	//()をつけてわかりやすく
	if((!flag) && (i < max)){}


・制御文は一行でもかならず{}をつける。本文がなくてもつける。
　→ほかのひとが見落とす可能性があるため
　（例）
	if (flag)
		return;				//×だめ

	if (flag) {
		return;				//これはＯＫ
	}

	if (flag) { return; }	//○これでもよい

	（例）
	for (p = freep; p != NULL; p++) {}	//無理矢理本文をつける！


・マルチステートメントは原則禁止する。
　変数宣言は見易さを損なわない程度ならば、一行で複数宣言をしてもよい。
　（例）
	int i,j;
	
・値を定義する場合はかならず（）で囲む。
　（例）
	#define	POKEMON_TEMOTI_MAX	6		//×だめ
	#define	POKEMON_TEMOTI_MAX	(6)		//○これでよい

＝＝＝＝コメント＝＝＝＝
・ドキュメント生成ツール（doxygen）を併用するので、そのルールに従う。

・関数の説明をおこなうコメントヘッダは.hではなく.cに追加する。

・ライブラリ関数などは.hにもコメントを書く。

・コンバータなどから自動生成されるファイルの場合は、人間が書いたものと
　区別できるようにコメントを入れる。

・#if～#endif などの構文で、#elseや#endifが何と対になっているかコメントで明示する

	#ifdef PM_DEBUG
		・・・
	#else	//ifdef PM_DEBUG
		・・・
	#endif	//ifdef PM_DEBUG


＝＝＝＝C言語仕様への制限＝＝＝＝
・関数内ローカル変数は32バイト程度まで。それ以上はグローバルかメモリ確保して使用する。

・関数は縦80行程度におさめること。（むやみに長い関数は最適化が効かない）

・register宣言は使用しない（最適化の妨げになることが多いため）

・再起呼び出しは禁止（スタック消費が見積もれないため）

・無限ループ禁止。必ず脱出条件で抜けることを確認しておくこと。
	
・constをなるべくつかう。キャストで解決しない。
　（例）
	下記のように宣言されている関数とロムデータがある場合、
	void sample_copy(u8 * from, u8 * to);
	const u8 sample_data[];

	sample_copy(sample_data,UserWork);
	→警告が出る。
	『passing arg 1 of 'sample_copy' from incompatible pointer type』
	sample_copy((u8 *)sample_data, UserWork)のようにしてごまかしがち

	void sample_copy(const u8 * from, u8 * to);
	とすれば警告は出なくなる。また、パラメータの入れ替えなどのケアレスミスを発見しやすい。

・条件文内での代入はなるべく避ける。
　（例）
	if ((ret = GetEnemyStatus()) == 0) {
	}
	↓
	ret = GetEnemyStatus();
	if (ret == 0) {
	}

・ローカル変数の使い回しはなるべく避ける。一変数一役割。

・関数中である場所でしか使用しないテンポラリ用のオート変数は{}で括って、
　使う場所でだけ定義する
	for(i = 0;i < PMTEL_NUMBER_MAX;i++){
		PMTEL_NUMBER_ID	tmp;
		tmp = PMTel_GetTelNumberFromTrID(...);
	}

・extern宣言を*.cファイルには書かない。必ず*.hファイルに書いてから*.cにインクルードする。

・関数宣言での引数は型だけではなく引数名もかならず書く。


※上記に関してどうしてもルールからはずれるという場合は必ずコメントを追加し、
　ＦＣの指定会議室に例外処理の内容・場所・理由をアップする。


＝＝＝＝気をつけること＝＝＝＝

・0or1で判定する引数や返り値の型を積極的にBOOLにし、
　マジックナンバーではなくTRUE/FALSEの定義を用いて記述するようにする

・不必要なreturnを定義しない（不要になったら、戻り値を返さない関数型にできるだけ修正する）

・不要になった処理はコメントとして残しっぱなしにせずに積極的に消去する

・warningもきちんと解消する

・引数としてとる値に候補がある場合、候補値をdefine定義しておき、それをコメントで明示する。
　enumやtypedefで値の範囲、候補を明示するのがベスト

	//enumで型を定義してしまう
	typedef enum{
		TEL_TALK_MODE_NORMAL,
		TEL_TALK_MODE_REVENGE,
		TEL_TALK_MODE_ITEM
	}PMTEL_TALK_MODE;

	void PMTel_GetTelNumberFromTrID(PMTEL_TALK_MODE number,...){
		・・・
	}

	//もしくはコメント内にしっかり書く
	/**
		@param	mode	TEL_TALK_MODE_xxxx(pmtel_talk.hに定義)
		＊定義されているヘッダ名やヘッダの場所、ヘッダ内のどれが候補なのか伝わるように！
		　「○○.hに定義」としか書いていないと、ヘッダ中のどれがそうなのかわかりずらい
	*/
	void PMTelSub_SetTalkData(u8 mode,..){
		switch(mode){
		case TEL_TALK_MODE_NORMAL:
			break;
		case TEL_TALK_MODE_REVENGE:
			break;
		case TEL_TALK_MODE_ITEM:
			break;
		}
	}

	//0,1,2,とかマジックナンバー記述するとわかりずらい
	void PMTelSub_SetTalkData(u8 mode){
		switch(mode){
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		}
	}

・GF_ASSERT()を記述するときは、単にGF_ASSERT(0)などとせずに
　引っかかったときに、何が？何で？、引っかかったかわかるようなメッセージを
　出力するように心がける

	//これだけでもプログラマがソースを見にいけばわかるけれど
	GF_ASSERT(0)	

	//一言コメントがあったほうが分り易い
	//(プログラマ以外が問い合わせやすいし、プログラマも場所と症状の特定が早い)
	// コメントを一緒に入れるとwarningが出るのでGF_ASSERT_MSGで。
	GF_ASSERT_MSG(0 , "地形モデルの圧縮データが領域を超えた");

	↑この場合だと、ファイル名まで出力されるとわかりやすい
	>地形圧縮データが領域を超えた->m_dun1000_00_00.imd
	>GF_ASSERT(0)


・変数を定義する時に、適切な(必要な)サイズで定義するように心がける

たとえば、構造体型を定義するとき、構造体サイズはデフォルトで4byte区切りがかかるので
ホントはu8で十分な変数を、構造体自体のサイズが変わらないために、u16で定義したりすることがある

struct{
 u8	id;
 u8 type;
 u16 number;	//<値としてはu8で十分でも、パディングのためにu16でいいや、とすることがある
};
//これを
struct{
 u8	id;
 u8 type;
 u8 number;	//<u8で十分ならu8で定義して
 u8	pad;	//パディング用の変数名を定義して空き領域として示しておくと、後から拡張したい場合に使いやすい、かも
			//DP→金銀などのように、ソースが継承される場合には有効
};


＝＝＝＝SVNでの指針＝＝＝＝
・意味のあるコメントを必ず書く。
　『更新』とか『//』だけとかでなく、更新内容を書く。

・無関係なソースを一緒にコミットしない。
　（例）
	evobj.hとfntequ.hとserver.cを一緒にコミットするようなことは禁止

・関係のある更新内容のファイルは一緒にコミットする。
　（例）
	表示可能な文字を増やしたときに、fntequ.hとprint.cを一緒にコミットする。


