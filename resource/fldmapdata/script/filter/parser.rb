#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "sp4.y".
#

require 'racc/parser'


#
#	ポケモン用スクリプトコンパイラ
#


module PmScript

  class Parser < Racc::Parser

module_eval <<'..end sp4.y modeval..id46a2a3a28b', 'sp4.y', 539

def initialize
end

#予約語定義
RESERVED = {
	'IF'	=> :IF,
	'THEN'	=> :THEN,
	'ELSE'	=> :ELSE,
	'ELSIF'	=> :ELSIF,
	'ENDIF'	=> :ENDIF,
	'DEFVAR'	=> :DEFVAR,
	'DEFFUNC'	=> :DEFFUNC,
	'FLAG_ON'	=> :FLAG_ON,
	'FLAG_OFF'	=> :FLAG_OFF,
  'EVENT_START' => :EVENT_START,
  'EVENT_END' => :EVENT_END,
  'SWITCH' => :SWITCH,
  'CASE' => :CASE,
  'ENDSWITCH' => :ENDSWITCH,
  'WHILE' => :WHILE,
  'ENDWHILE' => :ENDWHILE,
  'DEFINE_LOCAL' => :DEFINE_LOCAL,
};

#予約型定義
RESERVED_TYPE = {
	'LWORK'	=> :LWORK,
	'LABEL' => :LABEL_TYPE,
};

def parse( f )
	@q = []
	@nowlineno = 1
	@incomment = false
	f.each do |line_org|
		line = line_org.strip
		until line.empty? do
			if @incomment == true then
				if line =~ /.*\*\// then
					@incomment = false
					pushq [ :COMMENT, $&]
					line = $'
				else
					pushq [ :COMMENT, line]
					line = ""
				end
			else
				case line
				when /\A\s+/
					;
				when /\A\/\/.*$/
          #Ｃ＋＋形式コメント定義
					pushq [ :COMMENT, $& ]

				when /^\s*$/, /\A\#.*/
          #アセンブラコメント定義
					pushq [ :COMMENT, $&]

				when /\A\/\*.*\*\//
          #Ｃ形式コメント定義
					pushq [ :COMMENT, $&]

				when /\A\.[a-zA-Z_]+.*$/
          #アセンブラマクロ定義
					pushq [ :MACRO, $& ]

				when /\A[a-zA-Z_][a-zA-Z0-9_]*:/
          #アセンブララベル定義
					pushq [ :LABEL, $& ]

				when /\A_[A-Z0-9][a-zA-Z0-9_]*/
          #スクリプトコマンド定義（＿で開始する）
					pushq [ :COMMAND, $& ]

				when /\A0x[0-9a-fA-F]+/, /\A\d+/
          #数値定義（0xで始まる１６進数、あるいは１０進数）
					pushq [ :NUMBER, $& ]

				when /\A\$[a-zA-Z][a-zA-Z0-9_]*/
          #変数定義（＄で始まる）
					pushq [ :VARREF, $& ]

				when /\A[a-zA-Z_][a-zA-Z0-9_]*/
          #識別子定義あるいは型定義
					if RESERVED.has_key? $& then
						pushq [ RESERVED[$&], $&.intern ]
					elsif RESERVED_TYPE.has_key? $& then
						pushq [ :TYPE, $&.intern ]
					else
						pushq [ :IDENT, $& ]
					end

				when /\A\\[a-zA-Z_][a-zA-Z0-9_]*/
          # \から始まる識別子はアセンブラマクロパラメータ
					pushq [ :MACPARAM, $& ]

				when /\A==/,/\A!=/,/\A\<=/,/\A\>=/,/\A>/,/\A</,/\A\&\&/,/\A\|\|/
          # 比較演算子
					pushq [ $&, $& ]

				when /\A\/\*.*/
          #C形式コメント開始
					pushq [ :COMMENT, $& ]
					@incomment = true

				when /\A[\+\-\*\/=(){},]/
          #演算子、カッコなどの記号
					pushq [ $&, $& ]
				else
					raise RuntimeError, "#{@fname}:#{@nowlineno}: fatal error! \{#{line_org}\}"
				end
				line = $'
				printf( "\#NOW LINE(%4d) #{line}\n", @nowlineno)
			end
		end
		pushq [ :EOL, nil ]
		@nowlineno += 1
	end
	pushq [ false, nil ]
	
	@yydebug = true
	do_parse
end

def next_token
	value = @q.shift
	@lineno = value.last
	value.delete_at(2)
	value
end

def pushq value
	value << @nowlineno
	@q.push value
end


def on_error( t, v, values )
    if v then
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@fname}:#{@lineno}: syntax error on #{v.inspect}"
  end


..end sp4.y modeval..id46a2a3a28b

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 48, :_reduce_1,
 0, 49, :_reduce_2,
 3, 49, :_reduce_3,
 2, 49, :_reduce_4,
 2, 49, :_reduce_none,
 4, 49, :_reduce_6,
 3, 49, :_reduce_7,
 4, 49, :_reduce_8,
 0, 53, :_reduce_9,
 2, 53, :_reduce_none,
 3, 53, :_reduce_none,
 3, 53, :_reduce_12,
 4, 53, :_reduce_13,
 8, 55, :_reduce_14,
 7, 55, :_reduce_15,
 1, 56, :_reduce_16,
 3, 56, :_reduce_17,
 4, 51, :_reduce_18,
 1, 51, :_reduce_none,
 2, 57, :_reduce_none,
 3, 57, :_reduce_none,
 2, 58, :_reduce_none,
 3, 58, :_reduce_none,
 1, 50, :_reduce_24,
 1, 50, :_reduce_25,
 1, 50, :_reduce_26,
 1, 50, :_reduce_27,
 1, 50, :_reduce_none,
 1, 50, :_reduce_none,
 1, 50, :_reduce_none,
 1, 50, :_reduce_none,
 1, 50, :_reduce_none,
 1, 50, :_reduce_none,
 3, 62, :_reduce_34,
 4, 62, :_reduce_35,
 6, 62, :_reduce_36,
 5, 62, :_reduce_37,
 1, 52, :_reduce_38,
 2, 52, :_reduce_39,
 6, 60, :_reduce_40,
 0, 67, :_reduce_41,
 2, 67, :_reduce_42,
 5, 67, :_reduce_43,
 3, 66, :_reduce_44,
 3, 66, :_reduce_45,
 4, 66, :_reduce_46,
 4, 66, :_reduce_47,
 4, 66, :_reduce_48,
 4, 66, :_reduce_49,
 3, 66, :_reduce_50,
 3, 66, :_reduce_51,
 1, 68, :_reduce_52,
 1, 68, :_reduce_53,
 1, 68, :_reduce_54,
 1, 68, :_reduce_55,
 1, 68, :_reduce_56,
 1, 68, :_reduce_57,
 1, 68, :_reduce_58,
 1, 68, :_reduce_59,
 5, 64, :_reduce_60,
 5, 63, :_reduce_61,
 0, 70, :_reduce_62,
 1, 70, :_reduce_63,
 2, 70, :_reduce_64,
 4, 71, :_reduce_65,
 3, 61, :_reduce_66,
 3, 61, :_reduce_67,
 3, 61, :_reduce_68,
 2, 59, :_reduce_69,
 4, 59, :_reduce_70,
 3, 59, :_reduce_71,
 2, 59, :_reduce_72,
 1, 59, :_reduce_73,
 2, 54, :_reduce_74,
 1, 69, :_reduce_none,
 3, 69, :_reduce_76,
 3, 69, :_reduce_77,
 3, 69, :_reduce_78,
 3, 69, :_reduce_79,
 3, 69, :_reduce_80,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 65, :_reduce_86,
 3, 65, :_reduce_87 ]

racc_reduce_n = 88

racc_shift_n = 165

racc_action_table = [
    11,    14,    94,    18,   107,   133,    27,   108,     5,   135,
     7,    10,    12,    57,    17,    21,    58,   134,   145,   143,
    97,    62,     9,    99,    15,   136,    33,    58,    26,    29,
     4,    11,    14,    89,    18,    17,   126,    27,    88,     5,
    17,     7,    10,    12,    98,    17,    21,    58,    41,    42,
    39,     4,    40,     9,   149,    15,   150,   102,   128,    26,
    29,     4,    11,    14,   125,    18,    37,    38,    27,   122,
     5,    58,     7,    10,    12,   103,    17,    21,    80,    81,
    82,    83,    44,    85,     9,    48,    15,    53,   131,    17,
    26,    29,     4,    11,    14,   118,    18,    52,   129,    27,
    88,     5,    58,     7,    10,    12,    54,    17,    21,   152,
    41,    42,    17,    44,    85,     9,   113,    15,   141,   125,
    17,    26,    29,     4,    11,    14,   148,    18,    80,    81,
    27,    61,     5,   100,     7,    10,    12,    51,    17,    21,
    58,    41,    42,    44,    85,    58,     9,   120,    15,    88,
    14,    59,    26,    29,     4,    11,    14,     5,    18,   109,
    60,    27,   110,     5,   151,     7,    10,    12,    76,    17,
    21,    41,    42,    14,    44,    85,    17,     9,   132,    15,
     5,    80,    81,    26,    29,     4,    11,    14,   156,    18,
    88,   154,    27,    77,     5,   157,     7,    10,    12,   158,
    17,    21,    41,    42,   145,   143,    44,    47,     9,    48,
    15,    44,    85,    88,    26,    29,     4,    44,    85,    86,
    48,    44,    85,   146,    48,    44,    85,    92,    48,    44,
    85,    44,    85,    90,    41,    42,   138,   139,    32,    41,
    42,    44,    85,    91,    48,    41,    42,    31,     3,    41,
    42,   nil,   nil,    41,    42,   nil,   nil,    41,    42,    41,
    42,    71,    72,    73,    74,    75,    66,    67,    68,    41,
    42,    71,    72,    73,    74,    75,    66,    67,    68,   nil,
    39,   nil,    40,   nil,    39,    95,    40,    39,   nil,    40,
    80,    81,    82,    83,   nil,   161,    37,    38,   nil,   nil,
    37,    38,   nil,    37,    38,   nil,    39,   118,    40,   nil,
   nil,    71,    72,    73,    74,    75,    66,    67,    68,   nil,
   nil,   nil,    37,    38,   111,    71,    72,    73,    74,    75,
    66,    67,    68,    70,    71,    72,    73,    74,    75,    66,
    67,    68,    71,    72,    73,    74,    75,    66,    67,    68,
    80,    81,    82,    83,    80,    81,    82,    83 ]

racc_action_check = [
   163,   163,    55,   163,    76,   107,   163,    76,   163,   109,
   163,   163,   163,    25,   163,   163,    55,   108,   163,   163,
    60,    35,   163,    60,   163,   110,     5,    25,   163,   163,
   163,     2,     2,    50,     2,    35,    93,     2,    93,     2,
     5,     2,     2,     2,    60,     2,     2,    50,    60,    60,
    69,    35,    69,     2,   137,     2,   137,    64,    97,     2,
     2,     2,   160,   160,    91,   160,    69,    69,   160,    90,
   160,    64,   160,   160,   160,    65,   160,   160,   119,   119,
   119,   119,   125,   125,   160,   125,   160,    18,   104,    65,
   160,   160,   160,   155,   155,   119,   155,    15,   100,   155,
   142,   155,   104,   155,   155,   155,    20,   155,   155,   142,
   125,   125,   100,    79,    79,   155,    79,   155,   123,   123,
    20,   155,   155,   155,    63,    63,   130,    63,   117,   117,
    63,    34,    63,    63,    63,    63,    63,    14,    63,    63,
   130,    79,    79,    80,    80,    34,    63,    87,    63,    87,
   157,    26,    63,    63,    63,   106,   106,   157,   106,    77,
    27,   106,    77,   106,   138,   106,   106,   106,    37,   106,
   106,    80,    80,   151,    81,    81,    11,   106,   106,   106,
   151,   116,   116,   106,   106,   106,   127,   127,   147,   127,
   147,   144,   127,    38,   127,   149,   127,   127,   127,   150,
   127,   127,    81,    81,   127,   127,    10,    10,   127,    10,
   127,    85,    85,    49,   127,   127,   127,    47,    47,    47,
    47,   128,   128,   128,   128,    53,    53,    53,    53,    83,
    83,    82,    82,    51,    10,    10,   122,   122,     4,    85,
    85,    88,    88,    52,    88,    47,    47,     3,     1,   128,
   128,   nil,   nil,    53,    53,   nil,   nil,    83,    83,    82,
    82,    56,    56,    56,    56,    56,    56,    56,    56,    88,
    88,   153,   153,   153,   153,   153,   153,   153,   153,   nil,
   143,   nil,   143,   nil,     9,    56,     9,    21,   nil,    21,
    84,    84,    84,    84,   nil,   153,   143,   143,   nil,   nil,
     9,     9,   nil,    21,    21,   nil,    39,    84,    39,   nil,
   nil,    78,    78,    78,    78,    78,    78,    78,    78,   nil,
   nil,   nil,    39,    39,    78,    36,    36,    36,    36,    36,
    36,    36,    36,    36,    40,    40,    40,    40,    40,    40,
    40,    40,   105,   105,   105,   105,   105,   105,   105,   105,
    43,    43,    43,    43,   112,   112,   112,   112 ]

racc_action_pointer = [
   nil,   248,    17,   247,   221,    12,   nil,   nil,   nil,   266,
   189,   148,   nil,   nil,   121,    77,   nil,   nil,    69,   nil,
    92,   269,   nil,   nil,   nil,    -1,   134,   133,   nil,   nil,
   nil,   nil,   nil,   nil,   117,     7,   319,   150,   175,   288,
   328,   nil,   nil,   348,   nil,   nil,   nil,   200,   nil,   192,
    19,   216,   229,   208,   nil,   -12,   255,   nil,   nil,   nil,
     3,   nil,   nil,   110,    43,    61,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   -13,   142,   305,    96,
   126,   157,   214,   212,   288,   194,   nil,   128,   224,   nil,
    51,    24,   nil,    17,   nil,   nil,   nil,    40,   nil,   nil,
    84,   nil,   nil,   nil,    74,   336,   141,   -14,    -2,   -10,
     6,   nil,   352,   nil,   nil,   nil,   179,   126,   nil,    76,
   nil,   nil,   217,    79,   nil,    65,   nil,   172,   204,   nil,
   112,   nil,   nil,   nil,   nil,   nil,   nil,    35,   150,   nil,
   nil,   nil,    79,   262,   160,   nil,   nil,   169,   nil,   181,
   179,   158,   nil,   265,   nil,    79,   nil,   135,   nil,   nil,
    48,   nil,   nil,   -14,   nil ]

racc_action_default = [
    -2,   -88,    -1,   -88,   -88,   -88,   -19,   -24,    -9,   -88,
   -25,    -5,   -27,   -26,   -88,   -88,   -28,   -38,   -88,   -29,
   -88,   -88,   -30,    -4,   -31,   -88,   -88,   -88,   -32,   -73,
   -33,   165,   -74,   -20,   -88,    -2,   -88,   -88,   -88,   -88,
   -88,   -81,   -83,   -84,   -82,   -75,   -86,   -88,   -85,   -69,
   -88,   -88,   -88,   -88,    -3,   -88,   -88,    -7,   -39,   -72,
   -88,   -21,   -10,   -88,   -88,   -88,   -56,   -58,   -59,   -88,
    -2,   -52,   -53,   -55,   -54,   -57,   -88,   -88,   -88,   -88,
   -88,   -88,   -88,   -88,   -84,   -88,   -71,   -88,   -88,    -8,
   -88,   -62,   -34,   -88,    -6,    -2,   -67,   -82,   -68,   -66,
   -88,   -18,   -11,   -12,   -88,   -51,   -88,   -88,   -88,   -88,
   -88,   -50,   -44,   -45,   -78,   -79,   -77,   -76,   -80,   -88,
   -70,   -87,   -88,   -88,   -63,   -88,   -35,   -41,   -88,   -22,
   -88,   -13,   -60,   -46,   -47,   -48,   -49,   -88,   -88,   -16,
   -64,   -61,   -88,   -88,   -88,    -2,   -37,   -88,   -23,   -88,
   -88,   -88,    -2,   -88,   -40,   -42,   -36,   -88,   -17,   -15,
   -65,    -2,   -14,   -41,   -43 ]

racc_goto_table = [
     2,    36,    49,    34,   124,     1,   159,   101,    84,    50,
   137,   144,   162,    56,    79,    65,   123,    35,    55,    96,
   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    78,   nil,    64,   nil,    63,   140,   nil,   nil,    87,
   112,   114,   115,   116,   117,    93,   119,   164,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   105,   nil,   104,   nil,   nil,   nil,   nil,   nil,   nil,
   106,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   127,   nil,   nil,   130,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   142,   nil,   nil,
   147,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   155,   nil,   nil,   nil,   nil,
   nil,   nil,   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   163 ]

racc_goto_check = [
     2,    19,    18,     5,    24,     1,     4,    11,    22,     5,
     9,    20,     4,    19,    21,     7,    23,     6,     5,    25,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,     5,   nil,     2,    24,   nil,   nil,    18,
    22,    22,    22,    22,    22,    18,    22,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2 ]

racc_goto_pointer = [
   nil,     5,     0,   nil,  -145,    -2,     9,   -20,   nil,  -112,
   nil,   -56,   nil,   nil,   nil,   nil,   nil,   nil,    -8,    -8,
  -116,   -26,   -39,   -75,   -87,   -41,   -68 ]

racc_goto_default = [
   nil,   nil,   nil,    20,    23,    25,   nil,    30,     6,   nil,
     8,   nil,    13,    16,    19,    22,    24,    28,   nil,   nil,
   nil,    69,    43,   nil,   nil,    45,    46 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 "/" => 2,
 "*" => 3,
 "-" => 4,
 "+" => 5,
 "==" => 6,
 "!=" => 7,
 "<" => 8,
 ">" => 9,
 "<=" => 10,
 ">=" => 11,
 "&&" => 12,
 "||" => 13,
 :EOL => 14,
 :DEFFUNC => 15,
 :TYPE => 16,
 :IDENT => 17,
 "(" => 18,
 ")" => 19,
 :VARREF => 20,
 "," => 21,
 "{" => 22,
 "}" => 23,
 :LABEL => 24,
 :COMMAND => 25,
 :MACRO => 26,
 "=" => 27,
 :COMMENT => 28,
 :IF => 29,
 :THEN => 30,
 :ENDIF => 31,
 :ELSE => 32,
 :ELSIF => 33,
 :FLAG_ON => 34,
 :FLAG_OFF => 35,
 :WHILE => 36,
 :ENDWHILE => 37,
 :SWITCH => 38,
 :ENDSWITCH => 39,
 :CASE => 40,
 :funcall => 41,
 :EVENT_START => 42,
 :EVENT_END => 43,
 :DEFINE_LOCAL => 44,
 :NUMBER => 45,
 :MACPARAM => 46 }

racc_use_result_var = true

racc_nt_base = 47

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'"/"',
'"*"',
'"-"',
'"+"',
'"=="',
'"!="',
'"<"',
'">"',
'"<="',
'">="',
'"&&"',
'"||"',
'EOL',
'DEFFUNC',
'TYPE',
'IDENT',
'"("',
'")"',
'VARREF',
'","',
'"{"',
'"}"',
'LABEL',
'COMMAND',
'MACRO',
'"="',
'COMMENT',
'IF',
'THEN',
'ENDIF',
'ELSE',
'ELSIF',
'FLAG_ON',
'FLAG_OFF',
'WHILE',
'ENDWHILE',
'SWITCH',
'ENDSWITCH',
'CASE',
'funcall',
'EVENT_START',
'EVENT_END',
'DEFINE_LOCAL',
'NUMBER',
'MACPARAM',
'$start',
'program',
'stmt_list',
'stmt',
'stmt_block',
'comments',
'def_local_list',
'def_local',
'def_func',
'param',
'block_start',
'block_end',
'cmd',
'if_stmt',
'assign',
'callfunc',
'switch_stmt',
'while_stmt',
'args',
'cmp_expr',
'else_stmt',
'cmp_ident',
'expr',
'case_stmt_list',
'case_stmt',
'primary',
'arg']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'sp4.y', 45
  def _reduce_1( val, _values, result )
						result = RootNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 60
  def _reduce_2( val, _values, result )
						result = []
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 64
  def _reduce_3( val, _values, result )
						result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 68
  def _reduce_4( val, _values, result )
						result.push val[1]
   result
  end
.,.,

 # reduce 5 omitted

module_eval <<'.,.,', 'sp4.y', 74
  def _reduce_6( val, _values, result )
						result.push val[1]
						#result.push RawNode.new(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 78
  def _reduce_7( val, _values, result )
						#result.push RawNode.new(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 82
  def _reduce_8( val, _values, result )
						#result.push RawNode.new(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 94
  def _reduce_9( val, _values, result )
            result = []
   result
  end
.,.,

 # reduce 10 omitted

 # reduce 11 omitted

module_eval <<'.,.,', 'sp4.y', 100
  def _reduce_12( val, _values, result )
            result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 104
  def _reduce_13( val, _values, result )
            result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 113
  def _reduce_14( val, _values, result )
						result = DefFuncNode.new( val[1], val[2], val[4], val[7] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 117
  def _reduce_15( val, _values, result )
						result = DefFuncNode.new( val[1], val[2], nil, val[6] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 127
  def _reduce_16( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 131
  def _reduce_17( val, _values, result )
						result.push val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 141
  def _reduce_18( val, _values, result )
						result = BlockNode.new(val[1], val[2])
   result
  end
.,.,

 # reduce 19 omitted

 # reduce 20 omitted

 # reduce 21 omitted

 # reduce 22 omitted

 # reduce 23 omitted

module_eval <<'.,.,', 'sp4.y', 173
  def _reduce_24( val, _values, result )
						result = RawNode.new(val[0]);
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 177
  def _reduce_25( val, _values, result )
						result = CmdNode.new( val, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 181
  def _reduce_26( val, _values, result )
						result = CmdNode.new( val[0].shift, val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 185
  def _reduce_27( val, _values, result )
						result = RawNode.new(val[0]);
   result
  end
.,.,

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'sp4.y', 207
  def _reduce_34( val, _values, result )
						result = CallFuncNode.new( nil, val[0], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 211
  def _reduce_35( val, _values, result )
						result = CallFuncNode.new( nil, val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 215
  def _reduce_36( val, _values, result )
						result = CallFuncNode.new( val[0], val[2], val[4] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 219
  def _reduce_37( val, _values, result )
						result = CallFuncNode.new( val[0], val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 229
  def _reduce_38( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 233
  def _reduce_39( val, _values, result )
						result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 242
  def _reduce_40( val, _values, result )
						result = IfNode.new(val[1],val[3],val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 254
  def _reduce_41( val, _values, result )
						result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 258
  def _reduce_42( val, _values, result )
						result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 262
  def _reduce_43( val, _values, result )
						result = [IfNode.new(val[1], val[3], val[4])]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 279
  def _reduce_44( val, _values, result )
            left = "_PUSH_WORK #{val[0].sub(/\A\$/,"")}"
            right = "_PUSH_VALUE #{val[2]}"
            result = CompareNode.new(val[1], left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 285
  def _reduce_45( val, _values, result )
            left = "_PUSH_WORK #{val[0].sub(/\A\$/,"")}"
            right = "_PUSH_WORK #{val[2].sub(/\A\$/,"")}"
            result = CompareNode.new(val[1], left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 291
  def _reduce_46( val, _values, result )
            left = "_PUSH_FLAG #{val[2]}"
            right = "_PUSH_VALUE TRUE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 297
  def _reduce_47( val, _values, result )
            left = "_PUSH_FLAG #{val[2].sub(/\A\$/,"")}"
            right = "_PUSH_VALUE TRUE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 303
  def _reduce_48( val, _values, result )
            left = "_PUSH_FLAG #{val[2]}"
            right = "_PUSH_VALUE FALSE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 309
  def _reduce_49( val, _values, result )
            left = "_PUSH_FLAG #{val[2].sub(/\A\$/,"")}"
            right = "_PUSH_VALUE FALSE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 313
  def _reduce_50( val, _values, result )
            result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 317
  def _reduce_51( val, _values, result )
            result = LogicalCompareNode.new(val[1], val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 326
  def _reduce_52( val, _values, result )
						result = 'CMPID_EQ'	#result = 'EQ'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 330
  def _reduce_53( val, _values, result )
						result = 'CMPID_NE'	#result = 'NE'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 334
  def _reduce_54( val, _values, result )
						result = 'CMPID_GT'	#result = 'GT'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 338
  def _reduce_55( val, _values, result )
						result = 'CMPID_LT'	#result = 'LT'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 342
  def _reduce_56( val, _values, result )
						result = 'CMPID_GT_EQ'	#result = 'GE'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 346
  def _reduce_57( val, _values, result )
						result = 'CMPID_LT_EQ'	#result = 'LE'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 350
  def _reduce_58( val, _values, result )
            result = 'CMPID_AND'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 354
  def _reduce_59( val, _values, result )
            result = 'CMPID_OR'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 364
  def _reduce_60( val, _values, result )
            result = WhileNode.new(val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 373
  def _reduce_61( val, _values, result )
            result = SwitchNode.new(val[1].sub(/\A\$/,""), val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 384
  def _reduce_62( val, _values, result )
            result = []
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 388
  def _reduce_63( val, _values, result )
            result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 392
  def _reduce_64( val, _values, result )
            result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 401
  def _reduce_65( val, _values, result )
            result = CaseNode.new(val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 413
  def _reduce_66( val, _values, result )
						result = AssignNode.new(val[0], val[2], :VARREF)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 417
  def _reduce_67( val, _values, result )
						result = AssignNode.new(val[0], val[2], nil)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 421
  def _reduce_68( val, _values, result )
						result = AssignNode.new(val[0], val[2], funcall)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 430
  def _reduce_69( val, _values, result )
						result = [val[0],val[1]]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 434
  def _reduce_70( val, _values, result )
						result = [val[0], ['('] + val[2] + [')'] ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 438
  def _reduce_71( val, _values, result )
            result = [ val[0], "()" ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 442
  def _reduce_72( val, _values, result )
						result = [val[0],val[1]]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 446
  def _reduce_73( val, _values, result )
            result = [ val[0], nil ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 455
  def _reduce_74( val, _values, result )
            result = DefLocalVarNode.new( val[1] )
   result
  end
.,.,

 # reduce 75 omitted

module_eval <<'.,.,', 'sp4.y', 469
  def _reduce_76( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 473
  def _reduce_77( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 477
  def _reduce_78( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 481
  def _reduce_79( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 485
  def _reduce_80( val, _values, result )
						result = val
   result
  end
.,.,

 # reduce 81 omitted

 # reduce 82 omitted

 # reduce 83 omitted

 # reduce 84 omitted

 # reduce 85 omitted

module_eval <<'.,.,', 'sp4.y', 514
  def _reduce_86( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 519
  def _reduce_87( val, _values, result )
						result.push val[1]
						result.push val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

  end   # class Parser

end   # module PmScript
