#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "sp4.y".
#

require 'racc/parser'


#
#	ポケモン用スクリプトコンパイラ
#


module PmScript

  class Parser < Racc::Parser

module_eval <<'..end sp4.y modeval..idba466263c1', 'sp4.y', 548

def initialize
end

#予約語定義
RESERVED = {
	'IF'	=> :IF,
	'THEN'	=> :THEN,
	'ELSE'	=> :ELSE,
	'ELSIF'	=> :ELSIF,
	'ENDIF'	=> :ENDIF,
	'DEFVAR'	=> :DEFVAR,
	'DEFFUNC'	=> :DEFFUNC,
	'FLAG_ON'	=> :FLAG_ON,
	'FLAG_OFF'	=> :FLAG_OFF,
  'EVENT_START' => :EVENT_START,
  'EVENT_END' => :EVENT_END,
  'SWITCH' => :SWITCH,
  'CASE' => :CASE,
  'ENDSWITCH' => :ENDSWITCH,
  'WHILE' => :WHILE,
  'ENDWHILE' => :ENDWHILE,
  'DEFINE_LOCAL' => :DEFINE_LOCAL,
  'UNDEF_LOCAL' => :UNDEF_LOCAL
};

#予約型定義
RESERVED_TYPE = {
	'LWORK'	=> :LWORK,
	'LABEL' => :LABEL_TYPE,
};

def parse( f )
	@q = []
	@nowlineno = 1
	@incomment = false
	f.each do |line_org|
		line = line_org.strip
		until line.empty? do
			if @incomment == true then
				if line =~ /.*\*\// then
					@incomment = false
					pushq [ :COMMENT, $&]
					line = $'
				else
					pushq [ :COMMENT, line]
					line = ""
				end
			else
				case line
				when /\A\s+/
					;
				when /\A\/\/.*$/
          #Ｃ＋＋形式コメント定義
					pushq [ :COMMENT, $& ]

				when /^\s*$/, /\A\#.*/
          #アセンブラコメント定義
					pushq [ :COMMENT, $&]

				when /\A\/\*.*\*\//
          #Ｃ形式コメント定義
					pushq [ :COMMENT, $&]

				when /\A\.[a-zA-Z_]+.*$/
          #アセンブラマクロ定義
					pushq [ :MACRO, $& ]

				when /\A[a-zA-Z_][a-zA-Z0-9_]*:/
          #アセンブララベル定義
					pushq [ :LABEL, $& ]

				when /\A_[A-Z0-9][a-zA-Z0-9_]*/
          #スクリプトコマンド定義（＿で開始する）
					pushq [ :COMMAND, $& ]

				when /\A0x[0-9a-fA-F]+/, /\A\d+/
          #数値定義（0xで始まる１６進数、あるいは１０進数）
					pushq [ :NUMBER, $& ]

				when /\A\$[a-zA-Z][a-zA-Z0-9_]*/
          #変数定義（＄で始まる）
					pushq [ :VARREF, $& ]

				when /\A[a-zA-Z_][a-zA-Z0-9_]*/
          #識別子定義あるいは型定義
					if RESERVED.has_key? $& then
						pushq [ RESERVED[$&], $&.intern ]
					elsif RESERVED_TYPE.has_key? $& then
						pushq [ :TYPE, $&.intern ]
					else
						pushq [ :IDENT, $& ]
					end

				when /\A\\[a-zA-Z_][a-zA-Z0-9_]*/
          # \から始まる識別子はアセンブラマクロパラメータ
					pushq [ :MACPARAM, $& ]

				when /\A==/,/\A!=/,/\A\<=/,/\A\>=/,/\A>/,/\A</,/\A\&\&/,/\A\|\|/
          # 比較演算子
					pushq [ $&, $& ]

				when /\A\/\*.*/
          #C形式コメント開始
					pushq [ :COMMENT, $& ]
					@incomment = true

				when /\A[\+\-\*\/=(){},]/
          #演算子、カッコなどの記号
					pushq [ $&, $& ]
				else
					raise RuntimeError, "#{@fname}:#{@nowlineno}: fatal error! \{#{line_org}\}"
				end
				line = $'
				printf( "\#NOW LINE(%4d) #{line}\n", @nowlineno)
			end
		end
		pushq [ :EOL, nil ]
		@nowlineno += 1
	end
	pushq [ false, nil ]
	
	@yydebug = true
	do_parse
end

def next_token
	value = @q.shift
	@lineno = value.last
	value.delete_at(2)
	value
end

def pushq value
	value << @nowlineno
	@q.push value
end


def on_error( t, v, values )
    if v then
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@fname}:#{@lineno}: syntax error on #{v.inspect}"
  end


..end sp4.y modeval..idba466263c1

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 50, :_reduce_1,
 0, 51, :_reduce_2,
 3, 51, :_reduce_3,
 2, 51, :_reduce_4,
 2, 51, :_reduce_none,
 4, 51, :_reduce_6,
 3, 51, :_reduce_7,
 4, 51, :_reduce_8,
 0, 55, :_reduce_9,
 2, 55, :_reduce_none,
 3, 55, :_reduce_11,
 3, 56, :_reduce_12,
 8, 57, :_reduce_13,
 7, 57, :_reduce_14,
 1, 58, :_reduce_15,
 3, 58, :_reduce_16,
 4, 53, :_reduce_17,
 1, 53, :_reduce_none,
 2, 59, :_reduce_none,
 3, 59, :_reduce_none,
 2, 60, :_reduce_none,
 3, 60, :_reduce_none,
 1, 52, :_reduce_23,
 1, 52, :_reduce_24,
 1, 52, :_reduce_25,
 1, 52, :_reduce_26,
 1, 52, :_reduce_none,
 1, 52, :_reduce_none,
 1, 52, :_reduce_none,
 1, 52, :_reduce_none,
 1, 52, :_reduce_none,
 1, 52, :_reduce_none,
 1, 52, :_reduce_none,
 3, 64, :_reduce_34,
 4, 64, :_reduce_35,
 6, 64, :_reduce_36,
 5, 64, :_reduce_37,
 1, 54, :_reduce_38,
 2, 54, :_reduce_39,
 6, 62, :_reduce_40,
 0, 71, :_reduce_41,
 2, 71, :_reduce_42,
 5, 71, :_reduce_43,
 3, 70, :_reduce_44,
 3, 70, :_reduce_45,
 4, 70, :_reduce_46,
 4, 70, :_reduce_47,
 4, 70, :_reduce_48,
 4, 70, :_reduce_49,
 3, 70, :_reduce_50,
 3, 70, :_reduce_51,
 1, 72, :_reduce_52,
 1, 72, :_reduce_53,
 1, 72, :_reduce_54,
 1, 72, :_reduce_55,
 1, 72, :_reduce_56,
 1, 72, :_reduce_57,
 1, 72, :_reduce_58,
 1, 72, :_reduce_59,
 5, 66, :_reduce_60,
 5, 65, :_reduce_61,
 0, 74, :_reduce_62,
 1, 74, :_reduce_63,
 2, 74, :_reduce_64,
 4, 75, :_reduce_65,
 3, 63, :_reduce_66,
 3, 63, :_reduce_67,
 3, 63, :_reduce_68,
 2, 61, :_reduce_69,
 4, 61, :_reduce_70,
 3, 61, :_reduce_71,
 2, 61, :_reduce_72,
 1, 61, :_reduce_73,
 2, 67, :_reduce_74,
 2, 68, :_reduce_75,
 1, 73, :_reduce_none,
 3, 73, :_reduce_77,
 3, 73, :_reduce_78,
 3, 73, :_reduce_79,
 3, 73, :_reduce_80,
 3, 73, :_reduce_81,
 1, 76, :_reduce_none,
 1, 76, :_reduce_none,
 1, 76, :_reduce_none,
 1, 77, :_reduce_none,
 1, 77, :_reduce_none,
 1, 69, :_reduce_87,
 3, 69, :_reduce_88 ]

racc_reduce_n = 89

racc_shift_n = 167

racc_action_table = [
    13,    67,    62,    19,    23,    80,    64,    30,    48,     8,
    87,    12,    15,    17,   151,    21,    24,    63,   103,   145,
   146,    63,   104,    14,    48,    18,    87,    95,    51,    29,
     4,     6,     9,    13,    81,    82,    19,    23,    45,    47,
    30,    48,     8,    87,    12,    15,    17,   133,    21,    24,
    81,    82,    83,    84,    45,    47,    14,    48,    18,    50,
   132,    51,    29,     4,     6,     9,    13,   131,   118,    19,
    23,    45,    47,    30,    48,     8,    87,    12,    15,    17,
   130,    21,    24,    81,    82,    83,    84,    45,    47,    14,
    48,    18,    87,   149,    51,    29,     4,     6,     9,    13,
   128,   118,    19,    23,    45,    47,    30,    48,     8,    87,
    12,    15,    17,    23,    21,    24,   134,    42,     8,    43,
    45,    47,    14,   135,    18,    65,    81,    82,    29,     4,
     6,     9,    13,    39,    40,    19,    23,    45,    47,    30,
    63,     8,   122,    12,    15,    17,   105,    21,    24,   136,
   106,    98,    48,    66,    87,    14,    48,    18,    87,    88,
    51,    29,     4,     6,     9,    13,    63,    61,    19,    23,
    58,   127,    30,    80,     8,   124,    12,    15,    17,    80,
    21,    24,    45,    47,    35,    21,    45,    47,    14,    48,
    18,    87,    60,    51,    29,     4,     6,     9,    13,    21,
   150,    19,    23,    56,   153,    30,   152,     8,    99,    12,
    15,    17,   102,    21,    24,    63,   137,   145,   146,    45,
    47,    14,    48,    18,    87,    55,    51,    29,     4,     6,
     9,    21,    48,   100,    87,   117,   111,    80,    45,    47,
    72,    74,    75,    76,    77,    68,    69,    70,    81,    82,
    83,    84,    45,    47,    72,    74,    75,    76,    77,    68,
    69,    70,    45,    47,    42,   163,    43,    42,    54,    43,
    42,    23,    43,    42,   121,    43,     8,    90,    91,    97,
    39,    40,   154,    39,    40,    21,    39,    40,   157,    39,
    40,    72,    74,    75,    76,    77,    68,    69,    70,    81,
    82,    83,    84,   140,   124,   109,    72,    74,    75,    76,
    77,    68,    69,    70,    71,    72,    74,    75,    76,    77,
    68,    69,    70,    72,    74,    75,    76,    77,    68,    69,
    70,   158,   120,    80,   143,   144,   160,   161,    93,    37,
    34,    33,    96,     3 ]

racc_action_check = [
   165,    40,    32,   165,   165,   139,    36,   165,    83,   165,
    83,   165,   165,   165,   139,   165,   165,    32,    66,   165,
   165,    36,    66,   165,    55,   165,    55,    55,    55,   165,
   165,   165,   165,     2,   115,   115,     2,     2,    83,    83,
     2,    84,     2,    84,     2,     2,     2,   105,     2,     2,
    86,    86,    86,    86,    55,    55,     2,    15,     2,    15,
   104,    15,     2,     2,     2,     2,   159,   103,    86,   159,
   159,    84,    84,   159,    87,   159,    87,   159,   159,   159,
    99,   159,   159,   119,   119,   119,   119,    15,    15,   159,
   130,   159,   130,   130,   130,   159,   159,   159,   159,   107,
    96,   119,   107,   107,    87,    87,   107,    82,   107,    82,
   107,   107,   107,   161,   107,   107,   106,    14,   161,    14,
   130,   130,   107,   107,   107,    38,   116,   116,   107,   107,
   107,   107,    92,    14,    14,    92,    92,    82,    82,    92,
    38,    92,    92,    92,    92,    92,    67,    92,    92,   121,
    67,    59,    81,    39,    81,    92,    50,    92,    50,    50,
    50,    92,    92,    92,    92,   155,    59,    30,   155,   155,
    26,    94,   155,    94,   155,    93,   155,   155,   155,    46,
   155,   155,    81,    81,     8,    26,    50,    50,   155,   124,
   155,   124,    29,   124,   155,   155,   155,   155,   129,     8,
   138,   129,   129,    23,   142,   129,   142,   129,    61,   129,
   129,   129,    61,   129,   129,   138,   122,   129,   129,   124,
   124,   129,    80,   129,    80,    19,    80,   129,   129,   129,
   129,   122,    79,    61,    79,    85,    79,    85,    61,    61,
   156,   156,   156,   156,   156,   156,   156,   156,    49,    49,
    49,    49,    80,    80,    57,    57,    57,    57,    57,    57,
    57,    57,    79,    79,   146,   156,   146,    24,    18,    24,
    73,   154,    73,    42,    91,    42,   154,    53,    53,    57,
   146,   146,   143,    24,    24,    13,    73,    73,   147,    42,
    42,    78,    78,    78,    78,    78,    78,    78,    78,   110,
   110,   110,   110,   125,   125,    78,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    43,    43,    43,    43,    43,
    43,    43,    43,   108,   108,   108,   108,   108,   108,   108,
   108,   148,    89,   148,   128,   128,   152,   153,    54,     9,
     6,     3,    56,     1 ]

racc_action_pointer = [
   nil,   343,    19,   341,   nil,   nil,   323,   nil,   170,   322,
   nil,   nil,   nil,   256,    98,    40,   nil,   nil,   247,   206,
   nil,   nil,   nil,   187,   248,   nil,   156,   nil,   nil,   175,
   139,   nil,   -12,   nil,   nil,   nil,    -8,   nil,   111,   134,
   -18,   300,   254,   309,   nil,   nil,   157,   nil,   nil,   246,
   139,   nil,   nil,   263,   324,     7,   325,   248,   nil,   137,
   nil,   191,   nil,   nil,   nil,   nil,     1,   129,   nil,   nil,
   nil,   nil,   nil,   251,   nil,   nil,   nil,   nil,   285,   215,
   205,   135,    90,    -9,    24,   215,    48,    57,   nil,   318,
   nil,   258,   118,   134,   151,   nil,    81,   nil,   nil,    61,
   nil,   nil,   nil,    47,    40,    27,    96,    85,   317,   nil,
   297,   nil,   nil,   nil,   nil,    32,   124,   nil,   nil,    81,
   nil,   132,   202,   nil,   172,   263,   nil,   nil,   314,   184,
    73,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   186,   -17,
   nil,   nil,   184,   268,   nil,   nil,   245,   256,   311,   nil,
   nil,   nil,   315,   323,   253,   151,   234,   nil,   nil,    52,
   nil,    95,   nil,   nil,   nil,   -14,   nil ]

racc_action_default = [
    -2,   -89,    -1,   -89,   -73,   -31,   -89,   -32,   -89,   -89,
   -33,   -18,   -23,    -5,   -89,   -24,    -9,   -26,   -89,   -89,
   -25,   -38,   -27,   -89,   -89,   -28,   -89,   -29,    -4,   -89,
   -89,   -30,   -89,   167,   -74,   -19,   -89,   -75,   -89,   -89,
   -89,   -89,   -89,   -89,   -87,   -82,   -69,   -84,   -83,   -85,
   -89,   -86,   -76,    -2,   -89,   -89,   -89,   -89,    -3,   -89,
   -72,   -89,    -7,   -39,   -20,    -8,   -89,   -89,   -56,   -58,
   -59,    -2,   -52,   -89,   -53,   -55,   -54,   -57,   -89,   -89,
   -89,   -89,   -89,   -89,   -89,   -89,   -85,   -89,   -71,   -89,
   -10,   -89,   -89,   -62,   -89,   -34,   -89,    -2,    -6,   -83,
   -68,   -67,   -66,   -89,   -89,   -89,   -89,   -89,   -51,   -50,
   -44,   -45,   -88,   -79,   -80,   -78,   -77,   -70,   -81,   -89,
   -11,   -89,   -89,   -17,   -89,   -89,   -63,   -35,   -89,   -41,
   -89,   -46,   -47,   -48,   -49,   -60,   -12,   -21,   -89,   -89,
   -61,   -64,   -89,   -89,   -15,    -2,   -89,   -89,   -89,   -37,
   -22,    -2,   -89,   -89,   -89,   -42,   -89,   -40,   -36,   -65,
   -16,   -89,   -14,    -2,   -13,   -41,   -43 ]

racc_goto_table = [
     2,    41,    46,   126,    36,   162,     1,    86,   123,    38,
   147,    57,   164,   142,    79,    89,   125,    53,   101,   112,
   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,    78,
   nil,   nil,   nil,   nil,   nil,   141,   110,    85,   113,   114,
   115,   116,    94,   nil,   119,   nil,   166,   nil,   nil,   nil,
   nil,   nil,   nil,    92,   nil,   nil,   nil,   nil,   nil,   nil,
   108,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   107,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   139,   nil,   nil,   nil,   nil,   nil,   148,   138,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   156,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   155,   nil,   nil,   nil,   nil,
   nil,   159,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   165 ]

racc_goto_check = [
     2,    21,    20,    26,     5,     4,     1,    24,    11,     5,
    22,    21,     4,     9,    23,     7,    25,     6,    27,    28,
   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,    26,    24,    20,    24,    24,
    24,    24,    20,   nil,    24,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,    20,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     6,     0,   nil,  -149,    -4,     1,   -38,   nil,  -115,
   nil,   -84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -13,   -13,  -119,   -29,   -43,   -77,   -90,   -43,   -61 ]

racc_goto_default = [
   nil,   nil,   nil,    26,    28,    32,   nil,   nil,    11,   nil,
    16,   nil,    20,    22,    25,    27,    31,     5,     7,    10,
   nil,   nil,   nil,    73,    49,   nil,   nil,    52,    44 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 "/" => 2,
 "*" => 3,
 "-" => 4,
 "+" => 5,
 "==" => 6,
 "!=" => 7,
 "<" => 8,
 ">" => 9,
 "<=" => 10,
 ">=" => 11,
 "&&" => 12,
 "||" => 13,
 :EOL => 14,
 :DEFVAR => 15,
 :TYPE => 16,
 :IDENT => 17,
 :DEFFUNC => 18,
 "(" => 19,
 ")" => 20,
 :VARREF => 21,
 "," => 22,
 "{" => 23,
 "}" => 24,
 :LABEL => 25,
 :COMMAND => 26,
 :MACRO => 27,
 "=" => 28,
 :COMMENT => 29,
 :IF => 30,
 :THEN => 31,
 :ENDIF => 32,
 :ELSE => 33,
 :ELSIF => 34,
 :FLAG_ON => 35,
 :FLAG_OFF => 36,
 :WHILE => 37,
 :ENDWHILE => 38,
 :SWITCH => 39,
 :ENDSWITCH => 40,
 :CASE => 41,
 :funcall => 42,
 :EVENT_START => 43,
 :EVENT_END => 44,
 :DEFINE_LOCAL => 45,
 :UNDEF_LOCAL => 46,
 :NUMBER => 47,
 :MACPARAM => 48 }

racc_use_result_var = true

racc_nt_base = 49

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'"/"',
'"*"',
'"-"',
'"+"',
'"=="',
'"!="',
'"<"',
'">"',
'"<="',
'">="',
'"&&"',
'"||"',
'EOL',
'DEFVAR',
'TYPE',
'IDENT',
'DEFFUNC',
'"("',
'")"',
'VARREF',
'","',
'"{"',
'"}"',
'LABEL',
'COMMAND',
'MACRO',
'"="',
'COMMENT',
'IF',
'THEN',
'ENDIF',
'ELSE',
'ELSIF',
'FLAG_ON',
'FLAG_OFF',
'WHILE',
'ENDWHILE',
'SWITCH',
'ENDSWITCH',
'CASE',
'funcall',
'EVENT_START',
'EVENT_END',
'DEFINE_LOCAL',
'UNDEF_LOCAL',
'NUMBER',
'MACPARAM',
'$start',
'program',
'stmt_list',
'stmt',
'stmt_block',
'comments',
'defvar_list',
'def_var',
'def_func',
'param',
'block_start',
'block_end',
'cmd',
'if_stmt',
'assign',
'callfunc',
'switch_stmt',
'while_stmt',
'def_local',
'undef_local',
'args',
'cmp_expr',
'else_stmt',
'cmp_ident',
'expr',
'case_stmt_list',
'case_stmt',
'primary',
'arg']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'sp4.y', 45
  def _reduce_1( val, _values, result )
						result = RootNode.new( val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 60
  def _reduce_2( val, _values, result )
						result = []
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 64
  def _reduce_3( val, _values, result )
						result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 68
  def _reduce_4( val, _values, result )
						result.push val[1]
   result
  end
.,.,

 # reduce 5 omitted

module_eval <<'.,.,', 'sp4.y', 74
  def _reduce_6( val, _values, result )
						result.push val[1]
						#result.push RawNode.new(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 78
  def _reduce_7( val, _values, result )
						#result.push RawNode.new(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 82
  def _reduce_8( val, _values, result )
						#result.push RawNode.new(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 94
  def _reduce_9( val, _values, result )
						result = []
   result
  end
.,.,

 # reduce 10 omitted

module_eval <<'.,.,', 'sp4.y', 99
  def _reduce_11( val, _values, result )
						result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 108
  def _reduce_12( val, _values, result )
						result = DefVarNode.new(val[1], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 118
  def _reduce_13( val, _values, result )
						result = DefFuncNode.new( val[1], val[2], val[4], val[7] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 122
  def _reduce_14( val, _values, result )
						result = DefFuncNode.new( val[1], val[2], nil, val[6] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 132
  def _reduce_15( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 136
  def _reduce_16( val, _values, result )
						result.push val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 145
  def _reduce_17( val, _values, result )
						result = BlockNode.new(val[1], val[2])
   result
  end
.,.,

 # reduce 18 omitted

 # reduce 19 omitted

 # reduce 20 omitted

 # reduce 21 omitted

 # reduce 22 omitted

module_eval <<'.,.,', 'sp4.y', 177
  def _reduce_23( val, _values, result )
						result = RawNode.new(val[0]);
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 181
  def _reduce_24( val, _values, result )
						result = CmdNode.new( val, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 185
  def _reduce_25( val, _values, result )
						result = CmdNode.new( val[0].shift, val[0] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 189
  def _reduce_26( val, _values, result )
						result = RawNode.new(val[0]);
   result
  end
.,.,

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'sp4.y', 212
  def _reduce_34( val, _values, result )
						result = CallFuncNode.new( nil, val[0], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 216
  def _reduce_35( val, _values, result )
						result = CallFuncNode.new( nil, val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 220
  def _reduce_36( val, _values, result )
						result = CallFuncNode.new( val[0], val[2], val[4] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 224
  def _reduce_37( val, _values, result )
						result = CallFuncNode.new( val[0], val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 234
  def _reduce_38( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 238
  def _reduce_39( val, _values, result )
						result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 247
  def _reduce_40( val, _values, result )
						result = IfNode.new(val[1],val[3],val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 259
  def _reduce_41( val, _values, result )
						result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 263
  def _reduce_42( val, _values, result )
						result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 267
  def _reduce_43( val, _values, result )
						result = [IfNode.new(val[1], val[3], val[4])]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 284
  def _reduce_44( val, _values, result )
            left = "_PUSH_WORK #{val[0].sub(/\A\$/,"")}"
            right = "_PUSH_VALUE #{val[2]}"
            result = CompareNode.new(val[1], left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 290
  def _reduce_45( val, _values, result )
            left = "_PUSH_WORK #{val[0].sub(/\A\$/,"")}"
            right = "_PUSH_WORK #{val[2].sub(/\A\$/,"")}"
            result = CompareNode.new(val[1], left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 296
  def _reduce_46( val, _values, result )
            left = "_PUSH_FLAG #{val[2]}"
            right = "_PUSH_VALUE TRUE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 302
  def _reduce_47( val, _values, result )
            left = "_PUSH_FLAG #{val[2].sub(/\A\$/,"")}"
            right = "_PUSH_VALUE TRUE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 308
  def _reduce_48( val, _values, result )
            left = "_PUSH_FLAG #{val[2]}"
            right = "_PUSH_VALUE FALSE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 314
  def _reduce_49( val, _values, result )
            left = "_PUSH_FLAG #{val[2].sub(/\A\$/,"")}"
            right = "_PUSH_VALUE FALSE"
            result = CompareNode.new('CMPID_EQ', left, right)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 318
  def _reduce_50( val, _values, result )
            result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 322
  def _reduce_51( val, _values, result )
            result = LogicalCompareNode.new(val[1], val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 331
  def _reduce_52( val, _values, result )
						result = 'CMPID_EQ'	#result = 'EQ'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 335
  def _reduce_53( val, _values, result )
						result = 'CMPID_NE'	#result = 'NE'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 339
  def _reduce_54( val, _values, result )
						result = 'CMPID_GT'	#result = 'GT'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 343
  def _reduce_55( val, _values, result )
						result = 'CMPID_LT'	#result = 'LT'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 347
  def _reduce_56( val, _values, result )
						result = 'CMPID_GT_EQ'	#result = 'GE'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 351
  def _reduce_57( val, _values, result )
						result = 'CMPID_LT_EQ'	#result = 'LE'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 355
  def _reduce_58( val, _values, result )
            result = 'CMPID_AND'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 359
  def _reduce_59( val, _values, result )
            result = 'CMPID_OR'
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 369
  def _reduce_60( val, _values, result )
            result = WhileNode.new(val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 378
  def _reduce_61( val, _values, result )
            result = SwitchNode.new(val[1].sub(/\A\$/,""), val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 389
  def _reduce_62( val, _values, result )
            result = []
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 393
  def _reduce_63( val, _values, result )
            result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 397
  def _reduce_64( val, _values, result )
            result.push val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 406
  def _reduce_65( val, _values, result )
            result = CaseNode.new(val[1], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 418
  def _reduce_66( val, _values, result )
						result = AssignNode.new(val[0], val[2], :VARREF)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 422
  def _reduce_67( val, _values, result )
						result = AssignNode.new(val[0], val[2], nil)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 426
  def _reduce_68( val, _values, result )
						result = AssignNode.new(val[0], val[2], funcall)
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 435
  def _reduce_69( val, _values, result )
						result = [val[0],val[1]]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 439
  def _reduce_70( val, _values, result )
						result = [val[0], ['('] + val[2] + [')'] ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 443
  def _reduce_71( val, _values, result )
            result = [ val[0], "()" ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 447
  def _reduce_72( val, _values, result )
						result = [val[0],val[1]]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 451
  def _reduce_73( val, _values, result )
            result = [ val[0], nil ]
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 460
  def _reduce_74( val, _values, result )
            result = DefLocalVarNode.new( val[1] )
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 465
  def _reduce_75( val, _values, result )
            result = UndefLocalVarNode.new( val[1] )
   result
  end
.,.,

 # reduce 76 omitted

module_eval <<'.,.,', 'sp4.y', 478
  def _reduce_77( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 482
  def _reduce_78( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 486
  def _reduce_79( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 490
  def _reduce_80( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 494
  def _reduce_81( val, _values, result )
						result = val
   result
  end
.,.,

 # reduce 82 omitted

 # reduce 83 omitted

 # reduce 84 omitted

 # reduce 85 omitted

 # reduce 86 omitted

module_eval <<'.,.,', 'sp4.y', 523
  def _reduce_87( val, _values, result )
						result = val
   result
  end
.,.,

module_eval <<'.,.,', 'sp4.y', 528
  def _reduce_88( val, _values, result )
						result.push val[1]
						result.push val[2]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

  end   # class Parser

end   # module PmScript
