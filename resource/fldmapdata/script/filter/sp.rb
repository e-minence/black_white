#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class ScriptPreprocesser < Racc::Parser

module_eval(<<'...end sp2.y/module_eval...', 'sp2.y', 189)

def initialize
end

RESERVED = {
	'IF'	=> :IF,
	'THEN'	=> :THEN,
	'ELSE'	=> :ELSE,
	'ELSIF'	=> :ELSIF,
	'ENDIF'	=> :ENDIF
};

def parse	f
	@q = []
	@nowlineno = 1
	@incomment = false
	f.each do |line|
		line.strip!
		until line.empty? do
			if @incomment == true then
				if line =~ /.*\*\// then
					@incomment = false
					pushq [ :COMMENT, $&]
					line = $'
				else
					pushq [ :COMMENT, line]
					line = ""
				end
			else
				case line
				when /\A\s+/
					;
				when /\A\/\/.*$/
					pushq [ :COMMENT, $& ]
				when /^\s*$/, /\A\#.*/
					pushq [ :COMMENT, $&]
				when /\A\/\*.*\*\//
					pushq [ :COMMENT, $&]
				when /\A\.[a-zA-Z_]+.*$/
					pushq [ :MACRO, $& ]
				when /\A[a-zA-Z_][a-zA-Z0-9_]*:/
					pushq [ :LABEL, $& ]
				when /\A_[A-Z0-9][a-zA-Z0-9_]*/
					pushq [ :COMMAND, $& ]
				when /\A0x[0-9a-fA-F]+/, /\A\d+/
					pushq [ :NUMBER, $& ]
				when /\A\$[a-zA-Z][a-zA-Z0-9_]*/
					pushq [ :VARREF, $& ]
				when /\A[a-zA-Z_][a-zA-Z0-9_]*/
					if RESERVED.has_key? $& then
						pushq [ RESERVED[$&], $&.intern ]
					else
						pushq [ :IDENT, $& ]
					end
				when /\A\\[a-zA-Z_][a-zA-Z0-9_]*/
					pushq [ :MACPARAM, $& ]
				when /\A==/,/\A!=/,/\A>/,/\A</,/\A<=/,/\A>=/
					pushq [ $&, $& ]
				when /\A\/\*.*/
					pushq [ :COMMENT, $& ]
					@incomment = true
				when /\A[\+\-\*\/(),]/
					pushq [ $&, $& ]
				else
					raise RuntimeError, "#{@fname}:#{@nowlineno}: fatal error!"
				end
				line = $'
				puts "\#NOW LINE #{line}"
			end
		end
		pushq [ :EOL, nil ]
		@nowlineno += 1
	end
	pushq [ false, nil ]
	
	@yydebug = true
	do_parse
end

def next_token
	value = @q.shift
	@lineno = value.last
	value.delete_at(2)
	value
end

def pushq value
	puts "\# #{value[0]} #{value[1]}"
	value << @nowlineno
	@q.push value
end


def on_error( t, v, values )
    if v then
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@fname}:#{@lineno}: syntax error on #{v.inspect}"
  end


...end sp2.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,    48,    49,    50,    47,    48,    49,    50,    52,    44,
    54,    26,    27,    28,    41,    23,    44,    40,    26,    27,
    28,    22,    39,    56,    26,    27,    28,    56,    11,    12,
    13,    14,    15,     4,    47,    48,    49,    50,    10,    11,
    12,    13,    14,    15,     4,    47,    48,    49,    50,    10,
    11,    12,    13,    14,    15,     4,    47,    48,    64,    65,
    10,    11,    12,    13,    14,    15,     4,    47,    48,    64,
    65,    10,    33,    34,    36,    37,    38,    32,    44,    21,
    26,    27,    28,    22,    43,    15,    51,    25,    22,    26,
    27,    28,    44,    17,    26,    27,    28,    44,    20,    26,
    27,    28,    15,    44,    57,    26,    27,    28,    51,    44,
    17,    26,    27,    28,    44,    69,    26,    27,    28,    47,
    48,    49,    50,    16,    70,    71,     3 ]

racc_action_check = [
    45,    45,    45,    45,    55,    55,    55,    55,    35,    25,
    39,    25,    25,    25,    23,    10,    35,    19,    35,    35,
    35,    19,    18,    45,    23,    23,    23,    55,    67,    67,
    67,    67,    67,    67,    53,    53,    53,    53,    67,     2,
     2,     2,     2,     2,     2,    62,    62,    62,    62,     2,
    63,    63,    63,    63,    63,    63,    60,    60,    63,    63,
    63,    72,    72,    72,    72,    72,    72,    61,    61,    72,
    72,    72,    17,    17,    17,    17,    17,    17,    51,     6,
    51,    51,    51,     6,    24,    11,    31,    13,    24,    13,
    13,    13,    49,     4,    49,    49,    49,    48,     5,    48,
    48,    48,     5,    47,    46,    47,    47,    47,    46,    50,
    65,    50,    50,    50,    44,    66,    44,    44,    44,    29,
    29,    29,    29,     3,    68,    70,     1 ]

racc_action_pointer = [
   nil,   126,    33,   123,    77,    92,    73,   nil,   nil,   nil,
    -8,    75,   nil,    63,   nil,   nil,   nil,    55,    10,    11,
   nil,   nil,   nil,    -2,    78,   -15,   nil,   nil,   nil,   117,
   nil,    57,   nil,   nil,   nil,    -8,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,    90,    -2,    79,    79,    73,    68,
    85,    54,   nil,    32,   nil,     2,   nil,   nil,   nil,   nil,
    54,    65,    43,    44,   nil,    94,   102,    22,   112,   nil,
   119,   nil,    55,   nil ]

racc_action_default = [
    -2,   -43,    -1,   -43,   -43,   -43,   -43,   -10,   -12,   -13,
   -43,    -4,    -8,    -9,   -11,   -14,    74,   -43,   -43,   -43,
    -3,    -6,   -15,   -43,   -43,   -43,   -38,   -39,   -40,   -41,
   -32,   -30,   -27,   -22,   -23,   -43,   -24,   -25,   -26,   -43,
    -5,   -28,   -29,    -7,   -43,   -41,   -43,   -43,   -43,   -43,
   -43,   -43,   -21,   -20,    -2,   -43,   -37,   -31,   -35,   -36,
   -34,   -33,   -42,   -17,    -2,   -43,   -43,   -18,   -43,   -16,
   -43,    -2,   -17,   -19 ]

racc_goto_table = [
     2,    18,    29,    31,    66,    19,    42,    35,     1,   nil,
   nil,    24,   nil,    73,    45,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    55,   nil,   nil,    58,    59,    60,    61,
    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    63,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    68,   nil,    67,   nil,   nil,   nil,   nil,   nil,
   nil,    72 ]

racc_goto_check = [
     2,     8,    11,    13,     9,     4,    12,    10,     1,   nil,
   nil,     4,   nil,     9,    11,    13,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    11,   nil,   nil,    11,    11,    11,    11,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,     2 ]

racc_goto_pointer = [
   nil,     8,     0,   nil,     0,   nil,   nil,   nil,    -3,   -59,
   -10,   -11,   -17,   -10 ]

racc_goto_default = [
   nil,   nil,   nil,     5,     6,     7,     8,     9,   nil,   nil,
   nil,   nil,    30,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 31, :_reduce_1,
  0, 32, :_reduce_2,
  3, 32, :_reduce_3,
  2, 32, :_reduce_none,
  4, 32, :_reduce_5,
  3, 32, :_reduce_6,
  4, 32, :_reduce_7,
  1, 33, :_reduce_8,
  1, 33, :_reduce_9,
  1, 33, :_reduce_10,
  1, 33, :_reduce_11,
  1, 33, :_reduce_12,
  1, 33, :_reduce_13,
  1, 34, :_reduce_14,
  2, 34, :_reduce_15,
  7, 36, :_reduce_16,
  0, 39, :_reduce_17,
  2, 39, :_reduce_18,
  6, 39, :_reduce_19,
  3, 38, :_reduce_20,
  3, 38, :_reduce_21,
  1, 40, :_reduce_22,
  1, 40, :_reduce_23,
  1, 40, :_reduce_24,
  1, 40, :_reduce_25,
  1, 40, :_reduce_26,
  1, 40, :_reduce_27,
  3, 37, :_reduce_28,
  3, 37, :_reduce_29,
  2, 35, :_reduce_30,
  4, 35, :_reduce_31,
  1, 41, :_reduce_none,
  3, 41, :_reduce_33,
  3, 41, :_reduce_34,
  3, 41, :_reduce_35,
  3, 41, :_reduce_36,
  3, 41, :_reduce_37,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 43, :_reduce_41,
  3, 43, :_reduce_42 ]

racc_reduce_n = 43

racc_shift_n = 74

racc_token_table = {
  false => 0,
  :error => 1,
  "/" => 2,
  "*" => 3,
  "-" => 4,
  "+" => 5,
  :EOL => 6,
  :LABEL => 7,
  :COMMAND => 8,
  :MACRO => 9,
  :COMMENT => 10,
  :IF => 11,
  :THEN => 12,
  :ENDIF => 13,
  :ELSE => 14,
  :ELSIF => 15,
  :VARREF => 16,
  "==" => 17,
  "!=" => 18,
  ">" => 19,
  "<" => 20,
  ">=" => 21,
  "<=" => 22,
  "=" => 23,
  "(" => 24,
  ")" => 25,
  :NUMBER => 26,
  :IDENT => 27,
  :MACPARAM => 28,
  "," => 29 }

racc_nt_base = 30

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"/\"",
  "\"*\"",
  "\"-\"",
  "\"+\"",
  "EOL",
  "LABEL",
  "COMMAND",
  "MACRO",
  "COMMENT",
  "IF",
  "THEN",
  "ENDIF",
  "ELSE",
  "ELSIF",
  "VARREF",
  "\"==\"",
  "\"!=\"",
  "\">\"",
  "\"<\"",
  "\">=\"",
  "\"<=\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "NUMBER",
  "IDENT",
  "MACPARAM",
  "\",\"",
  "$start",
  "program",
  "stmt_list",
  "stmt",
  "comments",
  "cmd",
  "if_stmt",
  "assign",
  "cmp_expr",
  "else_stmt",
  "cmp_ident",
  "expr",
  "primary",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sp2.y', 11)
  def _reduce_1(val, _values, result)
    						result = RootNode.new( val[0] )
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 16)
  def _reduce_2(val, _values, result)
    						result = []
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 20)
  def _reduce_3(val, _values, result)
    						result.push val[1]
					
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'sp2.y', 25)
  def _reduce_5(val, _values, result)
    						result.push val[1]
						result.push RawNode.new(val[2])
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 30)
  def _reduce_6(val, _values, result)
    						result.push RawNode.new(val[1])
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 34)
  def _reduce_7(val, _values, result)
    						result.push RawNode.new(val[2])
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 40)
  def _reduce_8(val, _values, result)
    						result = RawNode.new(val[0]);
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 44)
  def _reduce_9(val, _values, result)
    						result = CmdNode.new( val, nil )
						#result = RawNode.new(val)
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 49)
  def _reduce_10(val, _values, result)
    						result = CmdNode.new( val[0].shift, val[0] )
						#str = "	#{val[0].shift} #{val[0]}"
						#result = RawNode.new(str)
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 55)
  def _reduce_11(val, _values, result)
    						result = RawNode.new(val[0]);
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 59)
  def _reduce_12(val, _values, result)
    					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 62)
  def _reduce_13(val, _values, result)
    						result = RawNode.new(val[0]);
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 67)
  def _reduce_14(val, _values, result)
    						result = val
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 71)
  def _reduce_15(val, _values, result)
    						result.push val[1]
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 76)
  def _reduce_16(val, _values, result)
    						result = IfNode.new(val[1],val[4],val[5])
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 80)
  def _reduce_17(val, _values, result)
    						result = nil
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 84)
  def _reduce_18(val, _values, result)
    						result = val[1]
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 88)
  def _reduce_19(val, _values, result)
    						result = [IfNode.new(val[1], val[4], val[5])]
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 93)
  def _reduce_20(val, _values, result)
    						result = ["_CMPVAL #{val[0].sub(/\A\$/,"")}, #{val[2].sub(/\A\$/,"")}"]
						result.push val[1]
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 98)
  def _reduce_21(val, _values, result)
    						result = ["_CMPWK #{val[0].sub(/\A\$/,"")}, #{val[2].sub(/\A\$/,"")}"]
						result.push val[1]
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 104)
  def _reduce_22(val, _values, result)
    						result = 'NE'	#result = 'EQ'
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 108)
  def _reduce_23(val, _values, result)
    						result = 'EQ'	#result = 'NE'
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 112)
  def _reduce_24(val, _values, result)
    						result = 'LE'	#result = 'GT'
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 116)
  def _reduce_25(val, _values, result)
    						result = 'GE'	#result = 'LT'
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 120)
  def _reduce_26(val, _values, result)
    						result = 'LT'	#result = 'GE'
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 124)
  def _reduce_27(val, _values, result)
    						result = 'GT'	#result = 'LE'
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 129)
  def _reduce_28(val, _values, result)
    						result = "_LDWK #{val[0].sub(/\A\$/,"")}, #{val[2].sub(/\A\$/,"")}"
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 133)
  def _reduce_29(val, _values, result)
    						result = "_LDVAL #{val[0].sub(/\A\$/,"")}, #{val[2]}"
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 138)
  def _reduce_30(val, _values, result)
    						result = [val[0],val[1]]
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 142)
  def _reduce_31(val, _values, result)
    						result = [val[0], val[2]]
					
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'sp2.y', 148)
  def _reduce_33(val, _values, result)
    						result = val
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 152)
  def _reduce_34(val, _values, result)
    						result = val
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 156)
  def _reduce_35(val, _values, result)
    						result = val
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 160)
  def _reduce_36(val, _values, result)
    						result = val
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 164)
  def _reduce_37(val, _values, result)
    						result = val
					
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

module_eval(<<'.,.,', 'sp2.y', 174)
  def _reduce_41(val, _values, result)
    						result = val
					
    result
  end
.,.,

module_eval(<<'.,.,', 'sp2.y', 178)
  def _reduce_42(val, _values, result)
    						result.push val[1]
						result.push val[2]
					
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ScriptPreprocesser


class CompileError < StandardError; end

class CompileEnviroment
	def initialize
		@lcount = 0
		@lstack = []
	end

	def get_label
		label = sprintf("LABEL%05d", @lcount)
		@lcount += 1
		label
	end
end

class Node
	def	put_list( intp, nodes )
		v = nil
		nodes.each {|i| v = i.compile( intp ) }
		v
	end
end

class RootNode < Node
	def initialize( tree )
		@tree = tree
	end

	def compile( intp )
		put_list( intp, @tree )
	end
end

class CmdNode < Node
	def initialize( cmd, args )
		@cmd = cmd
		@args = args
	end

	def compile( intp )
		if @args then
			puts "\t#{@cmd}\t#{@args}"
		else
			puts "\t#{@cmd}"
		end
	end
end

class RawNode < Node
	def initialize( val )
		@val = val
	end
	def compile( intp )
		puts "#{@val}"
	end
end

class IfNode < Node
	def initialize( cond_node, then_stmt, else_stmt )
		@cond_node = cond_node
		@then_stmt = then_stmt
		@else_stmt = else_stmt
	end

	def compile( intp )
		#put compare command
		puts "\t#{@cond_node[0]}"

		#put if_stmt condition EOL
		label1 = intp.get_label
		puts "\t_IF_JUMP\t#{@cond_node[1]},#{label1}"
		put_list( intp, @then_stmt )
		if @else_stmt then
			label2 = intp.get_label
			puts "\t_JUMP\t#{label2}"
			puts "#{label1}:"
			put_list( intp, @else_stmt )
			puts "#{label2}:"
		else
			puts "#{label1}:"
		end

	end
end

class AssignNode < Node
	def initialize( vname, val )
		@vname = vname
		@val = val
	end
	def compile( intp )
		#put 
		#put
		#put
	end
end


#--- main

parser = ScriptPreprocesser.new
cenv = CompileEnviroment.new
begin
	tree = nil
	if ARGV[0] then
		File.open( ARGV[0] ) do |f|
			tree = parser.parse f
		end
	else
		tree = parser.parse $stdin
	end
	tree.compile cenv
end
