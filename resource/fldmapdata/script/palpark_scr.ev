//======================================================================
//                palpark_scr.ev
//
//    スクリプトファイル：palpark_scr用
//
//======================================================================

  .text

  .include  "scr_seq_def.h"
  .include  "../../message/dst/script/msg_palpark_scr.h"
  .include  "palpark_scr_local.h"
  .include  "r15r0301.h"

//----------------------------------------------------------------------
//               スクリプトテーブル
//----------------------------------------------------------------------

_EVENT_DATA   ev_palpark_reception
_EVENT_DATA   ev_pos_palpark_reception
_EVENT_DATA    ev_palpark_assistantw_01
_EVENT_DATA    ev_palpark_assistantw_02
_EVENT_DATA    ev_palpark_assistantm_03
_EVENT_DATA_END


DEFINE_LOCAL EndMsg        //ラストメッセージ


//パルパーク話しかけ
EVENT_START ev_palpark_reception
  _TALK_OBJ_START()
  _CALL palpark_main
EVENT_END  

//パルパーク初回POSイベント
EVENT_START ev_pos_palpark_reception
  _CALL first_anime_evt
  _CALL palpark_main
  //対象ワークに1をセットして以降のPOS起動をオフ
  $WK_SCENE_R15R0301 = 1
EVENT_END

//パルパーク共通メイン
palpark_main:
  //初はなしかけか？
  IF FLAG_OFF( FE_PALPARK_FIRSTTALK ) THEN
    //初回話しかけフラグＯＮ
    _FLAG_SET(FE_PALPARK_FIRSTTALK)
    //初回メッセージ「というわけで、やってみる」
    _BALLOONWIN_OBJMSG( msg_palpark_first_09, R15R0301_PARK )
  ELSE
    //「やってみる？」
  _BALLOONWIN_OBJMSG( msg_palpark_02, R15R0301_PARK )
  ENDIF

  _YES_NO_WIN( SCWK_ANSWER )
  _BALLOONWIN_CLOSE()
  IF $SCWK_ANSWER == 0 THEN     //やる
    DEFINE_LOCAL box_empty_num        //ローカルワーク　ボックスの空き数
    //ボックスの空き状態をチェック
    _GET_BOX_POKE_COUNT( box_empty_num, POKECOUNT_MODE_EMPTY )
    IF $box_empty_num >= 6 THEN          //6以上空きがある
      //「ＤＳある？」
      _BALLOONWIN_OBJMSG( msg_palpark_05, R15R0301_PARK )
      _YES_NO_WIN( SCWK_ANSWER )
      _BALLOONWIN_CLOSE()
      IF $SCWK_ANSWER == 0 THEN          //ＤＳある
        _CALL save        //output:SCWK_ANSWER
        IF $SCWK_ANSWER == TRUE THEN
          _CALL play_palpark
        ELSE
          _CALL see_you
        ENDIF
      ELSE                              //ＤＳない
        _CALL see_you
      ENDIF
    ELSE
      //「ボックス空けて」
      $EndMsg = msg_palpark_04
      _CALL end_msg
    ENDIF
  ELSE                          //やらない
    _CALL see_you
  ENDIF
_RET


//最終メッセージ共通
end_msg:
  _BALLOONWIN_OBJMSG( EndMsg, R15R0301_PARK )
  _LAST_KEYWAIT()
  _BALLOONWIN_CLOSE()
_RET


see_you:
  //「またね」
  $EndMsg = msg_palpark_03
  _CALL end_msg
_RET

//セーブ                   output:SCWK_ANSWER
save:
  DEFINE_LOCAL report //セーブチェック用
  // レポートを書く
  _REPORT_EVENT_CALL_WIRELESS( report )
  // 書き込みに失敗
  IF $report != SCR_REPORT_OK THEN
    //セーブ失敗
    $SCWK_ANSWER = FALSE
  ELSE
    //セーブ成功
    $SCWK_ANSWER = TRUE
  ENDIF
_RET

play_palpark:
  DEFINE_LOCAL i_ret
  DEFINE_LOCAL palpark_retval
  //フィールド通信切断
  _FIELD_COMM_EXIT_EVENT_CALL( i_ret )

  IF $i_ret == SCR_FIELD_COMM_EXIT_CANCEL THEN
    //キャンセル todo
    _RET
  ELSIF $i_ret == SCR_FIELD_COMM_EXIT_ERROR THEN
    //エラー todo
    _RET
  ENDIF

  //「そこにたって」
  _BALLOONWIN_OBJMSG( msg_palpark_08, R15R0301_PARK )
  _BALLOONWIN_CLOSE()

  //主人公マシンインアニメ+フェードアウト
  _CALL player_in_anm

  //パルパークコール
  _PALPARK_CALL()

  //主人公マシンアウトアニメ+フェードイン
  _CALL player_out_anm

  //終了状態取得
  _GET_PALPARK_VALUE_FINISH_STATE(palpark_retval)
  

  //無事終了した？
  IF $palpark_retval == PALPARK_FINISH_ERROR THEN
    _CALL connect_error                             //通信エラー
  ELSIF $palpark_retval == PALPARK_FINISH_CANCEL  THEN
    //何もしない
  ELSE
    DEFINE_LOCAL result_msg
    //「おつかれ」
    _BALLOONWIN_OBJMSG( msg_palpark_10, R15R0301_PARK )
    _BALLOONWIN_CLOSE()

    IF $palpark_retval == PALPARK_FINISH_HIGHSOCRE THEN   //ハイスコア？
      _CALL score_msg
      //「捕まえたポケはボックスへ」
      $result_msg = msg_palpark_11
    ELSIF $palpark_retval == PALPARK_FINISH_NORMAL THEN   //つかまえたポケいる?
      //「捕まえたポケはボックスへ」
      $result_msg = msg_palpark_11
    ELSIF $palpark_retval == PALPARK_FINISH_NO_GET THEN    //捕まえていない
      //「ざんねん」
      $result_msg = msg_palpark_12
    ELSE
      //ここにはこない
      $result_msg = msg_palpark_12    //「ざんねん」メッセージをいれとく todo
    ENDIF

    _BALLOONWIN_OBJMSG( result_msg, R15R0301_PARK )
    _BALLOONWIN_CLOSE()
  ENDIF

  _CALL see_you
_RET

connect_error:
  //通信エラーのときのメッセージ
  _BALLOONWIN_OBJMSG( msg_palpark_13, R15R0301_PARK )
  _BALLOONWIN_CLOSE()
_RET

score_msg:
  DEFINE_LOCAL score
  DEFINE_LOCAL score_msg

  //ハイスコア取得
  _GET_PALPARK_VALUE_HIGHSCORE(score)
  
  IF $score >= 500 THEN
    $score_msg = msg_palpark_score_06
  ELSIF $score >= 400 THEN
    $score_msg = msg_palpark_score_05
  ELSIF $score >= 300 THEN
    $score_msg = msg_palpark_score_04
  ELSIF $score >= 200 THEN
    $score_msg = msg_palpark_score_03
  ELSIF $score >= 100 THEN
    $score_msg = msg_palpark_score_02
  ELSE
    $score_msg = msg_palpark_score_01
  ENDIF

  //「レベル○○」
  _BALLOONWIN_OBJMSG( score_msg, R15R0301_PARK )
  _BALLOONWIN_CLOSE()

_RET

//主人公マシンイン
player_in_anm:
  DEFINE_LOCAL anmID
  //博士はける
  _OBJ_ANIME( R15R0301_PARK, anm_doc_in )
	_OBJ_ANIME_WAIT()
  //自機移動
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_player_in )
	_OBJ_ANIME_WAIT()
  //博士マシンいじるアニメ1
  _OBJ_ANIME( R15R0301_PARK, anm_doc_work1 )
	_OBJ_ANIME_WAIT()

  //マシン起動SE
  //アニメセットアップ
  _BMODEL_ANIME_CREATE( anmID, SCR_BMID_PPMACHINE, 10, 3 )
  //マシンアニメ
	_BMODEL_ANIME_SET( anmID, SCR_BMANM_PPM_MOV )
	_BMODEL_ANIME_WAIT( anmID )
  //マシンループアニメ
	_BMODEL_ANIME_LOOP_SET( anmID, SCR_BMANM_PPM_LOOP )

  //博士所定位置に戻るアニメ
  _OBJ_ANIME( R15R0301_PARK, anm_doc_work2 )
	_OBJ_ANIME_WAIT()  
  //「はじめるよ」
  _BALLOONWIN_OBJMSG( msg_palpark_09, R15R0301_PARK )
  _BALLOONWIN_CLOSE()

  //ブラックアウト
  _MAP_FADE_BLACK_OUT()
  _MAP_FADE_END_CHECK()

  //マシンループアニメストップ  
	_BMODEL_ANIME_STOP( anmID )

  //アニメ解放
  _BMODEL_ANIME_DELETE( anmID )
_RET

//主人公マシンアウト
player_out_anm:
  _MAP_FADE_BLACK_IN()
  _MAP_FADE_END_CHECK()

  //自機移動
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_player_out )
	_OBJ_ANIME_WAIT()
  //博士入り口にもどる
  _OBJ_ANIME( R15R0301_PARK, anm_doc_out )
	_OBJ_ANIME_WAIT()
  //自機が博士の方を向く
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_player_turn )
	_OBJ_ANIME_WAIT()
_RET

//--------------------------------------------------------------------
//博士はける
//--------------------------------------------------------------------
_ANIME_LABEL	anm_doc_in
	_ANIME_DATA	AC_WALK_U_8F,1
  _ANIME_DATA	AC_WALK_L_8F,1
  _ANIME_DATA	AC_STAY_WALK_R_8F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//自機マシンイン
//--------------------------------------------------------------------
_ANIME_LABEL	anm_player_in
	_ANIME_DATA	AC_WALK_U_8F,4
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//博士マシン起動
//--------------------------------------------------------------------
_ANIME_LABEL	anm_doc_work1
	_ANIME_DATA	AC_WALK_U_4F,1
  _ANIME_DATA	AC_WALK_L_4F,1
  _ANIME_DATA	AC_STAY_WALK_U_4F,1
  _ANIME_DATA	AC_WALK_R_4F,4
  _ANIME_DATA	AC_STAY_WALK_U_4F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//博士マシン起動後戻るアニメ
//--------------------------------------------------------------------
_ANIME_LABEL	anm_doc_work2
  _ANIME_DATA	AC_WALK_L_4F,3
  _ANIME_DATA	AC_WALK_D_4F,1
  _ANIME_DATA	AC_STAY_WALK_U_4F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//自機マシンアウト
//--------------------------------------------------------------------
_ANIME_LABEL	anm_player_out
	_ANIME_DATA	AC_WALK_D_8F,4
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//博士もどる
//--------------------------------------------------------------------
_ANIME_LABEL	anm_doc_out
	_ANIME_DATA	AC_WALK_R_8F,1
  _ANIME_DATA	AC_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//自機が博士の方を向く
//--------------------------------------------------------------------
_ANIME_LABEL	anm_player_turn
  _ANIME_DATA	AC_STAY_WALK_U_8F,1
	_ANIME_DATA	ACMD_END,0  
  
//---------------------------------------------------------

//初回アニメイベント
first_anime_evt:
  DEFINE_LOCAL pos_x
  DEFINE_LOCAL pos_z
  //自機のX座標を取得
  _PLAYER_POS_GET( pos_x, pos_z )

  //助手に「！」

  //助手が自機に近づく
  IF $pos_x == 9 THEN       //左
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_contact_start1 )
  ELSIF $pos_x == 11 THEN   //右
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_contact_start2 )
  ELSE                      //中央
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_contact_start3 )
  ENDIF
  _OBJ_ANIME_WAIT()

  //助手「こんちわ」
  _BALLOONWIN_OBJMSG( msg_palpark_first_01, R15R0301_ASSISTANTW_01 )
  _BALLOONWIN_CLOSE()
  //助手「！」
  _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_gyoe )
  _OBJ_ANIME_WAIT()
  //助手「はかせーーー」
  _BALLOONWIN_OBJMSG( msg_palpark_first_02, R15R0301_ASSISTANTW_01 )
  _BALLOONWIN_CLOSE()
  //助手先行つれてく
  IF $pos_x == 9 THEN       //左
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_mov_start1 )
    _OBJ_ANIME_WAIT()
    //「ついてこいや」
    _BALLOONWIN_OBJMSG( msg_palpark_first_18, R15R0301_ASSISTANTW_01 )
    _BALLOONWIN_CLOSE()
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_mov_restart )
    _OBJ_ANIME( MMDL_ID_PLAYER, anm_player_mov_start1 )
  ELSIF $pos_x == 11 THEN   //右
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_mov_start2 )
    _OBJ_ANIME_WAIT()
    //「ついてこいや」
    _BALLOONWIN_OBJMSG( msg_palpark_first_18, R15R0301_ASSISTANTW_01 )
    _BALLOONWIN_CLOSE()
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_mov_restart )
    _OBJ_ANIME( MMDL_ID_PLAYER, anm_player_mov_start2 )
  ELSE                      //中央
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_mov_start3 )
    _OBJ_ANIME_WAIT()
    //「ついてこいや」
    _BALLOONWIN_OBJMSG( msg_palpark_first_18, R15R0301_ASSISTANTW_01 )
    _BALLOONWIN_CLOSE()
    _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_mov_restart )
    _OBJ_ANIME( MMDL_ID_PLAYER, anm_player_mov_start3 )
  ENDIF
  _OBJ_ANIME_WAIT()

  //助手「きたか」
  _BALLOONWIN_OBJMSG( msg_palpark_first_03, R15R0301_ASSISTANTW_01 )
  _BALLOONWIN_CLOSE()

  _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_dir_up )
  _OBJ_ANIME_WAIT()

  //助手「こいつ殿堂入りしとるで！」
  _BALLOONWIN_OBJMSG( msg_palpark_first_19, R15R0301_ASSISTANTW_01 )
  _BALLOONWIN_CLOSE()

  //自機を博士の前に助手はける
  _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_asis_mov_back )
  _OBJ_ANIME_WAIT()
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_player_mov_front )
  _OBJ_ANIME_WAIT()

  //博士「なんどもいっとる・・」
  _BALLOONWIN_OBJMSG( msg_palpark_first_04, R15R0301_PARK )
  _BALLOONWIN_CLOSE()
  //博士「！」
  _OBJ_ANIME( R15R0301_PARK, anm_gyoe )
  _OBJ_ANIME_WAIT()

  //博士振り向く
  _OBJ_ANIME( R15R0301_PARK, anm_turn )
  _OBJ_ANIME_WAIT()

  //博士「グーレイト」
  _BALLOONWIN_OBJMSG( msg_palpark_first_05, R15R0301_PARK )
  _BALLOONWIN_CLOSE()

  //博士乱舞
  _OBJ_ANIME( R15R0301_PARK, anm_spin)
  _OBJ_ANIME_WAIT()

  //博士「えーと」
  _BALLOONWIN_OBJMSG( msg_palpark_first_21, R15R0301_PARK )
  _BALLOONWIN_CLOSE()
  
  //プレーヤー名をタグ0番にセット
  _PLAYER_NAME( 0 )
  //助手「○○や」
  _BALLOONWIN_OBJMSG( msg_palpark_first_06, R15R0301_ASSISTANTW_01 )
  _BALLOONWIN_CLOSE()
  //博士「○○くん」
  _BALLOONWIN_OBJMSG( msg_palpark_first_07, R15R0301_PARK )
  _BALLOONWIN_CLOSE()
  //助手と会話するため自機右向く
  _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_dir_left )
  _OBJ_ANIME_WAIT()
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_dir_right )
  _OBJ_ANIME_WAIT() 
  //助手「手ぶらサイコー」
  _BALLOONWIN_OBJMSG( msg_palpark_first_08, R15R0301_ASSISTANTW_01 )
  _BALLOONWIN_CLOSE()
  //自機、助手を上向き
  _OBJ_ANIME( R15R0301_ASSISTANTW_01, anm_dir_up )
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_dir_up )
  _OBJ_ANIME_WAIT()

_RET

/************************************************************/
/*						助手								*/
/************************************************************/
EVENT_START   ev_palpark_assistantw_01
	//「道具はNG」
	_EASY_BALLOONWIN_TALKOBJ_MSG( msg_palpark_15 )
EVENT_END

/************************************************************/
/*						研究員A								*/
/************************************************************/
EVENT_START   ev_palpark_assistantw_02
	//「100年先」
	_EASY_BALLOONWIN_TALKOBJ_MSG( msg_palpark_16 )
EVENT_END

/************************************************************/
/*						研究員B								*/
/************************************************************/
EVENT_START   ev_palpark_assistantm_03
	//「モニターしている」
	_EASY_BALLOONWIN_TALKOBJ_MSG( msg_palpark_17 )
EVENT_END


//--------------------------------------------------------------------
//助手が自機に近づく（自機が左にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_contact_start1
  _ANIME_DATA	AC_MARK_GYOE,1
  _ANIME_DATA	AC_WALK_D_8F,1
  _ANIME_DATA	AC_WALK_L_8F,1
  _ANIME_DATA	AC_DIR_D,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//助手が自機に近づく（自機が右にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_contact_start2
  _ANIME_DATA	AC_MARK_GYOE,1
  _ANIME_DATA	AC_WALK_D_8F,1
  _ANIME_DATA	AC_WALK_R_8F,1
  _ANIME_DATA	AC_DIR_D,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//助手が自機に近づく（自機が中央にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_contact_start3
  _ANIME_DATA	AC_MARK_GYOE,1
  _ANIME_DATA	AC_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0


//--------------------------------------------------------------------
//自機が助手についていく（自機が左にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_player_mov_start1
  _ANIME_DATA	AC_WALK_U_8F,1
  _ANIME_DATA	AC_WALK_R_8F,1
  _ANIME_DATA	AC_WALK_U_8F,12
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//自機が助手についていく（自機が右にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_player_mov_start2
  _ANIME_DATA	AC_WALK_U_8F,1
  _ANIME_DATA	AC_WALK_L_8F,1
  _ANIME_DATA	AC_WALK_U_8F,12
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//自機が助手についていく（自機が中央にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_player_mov_start3
  _ANIME_DATA	AC_WALK_U_8F,13
	_ANIME_DATA	ACMD_END,0
  
//--------------------------------------------------------------------
//助手が主人公をついていく（自機が左にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_mov_start1
  _ANIME_DATA	AC_WALK_R_4F,1
  _ANIME_DATA	AC_WALK_U_4F,3
  _ANIME_DATA AC_WAIT_8F,1
  _ANIME_DATA	AC_STAY_WALK_D_4F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//助手が主人公をついていく（自機が右にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_mov_start2
  _ANIME_DATA	AC_WALK_L_4F,1
  _ANIME_DATA	AC_WALK_U_4F,3
  _ANIME_DATA AC_WAIT_8F,1
  _ANIME_DATA	AC_STAY_WALK_D_4F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//助手が主人公をついていく（自機が中央にいる）
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_mov_start3
  _ANIME_DATA	AC_WALK_U_4F,3
  _ANIME_DATA AC_WAIT_8F,1
  _ANIME_DATA	AC_STAY_WALK_D_4F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//助手再移動
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_mov_restart
  _ANIME_DATA	AC_WALK_U_4F,10
  _ANIME_DATA	AC_DIR_D,1
	_ANIME_DATA	ACMD_END,0

  
//--------------------------------------------------------------------
//助手がはける
//--------------------------------------------------------------------
_ANIME_LABEL	anm_asis_mov_back
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA AC_DIR_PAUSE_ON, 1
  _ANIME_DATA	AC_WALK_R_8F,1
  _ANIME_DATA AC_DIR_PAUSE_OFF, 1
  _ANIME_DATA	AC_DIR_U,1
	_ANIME_DATA	ACMD_END,0
  
//--------------------------------------------------------------------
//自機一歩前へ
//--------------------------------------------------------------------
_ANIME_LABEL	anm_player_mov_front
  _ANIME_DATA	AC_WALK_U_8F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//左向く
//--------------------------------------------------------------------
_ANIME_LABEL	anm_dir_left
  _ANIME_DATA	AC_DIR_L,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//右向く
//--------------------------------------------------------------------
_ANIME_LABEL	anm_dir_right
  _ANIME_DATA	AC_DIR_R,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//上向く
//--------------------------------------------------------------------
_ANIME_LABEL	anm_dir_up
  _ANIME_DATA	AC_DIR_U,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
//「！」マーク
//--------------------------------------------------------------------
_ANIME_LABEL	anm_gyoe
  _ANIME_DATA	AC_MARK_GYOE,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------------
// ターン
//--------------------------------------------------------------------
_ANIME_LABEL	anm_turn
  _ANIME_DATA	AC_STAY_WALK_D_4F,1
	_ANIME_DATA	ACMD_END,0  

//--------------------------------------------------------------------
//スピン
//--------------------------------------------------------------------
_ANIME_LABEL	anm_spin
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
  _ANIME_DATA	AC_DIR_L,1
  _ANIME_DATA	AC_DIR_U,1
  _ANIME_DATA	AC_DIR_R,1
  _ANIME_DATA	AC_DIR_D,1
	_ANIME_DATA	ACMD_END,0
  
  
  


