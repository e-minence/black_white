//======================================================================
/**
 * @file	scr_seq_def.def
 * @bfief	スクリプトコマンドのマクロ定義ファイル
 * @author	HisashiSogabe
 * @date	2005.05.24
 *
 * 05.08.04 Satoshi Nohara
 *
 * 技シーケンス用のマクロ定義ファイルを元にしている
 */
//======================================================================
#define	__ASM_NO_DEF_

//スクリプトで使用するヘッダーファイル
	.include	"usescript.h"
//	.include	"..\..\..\include\pl_bugfix.h"

//データを自然な境界にアラインするかの設定
	.option alignment off

//======================================================================
//	macro
//======================================================================
	.macro	INIT_CMD
DEF_CMD_COUNT	=	0
	.endm
		
	.macro	DEF_CMD	symname
\symname	=	DEF_CMD_COUNT
DEF_CMD_COUNT	=	( DEF_CMD_COUNT + 1 )
	.endm

//======================================================================
//	命令シンボル宣言
//======================================================================
	INIT_CMD
	DEF_CMD	EV_SEQ_NOP
	DEF_CMD	EV_SEQ_DUMMY
	
	DEF_CMD	EV_SEQ_END
	DEF_CMD	EV_SEQ_TIME_WAIT
	
	DEF_CMD	EV_SEQ_LD_REG_VAL
	DEF_CMD	EV_SEQ_LD_REG_WDATA
	DEF_CMD	EV_SEQ_LD_REG_ADR
	DEF_CMD	EV_SEQ_LD_ADR_VAL
	DEF_CMD	EV_SEQ_LD_ADR_REG
	DEF_CMD	EV_SEQ_LD_REG_REG
	DEF_CMD	EV_SEQ_LD_ADR_ADR
	
	DEF_CMD	EV_SEQ_CP_REG_REG
	DEF_CMD	EV_SEQ_CP_REG_VAL
	DEF_CMD	EV_SEQ_CP_REG_ADR
	DEF_CMD	EV_SEQ_CP_ADR_REG
	DEF_CMD	EV_SEQ_CP_ADR_VAL
	DEF_CMD	EV_SEQ_CP_ADR_ADR
	DEF_CMD	EV_SEQ_CP_WK_VAL
	DEF_CMD	EV_SEQ_CP_WK_WK
	
	DEF_CMD EV_SEQ_VM_ADD
	DEF_CMD EV_SEQ_CHG_COMMON_SCR
	DEF_CMD EV_SEQ_CHG_LOCAL_SCR

	DEF_CMD EV_SEQ_JUMP
	DEF_CMD EV_SEQ_OBJ_ID_JUMP
	DEF_CMD EV_SEQ_BG_ID_JUMP
	DEF_CMD EV_SEQ_PLAYER_DIR_JUMP

	DEF_CMD EV_SEQ_CALL
	DEF_CMD EV_SEQ_RET
	
	DEF_CMD EV_SEQ_IF_JUMP
	DEF_CMD EV_SEQ_IF_CALL
	
	DEF_CMD EV_SEQ_ABKEYWAIT
	
	DEF_CMD EV_SEQ_TALKMSG_ALLPUT
	
	DEF_CMD EV_SEQ_TALKWIN_OPEN
	DEF_CMD EV_SEQ_TALKWIN_CLOSE
	
	DEF_CMD	EV_SEQ_OBJ_ANIME			
	DEF_CMD	EV_SEQ_OBJ_ANIME_WAIT
	
	DEF_CMD EV_SEQ_OBJ_PAUSE_ALL
	DEF_CMD EV_SEQ_TALK_OBJ_PAUSE_ALL
	DEF_CMD EV_SEQ_OBJ_PAUSE_CLEAR_ALL
	DEF_CMD EV_SEQ_OBJ_TURN

//======================================================================
/**
 *	基本コマンド
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	何もしない
 */
//--------------------------------------------------------------
	.macro	_NOP
	.short	EV_SEQ_NOP
	.endm

//--------------------------------------------------------------
/**
 *	ダミー
 */
//--------------------------------------------------------------
	.macro	_DUMMY
	.short	EV_SEQ_DUMMY
	.endm

//======================================================================
/**
 *	イベントデータ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	イベントデータ　テーブル宣言
 */
//--------------------------------------------------------------
	.macro	_EVENT_DATA	adrs
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	イベントデータ　テーブル終了
 */
//--------------------------------------------------------------
#define EV_DATA_END_CODE	(0xfd13)	//適当な値
	.macro	_EVENT_DATA_END
	.short	EV_DATA_END_CODE
	.endm

//--------------------------------------------------------------
/**
 *	スクリプトの終了
 */
//--------------------------------------------------------------
	.macro	_END
	.short	EV_SEQ_END
	.endm

//--------------------------------------------------------------
/**
 *	ウェイト
 */
//--------------------------------------------------------------
	.macro	_TIME_WAIT time,ret_wk
	.short	EV_SEQ_TIME_WAIT
	.short	\time
	.short	\ret_wk
	.endm

//======================================================================
/**
 *	データロード・ストア関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタに1byteの値を格納
 */
//--------------------------------------------------------------
	.macro	_LD_REG_VAL	r,val
	.short	EV_SEQ_LD_REG_VAL
	.byte	\r
	.byte	\val
	.endm

//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタに4byteの値を格納
 */
//--------------------------------------------------------------
	.macro	_LD_REG_WDATA	r,wdata
	.short	EV_SEQ_LD_REG_WDATA
	.byte	\r
	.long	\wdata
	.endm

//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタにアドレスを格納
 */
//--------------------------------------------------------------
	.macro	_LD_REG_ADR	reg,ADDRESS
	.short	EV_SEQ_LD_REG_ADR
	.byte	\reg
	.long	\ADDRESS
	.endm

//--------------------------------------------------------------
/**
 * アドレスの中身に値を代入
 */
//--------------------------------------------------------------
	.macro	_LD_ADR_VAL	adrs,val
	.short	EV_SEQ_LD_ADR_VAL
	.long	\adrs
	.byte	\val
	.endm

//--------------------------------------------------------------
/**
 * アドレスの中身に仮想マシンの汎用レジスタの値を代入
 */
//--------------------------------------------------------------
	.macro	_LD_ADR_REG	adrs,reg
	.short	EV_SEQ_LD_ADR_REG
	.long	\adrs
	.byte	\reg
	.endm

//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタの値を汎用レジスタにコピー
 */
//--------------------------------------------------------------
	.macro	_LD_REG_REG	r1,r2
	.short	EV_SEQ_LD_REG_REG
	.byte	\r1,\r2
	.endm

//--------------------------------------------------------------
/**
 * アドレスの中身にアドレスの中身を代入
 */
//--------------------------------------------------------------
	.macro	_LD_ADR_ADR	adr1,adr2
	.short	EV_SEQ_LD_ADR_ADR
	.long	\adr1
	.long	\adr2
	.endm

//======================================================================
/**
 *	比較関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	仮想マシンの汎用レジスタを比較
 */
//--------------------------------------------------------------
	.macro	_CP_REG_REG	r1,r2
	.short	EV_SEQ_CP_REG_REG
	.byte	\r1,\r2
	.endm

//--------------------------------------------------------------
/**
 *	仮想マシンの汎用レジスタと値を比較
 */
//--------------------------------------------------------------
	.macro	_CP_REG_VAL	r1,val
	.short	EV_SEQ_CP_REG_VAL
	.byte	\r1,\val
	.endm

//--------------------------------------------------------------
/**
 *	仮想マシンの汎用レジスタとアドレスの中身を比較
 */
//--------------------------------------------------------------
	.macro	_CP_REG_ADR	r1,adrs
	.short	EV_SEQ_CP_REG_ADR
	.byte	\r1
	.long	\adrs
	.endm

//--------------------------------------------------------------
/**
 *	アドレスの中身と仮想マシンの汎用レジスタを比較
 */
//--------------------------------------------------------------
	.macro	_CP_ADR_REG	adrs,r1
	.short	EV_SEQ_CP_ADR_REG
	.long	\adrs
	.byte	\r1
	.endm

//--------------------------------------------------------------
/**
 *	アドレスの中身と値を比較
 */
//--------------------------------------------------------------
	.macro	_CP_ADR_VAL	adrs,val
	.short	EV_SEQ_CP_ADR_VAL
	.long	\adrs
	.byte	\val
	.endm

//--------------------------------------------------------------
/**
 *	アドレスの中身とアドレスの中身を比較
 */
//--------------------------------------------------------------
	.macro	_CP_ADR_ADR	adr1,adr2
	.short	EV_SEQ_CP_ADR_ADR
	.long	\adr1
	.long	\adr2
	.endm

//--------------------------------------------------------------
/**
 *	ワークと値の比較
 */
//--------------------------------------------------------------
	.macro	_CMPVAL	wk,val
	.short	EV_SEQ_CP_WK_VAL
	.short	\wk
	.short	\val
	.endm

//--------------------------------------------------------------
/**
 *	ワークとワークの比較
 */
//--------------------------------------------------------------
	.macro	_CMPWK	wk1,wk2
	.short	EV_SEQ_CP_WK_WK
	.short	\wk1
	.short	\wk2
	.endm

#if 0 //wb null
//--------------------------------------------------------------
/**
 * デバッグ用：ワーク情報表示
 */
//--------------------------------------------------------------
	.macro	_DEBUG_WATCH_WORK	wk
	.short	EV_SEQ_DEBUG_WATCH_VALUE
	.short	\wk
	.endm
#endif //wb null

//======================================================================
/**
 *	仮想マシン関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	仮想マシン追加(切り替えはせず、並列で動作します！)
 */
//--------------------------------------------------------------
	.macro	_VM_ADD id
	.short	EV_SEQ_VM_ADD
	.short	\id
	.endm

//--------------------------------------------------------------
/**
 * ローカルスクリプトをウェイト状態にして、共通スクリプトを動作させます
 */
//--------------------------------------------------------------
	.macro	_CHG_COMMON_SCR id
	.short	EV_SEQ_CHG_COMMON_SCR
	.short	\id
	.endm

//--------------------------------------------------------------
/**
 *	共通スクリプトを終了して、ローカルスクリプトを再開させます
 */
//--------------------------------------------------------------
	.macro	_CHG_LOCAL_SCR
	.short	EV_SEQ_CHG_LOCAL_SCR
	.endm

//======================================================================
/**
 *	ジャンプ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	ジャンプ
 */
//--------------------------------------------------------------
	.macro	_JUMP adrs
	.short	EV_SEQ_JUMP
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	OBJ_ID　ジャンプ
 */
//--------------------------------------------------------------
	.macro	_OBJ_ID_JUMP act,adrs
	.short	EV_SEQ_OBJ_ID_JUMP
	.byte	\act
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	BG_ID　ジャンプ
 */
//--------------------------------------------------------------
	.macro	_BG_ID_JUMP act,adrs
	.short	EV_SEQ_BG_ID_JUMP
	.byte	\act
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	イベント起動時の主人公の向き比較ジャンプ
 *	(現在の向きではないので注意！)
 */
//--------------------------------------------------------------
	.macro	_PLAYER_DIR_JUMP dir,adrs
	.short	EV_SEQ_PLAYER_DIR_JUMP
	.byte	\dir
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	コール
 */
//--------------------------------------------------------------
	.macro	_CALL adrs
	.short	EV_SEQ_CALL
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	コールを呼び出したアドレスに戻る
 */
//--------------------------------------------------------------
	.macro	_RET
	.short	EV_SEQ_RET
	.endm

//--------------------------------------------------------------
/**
 *	IFジャンプ
 */
//--------------------------------------------------------------
	.macro	_IF_JUMP cond,adrs
	.short	EV_SEQ_IF_JUMP
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	IFコール
 */
//--------------------------------------------------------------
	.macro	_IF_CALL cond,adrs
	.short	EV_SEQ_IF_CALL
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	値を比較、条件どおりの場合分岐(ジャンプ)
 */
//--------------------------------------------------------------
	.macro	_IFVAL_JUMP wk,cond,val,adrs
	_CMPVAL	\wk,\val
	.short	EV_SEQ_IF_JUMP
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	値を比較、条件どおりの場合分岐(コール)
 */
//--------------------------------------------------------------
	.macro	_IFVAL_CALL wk,cond,val,adrs
	_CMPVAL	\wk,\val
	.short	EV_SEQ_IF_CALL
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	ワークを比較、条件どおりの場合分岐(ジャンプ)
 */
//--------------------------------------------------------------
	.macro	_IFWK_JUMP wk1,cond,wk2,adrs
	_CMPWK	\wk1,\wk2
	.short	EV_SEQ_IF_JUMP
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	ワークを比較、条件どおりの場合分岐(コール)
 */
//--------------------------------------------------------------
	.macro	_IFWK_CALL wk1,cond,wk2,adrs
	_CMPWK	\wk1,\wk2
	.short	EV_SEQ_IF_CALL
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//======================================================================
/**
 *	キー入力関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	キー待ち
 */
//--------------------------------------------------------------
	.macro	_AB_KEYWAIT
	.short	EV_SEQ_ABKEYWAIT
	.endm

//======================================================================
/**
 *	会話メッセージ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	展開メッセージを表示(1byte)
 *
 *	@param	msg_id	表示するメッセージID
 */
//--------------------------------------------------------------
	.macro	_TALKMSG_ALLPUT msg_id
	.short	EV_SEQ_TALKMSG_ALLPUT
	.byte	\msg_id
	.endm

//======================================================================
/**
 *	会話ウィンドウ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	会話ウィンドウ開く
 */
//--------------------------------------------------------------
	.macro	_TALKWIN_OPEN
	.short	EV_SEQ_TALKWIN_OPEN
	.endm

//--------------------------------------------------------------
/**
 *	会話ウィンドウ閉じる
 */
//--------------------------------------------------------------
	.macro	_TALKWIN_CLOSE
	.short	EV_SEQ_TALKWIN_CLOSE
	.endm

//======================================================================
/**
 *	動作モデル　アニメーションコマンド関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	アニメ
 *
 *	注意！ 動作停止をセットしたい時は、_OBJ_PAUSE_ALLをもう一度呼ばないといけない！
 */
//--------------------------------------------------------------
	.macro	_OBJ_ANIME	obj_id,adrs
	.short	EV_SEQ_OBJ_ANIME
	.short	\obj_id
	.long	((\adrs-.)-4)
	.endm
	
//--------------------------------------------------------------
/**
 *	アニメーションデータラベル
 */
//--------------------------------------------------------------
	.macro	_ANIME_LABEL label
	.align	4
	\label:
	.endm

//--------------------------------------------------------------
/**
 *	アニメーションデータ(fieldobj_code.h参照)
 */
//--------------------------------------------------------------
	.macro	_ANIME_DATA	code,num
	.short	\code
	.short	\num
	.endm

//--------------------------------------------------------------
/**
 *	アニメウェイト
 */
//--------------------------------------------------------------
	.macro	_OBJ_ANIME_WAIT
	.short	EV_SEQ_OBJ_ANIME_WAIT
	.endm

//--------------------------------------------------------------
/**
 *	動作停止
 */
//--------------------------------------------------------------
	.macro	_OBJ_PAUSE_ALL
	.short	EV_SEQ_OBJ_PAUSE_ALL
	.endm

//--------------------------------------------------------------
/**
 *	OBJ会話イベント用　動作停止
 */
//--------------------------------------------------------------
	.macro	_TALK_OBJ_PAUSE_ALL
	.short	EV_SEQ_TALK_OBJ_PAUSE_ALL
	.endm

//--------------------------------------------------------------
/**
 *	動作再開
 */
//--------------------------------------------------------------
	.macro	_OBJ_PAUSE_CLEAR_ALL
	.short	EV_SEQ_OBJ_PAUSE_CLEAR_ALL
	.endm

//-----------------------------------------------------------------------------
/**
 *	話しかけたOBJを自機方向へ振り向き
 */
//--------------------------------------------------------------
	.macro	_TURN_HERO_SITE
	.short	EV_SEQ_OBJ_TURN
	.endm


//======================================================================
/**
 *	switch関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	switch 〜 case 構文
 *
 *  スクリプト制御ワークで確保されるワーク(SCWK_REG0)を使用しているので、
 *	FLAG_CHANGE,INIT_CHANGEなどでは使用できません！
 *	SCENE_CHANGEは使用できます。
 */
//--------------------------------------------------------------
	.macro	_SWITCH wk
	_LDWK	SCWK_REG0,\wk
	.endm

	.macro	_CASE_JUMP	val,adr
	_CMPVAL	SCWK_REG0,\val
	_IF_JUMP	EQ,\adr
	.endm

//--------------------------------------------------------------
/**
 * スクリプトウィンドウ表示中にBキャンセル
 */
//--------------------------------------------------------------
	.macro	_CASE_CANCEL	adr
	_CMPVAL	SCWK_REG0,EV_WIN_B_CANCEL
	_IF_JUMP	EQ,\adr
	.endm

	.macro	_FLD_TALKWIN
	.short EV_SEQ_TALKWIN
	.endm

#if 0
//--------------------------------------------------------------
/**
 *	待機アイコン表示
 */
//--------------------------------------------------------------
	.macro	_ADD_WAITICON
	.short	EV_SEQ_WAITICON_ADD
	.endm

//--------------------------------------------------------------
/**
 *	待機アイコン消去
 */
//--------------------------------------------------------------
	.macro	_DEL_WAITICON
	.short	EV_SEQ_WAITICON_DEL
	.endm
#endif

