//======================================================================
/**
 * @file	scr_seq_def.def
 * @bfief	スクリプトコマンドのマクロ定義ファイル
 * @author	HisashiSogabe
 * @date	2005.05.24
 *
 * 05.08.04 Satoshi Nohara
 *
 * 技シーケンス用のマクロ定義ファイルを元にしている
 */
//======================================================================
#define	__ASM_NO_DEF_

//スクリプトで使用するヘッダーファイル
	.include	"usescript.h"
//	.include	"..\..\..\include\pl_bugfix.h"

//データを自然な境界にアラインするかの設定
	.option alignment off

//======================================================================
//	macro
//======================================================================
	.macro	INIT_CMD
DEF_CMD_COUNT	=	0
	.endm
		
	.macro	DEF_CMD	symname
\symname	=	DEF_CMD_COUNT
DEF_CMD_COUNT	=	( DEF_CMD_COUNT + 1 )
	.endm

//======================================================================
//	命令シンボル宣言
//======================================================================
	INIT_CMD
	DEF_CMD	EV_SEQ_NOP
	DEF_CMD	EV_SEQ_DUMMY
	
	DEF_CMD	EV_SEQ_END
	DEF_CMD	EV_SEQ_TIME_WAIT
	
	DEF_CMD	EV_SEQ_LD_REG_VAL
	DEF_CMD	EV_SEQ_LD_REG_WDATA
	DEF_CMD	EV_SEQ_LD_REG_ADR
	DEF_CMD	EV_SEQ_LD_ADR_VAL
	DEF_CMD	EV_SEQ_LD_ADR_REG
	DEF_CMD	EV_SEQ_LD_REG_REG
	DEF_CMD	EV_SEQ_LD_ADR_ADR
	
	DEF_CMD	EV_SEQ_CP_REG_REG
	DEF_CMD	EV_SEQ_CP_REG_VAL
	DEF_CMD	EV_SEQ_CP_REG_ADR
	DEF_CMD	EV_SEQ_CP_ADR_REG
	DEF_CMD	EV_SEQ_CP_ADR_VAL
	DEF_CMD	EV_SEQ_CP_ADR_ADR
	DEF_CMD	EV_SEQ_CP_WK_VAL
	DEF_CMD	EV_SEQ_CP_WK_WK
	
	DEF_CMD EV_SEQ_VM_ADD
	DEF_CMD EV_SEQ_CHG_COMMON_SCR
	DEF_CMD EV_SEQ_CHG_LOCAL_SCR

	DEF_CMD EV_SEQ_JUMP
	DEF_CMD EV_SEQ_OBJ_ID_JUMP
	DEF_CMD EV_SEQ_BG_ID_JUMP
	DEF_CMD EV_SEQ_PLAYER_DIR_JUMP

	DEF_CMD EV_SEQ_CALL
	DEF_CMD EV_SEQ_RET
	
	DEF_CMD EV_SEQ_IF_JUMP
	DEF_CMD EV_SEQ_IF_CALL
	
	DEF_CMD EV_SEQ_ABKEYWAIT
	
	DEF_CMD EV_SEQ_TALKMSG_ALLPUT
	
	DEF_CMD EV_SEQ_TALKWIN_OPEN
	DEF_CMD EV_SEQ_TALKWIN_CLOSE
	
	DEF_CMD	EV_SEQ_OBJ_ANIME			
	DEF_CMD	EV_SEQ_OBJ_ANIME_WAIT
	
	DEF_CMD EV_SEQ_OBJ_PAUSE_ALL
	DEF_CMD EV_SEQ_TALK_OBJ_PAUSE_ALL
	DEF_CMD EV_SEQ_OBJ_PAUSE_CLEAR_ALL
	DEF_CMD EV_SEQ_OBJ_TURN
  
	DEF_CMD	EV_SEQ_YES_NO_WIN

  DEF_CMD EV_SEQ_CHG_LANGID

	DEF_CMD EV_SEQ_PLAYER_NAME

 	DEF_CMD	EV_SEQ_FLAG_SET
	DEF_CMD	EV_SEQ_FLAG_RESET
	DEF_CMD	EV_SEQ_FLAG_CHECK
	DEF_CMD	EV_SEQ_FLAG_CHECK_WK
	DEF_CMD	EV_SEQ_FLAG_SET_WK
  
	DEF_CMD	EV_SEQ_ADD_WK
	DEF_CMD	EV_SEQ_SUB_WK
	DEF_CMD	EV_SEQ_LD_WK_VAL
	DEF_CMD	EV_SEQ_LD_WK_WK
	DEF_CMD	EV_SEQ_LD_WK_WKVAL
  
  //trainer eye
	DEF_CMD	EV_SEQ_EYE_TRAINER_MOVE_SET
	DEF_CMD	EV_SEQ_EYE_TRAINER_MOVE_SINGLE
	DEF_CMD	EV_SEQ_EYE_TRAINER_MOVE_DOUBLE
	DEF_CMD	EV_SEQ_EYE_TRAINER_TYPE_GET
	DEF_CMD	EV_SEQ_EYE_TRAINER_ID_GET
  
  //trainer battle
	DEF_CMD	EV_SEQ_TRAINER_ID_GET
	DEF_CMD	EV_SEQ_TRAINER_BTL_SET
	DEF_CMD	EV_SEQ_TRAINER_MULTI_BTL_SET
	DEF_CMD	EV_SEQ_TRAINER_MSG_SET
	DEF_CMD	EV_SEQ_TRAINER_TALK_TYPE_GET
	DEF_CMD	EV_SEQ_REVENGE_TRAINER_TALK_TYPE_GET
	DEF_CMD	EV_SEQ_TRAINER_TYPE_GET
	DEF_CMD	EV_SEQ_TRAINER_BGM_SET
	DEF_CMD	EV_SEQ_LOSE
	DEF_CMD	EV_SEQ_LOSE_CHECK
	DEF_CMD	EV_SEQ_SEACRET_POKE_RETRY_CHECK
	DEF_CMD	EV_SEQ_HAIFU_POKE_RETRY_CHECK
	DEF_CMD	EV_SEQ_2VS2_BATTLE_CHECK
	DEF_CMD	EV_SEQ_DEBUG_BTL_SET
	DEF_CMD	EV_SEQ_BATTLE_RESULT_GET
  
  DEF_CMD EV_SEQ_MOVE_CODE_GET
  
  //trainer flag
	DEF_CMD EV_SEQ_TRAINER_FLAG_SET
	DEF_CMD EV_SEQ_TRAINER_FLAG_RESET
	DEF_CMD EV_SEQ_TRAINER_FLAG_CHECK

//======================================================================
/**
 *	基本コマンド
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	何もしない
 */
//--------------------------------------------------------------
	.macro	_NOP
	.short	EV_SEQ_NOP
	.endm

//--------------------------------------------------------------
/**
 *	ダミー
 */
//--------------------------------------------------------------
	.macro	_DUMMY
	.short	EV_SEQ_DUMMY
	.endm

//======================================================================
/**
 *	イベントデータ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	イベントデータ　テーブル宣言
 */
//--------------------------------------------------------------
	.macro	_EVENT_DATA	adrs
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	イベントデータ　テーブル終了
 */
//--------------------------------------------------------------
#define EV_DATA_END_CODE	(0xfd13)	//適当な値
	.macro	_EVENT_DATA_END
	.short	EV_DATA_END_CODE
	.endm

//--------------------------------------------------------------
/**
 *	スクリプトの終了
 */
//--------------------------------------------------------------
	.macro	_END
	.short	EV_SEQ_END
	.endm

//--------------------------------------------------------------
/**
 *	ウェイト
 */
//--------------------------------------------------------------
	.macro	_TIME_WAIT time,ret_wk
	.short	EV_SEQ_TIME_WAIT
	.short	\time
	.short	\ret_wk
	.endm

//======================================================================
/**
 *	データロード・ストア関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタに1byteの値を格納
 */
//--------------------------------------------------------------
	.macro	_LD_REG_VAL	r,val
	.short	EV_SEQ_LD_REG_VAL
	.byte	\r
	.byte	\val
	.endm

//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタに4byteの値を格納
 */
//--------------------------------------------------------------
	.macro	_LD_REG_WDATA	r,wdata
	.short	EV_SEQ_LD_REG_WDATA
	.byte	\r
	.long	\wdata
	.endm

//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタにアドレスを格納
 */
//--------------------------------------------------------------
	.macro	_LD_REG_ADR	reg,ADDRESS
	.short	EV_SEQ_LD_REG_ADR
	.byte	\reg
	.long	\ADDRESS
	.endm

//--------------------------------------------------------------
/**
 * アドレスの中身に値を代入
 */
//--------------------------------------------------------------
	.macro	_LD_ADR_VAL	adrs,val
	.short	EV_SEQ_LD_ADR_VAL
	.long	\adrs
	.byte	\val
	.endm

//--------------------------------------------------------------
/**
 * アドレスの中身に仮想マシンの汎用レジスタの値を代入
 */
//--------------------------------------------------------------
	.macro	_LD_ADR_REG	adrs,reg
	.short	EV_SEQ_LD_ADR_REG
	.long	\adrs
	.byte	\reg
	.endm

//--------------------------------------------------------------
/**
 * 仮想マシンの汎用レジスタの値を汎用レジスタにコピー
 */
//--------------------------------------------------------------
	.macro	_LD_REG_REG	r1,r2
	.short	EV_SEQ_LD_REG_REG
	.byte	\r1,\r2
	.endm

//--------------------------------------------------------------
/**
 * アドレスの中身にアドレスの中身を代入
 */
//--------------------------------------------------------------
	.macro	_LD_ADR_ADR	adr1,adr2
	.short	EV_SEQ_LD_ADR_ADR
	.long	\adr1
	.long	\adr2
	.endm



//======================================================================
/**
 *	比較関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	仮想マシンの汎用レジスタを比較
 */
//--------------------------------------------------------------
	.macro	_CP_REG_REG	r1,r2
	.short	EV_SEQ_CP_REG_REG
	.byte	\r1,\r2
	.endm

//--------------------------------------------------------------
/**
 *	仮想マシンの汎用レジスタと値を比較
 */
//--------------------------------------------------------------
	.macro	_CP_REG_VAL	r1,val
	.short	EV_SEQ_CP_REG_VAL
	.byte	\r1,\val
	.endm

//--------------------------------------------------------------
/**
 *	仮想マシンの汎用レジスタとアドレスの中身を比較
 */
//--------------------------------------------------------------
	.macro	_CP_REG_ADR	r1,adrs
	.short	EV_SEQ_CP_REG_ADR
	.byte	\r1
	.long	\adrs
	.endm

//--------------------------------------------------------------
/**
 *	アドレスの中身と仮想マシンの汎用レジスタを比較
 */
//--------------------------------------------------------------
	.macro	_CP_ADR_REG	adrs,r1
	.short	EV_SEQ_CP_ADR_REG
	.long	\adrs
	.byte	\r1
	.endm

//--------------------------------------------------------------
/**
 *	アドレスの中身と値を比較
 */
//--------------------------------------------------------------
	.macro	_CP_ADR_VAL	adrs,val
	.short	EV_SEQ_CP_ADR_VAL
	.long	\adrs
	.byte	\val
	.endm

//--------------------------------------------------------------
/**
 *	アドレスの中身とアドレスの中身を比較
 */
//--------------------------------------------------------------
	.macro	_CP_ADR_ADR	adr1,adr2
	.short	EV_SEQ_CP_ADR_ADR
	.long	\adr1
	.long	\adr2
	.endm

//--------------------------------------------------------------
/**
 *	ワークと値の比較
 */
//--------------------------------------------------------------
	.macro	_CMPVAL	wk,val
	.short	EV_SEQ_CP_WK_VAL
	.short	\wk
	.short	\val
	.endm

//--------------------------------------------------------------
/**
 *	ワークとワークの比較
 */
//--------------------------------------------------------------
	.macro	_CMPWK	wk1,wk2
	.short	EV_SEQ_CP_WK_WK
	.short	\wk1
	.short	\wk2
	.endm

#if 0 //wb null
//--------------------------------------------------------------
/**
 * デバッグ用：ワーク情報表示
 */
//--------------------------------------------------------------
	.macro	_DEBUG_WATCH_WORK	wk
	.short	EV_SEQ_DEBUG_WATCH_VALUE
	.short	\wk
	.endm
#endif //wb null

//======================================================================
/**
 *	仮想マシン関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	仮想マシン追加(切り替えはせず、並列で動作します！)
 */
//--------------------------------------------------------------
	.macro	_VM_ADD id
	.short	EV_SEQ_VM_ADD
	.short	\id
	.endm

//--------------------------------------------------------------
/**
 * ローカルスクリプトをウェイト状態にして、共通スクリプトを動作させます
 */
//--------------------------------------------------------------
	.macro	_CHG_COMMON_SCR id
	.short	EV_SEQ_CHG_COMMON_SCR
	.short	\id
	.endm

//--------------------------------------------------------------
/**
 *	共通スクリプトを終了して、ローカルスクリプトを再開させます
 */
//--------------------------------------------------------------
	.macro	_CHG_LOCAL_SCR
	.short	EV_SEQ_CHG_LOCAL_SCR
	.endm

//======================================================================
/**
 *	ジャンプ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	ジャンプ
 */
//--------------------------------------------------------------
	.macro	_JUMP adrs
	.short	EV_SEQ_JUMP
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	OBJ_ID　ジャンプ
 */
//--------------------------------------------------------------
	.macro	_OBJ_ID_JUMP act,adrs
	.short	EV_SEQ_OBJ_ID_JUMP
	.byte	\act
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	BG_ID　ジャンプ
 */
//--------------------------------------------------------------
	.macro	_BG_ID_JUMP act,adrs
	.short	EV_SEQ_BG_ID_JUMP
	.byte	\act
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	イベント起動時の主人公の向き比較ジャンプ
 *	(現在の向きではないので注意！)
 */
//--------------------------------------------------------------
	.macro	_PLAYER_DIR_JUMP dir,adrs
	.short	EV_SEQ_PLAYER_DIR_JUMP
	.byte	\dir
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	コール
 */
//--------------------------------------------------------------
	.macro	_CALL adrs
	.short	EV_SEQ_CALL
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	コールを呼び出したアドレスに戻る
 */
//--------------------------------------------------------------
	.macro	_RET
	.short	EV_SEQ_RET
	.endm

//--------------------------------------------------------------
/**
 *	IFジャンプ
 */
//--------------------------------------------------------------
	.macro	_IF_JUMP cond,adrs
	.short	EV_SEQ_IF_JUMP
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	IFコール
 */
//--------------------------------------------------------------
	.macro	_IF_CALL cond,adrs
	.short	EV_SEQ_IF_CALL
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	値を比較、条件どおりの場合分岐(ジャンプ)
 */
//--------------------------------------------------------------
	.macro	_IFVAL_JUMP wk,cond,val,adrs
	_CMPVAL	\wk,\val
	.short	EV_SEQ_IF_JUMP
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	値を比較、条件どおりの場合分岐(コール)
 */
//--------------------------------------------------------------
	.macro	_IFVAL_CALL wk,cond,val,adrs
	_CMPVAL	\wk,\val
	.short	EV_SEQ_IF_CALL
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	ワークを比較、条件どおりの場合分岐(ジャンプ)
 */
//--------------------------------------------------------------
	.macro	_IFWK_JUMP wk1,cond,wk2,adrs
	_CMPWK	\wk1,\wk2
	.short	EV_SEQ_IF_JUMP
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//--------------------------------------------------------------
/**
 *	ワークを比較、条件どおりの場合分岐(コール)
 */
//--------------------------------------------------------------
	.macro	_IFWK_CALL wk1,cond,wk2,adrs
	_CMPWK	\wk1,\wk2
	.short	EV_SEQ_IF_CALL
	.byte	\cond
	.long	((\adrs-.)-4)
	.endm

//======================================================================
/**
 *	キー入力関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	キー待ち
 */
//--------------------------------------------------------------
	.macro	_AB_KEYWAIT
	.short	EV_SEQ_ABKEYWAIT
	.endm

//======================================================================
/**
 *	会話メッセージ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	展開メッセージを表示(1byte)
 *
 *	@param	msg_id	表示するメッセージID
 */
//--------------------------------------------------------------
	.macro	_TALKMSG_ALLPUT msg_id
	.short	EV_SEQ_TALKMSG_ALLPUT
	.byte	\msg_id
	.endm

//--------------------------------------------------------------
/**
 *	会話ウィンドウ開く
 */
//--------------------------------------------------------------
	.macro	_TALKWIN_OPEN
	.short	EV_SEQ_TALKWIN_OPEN
	.endm

//--------------------------------------------------------------
/**
 *	会話ウィンドウ閉じる
 */
//--------------------------------------------------------------
	.macro	_TALKWIN_CLOSE
	.short	EV_SEQ_TALKWIN_CLOSE
	.endm

//======================================================================
/**
 *	動作モデル　アニメーションコマンド関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	アニメ
 *
 *	注意！ 動作停止をセットしたい時は、_OBJ_PAUSE_ALLをもう一度呼ばないといけない！
 */
//--------------------------------------------------------------
	.macro	_OBJ_ANIME	obj_id,adrs
	.short	EV_SEQ_OBJ_ANIME
	.short	\obj_id
	.long	((\adrs-.)-4)
	.endm
	
//--------------------------------------------------------------
/**
 *	アニメーションデータラベル
 */
//--------------------------------------------------------------
	.macro	_ANIME_LABEL label
	.align	4
	\label:
	.endm

//--------------------------------------------------------------
/**
 *	アニメーションデータ(fieldobj_code.h参照)
 */
//--------------------------------------------------------------
	.macro	_ANIME_DATA	code,num
	.short	\code
	.short	\num
	.endm

//--------------------------------------------------------------
/**
 *	アニメウェイト
 */
//--------------------------------------------------------------
	.macro	_OBJ_ANIME_WAIT
	.short	EV_SEQ_OBJ_ANIME_WAIT
	.endm

//--------------------------------------------------------------
/**
 *	動作停止
 */
//--------------------------------------------------------------
	.macro	_OBJ_PAUSE_ALL
	.short	EV_SEQ_OBJ_PAUSE_ALL
	.endm

//--------------------------------------------------------------
/**
 *	OBJ会話イベント用　動作停止
 */
//--------------------------------------------------------------
	.macro	_TALK_OBJ_PAUSE_ALL
	.short	EV_SEQ_TALK_OBJ_PAUSE_ALL
	.endm

//--------------------------------------------------------------
/**
 *	動作再開
 */
//--------------------------------------------------------------
	.macro	_OBJ_PAUSE_CLEAR_ALL
	.short	EV_SEQ_OBJ_PAUSE_CLEAR_ALL
	.endm

//--------------------------------------------------------------
/**
 *	話しかけたOBJを自機方向へ振り向き
 */
//--------------------------------------------------------------
	.macro	_TURN_HERO_SITE
	.short	EV_SEQ_OBJ_TURN
	.endm

//--------------------------------------------------------------
/**
 *	OBJに対して話し掛け開始(主人公に対して振り向き有り)
 */
//--------------------------------------------------------------
  .macro _TALK_OBJ_START
//  _SE_PLAY SEQ_SE_DP_SELECT
//  _SE_PLAY SEQ_SE_DP_SELECT11
//  _SE_PLAY SEQ_SE_DP_TALK2
	_OBJ_PAUSE_ALL
	_TURN_HERO_SITE
	.endm

//--------------------------------------------------------------
/**
 *	POS,SCENE_CHANGE_LABELに対して開始
 *	(TALK_STARTを使用すると、会話開始の音がなってしまうので分けた)
 */
//--------------------------------------------------------------
	.macro	_EVENT_START
	_OBJ_PAUSE_ALL
	.endm

//--------------------------------------------------------------
/**
 *	POS,SCENE_CHANGE_LABELに対して終了
 */
//--------------------------------------------------------------
	.macro	_EVENT_END
	_OBJ_PAUSE_CLEAR_ALL
	.endm

//--------------------------------------------------------------
/**
 *	OBJに対して話し掛け開始(主人公に対して振り向き無し)
 */
//--------------------------------------------------------------
  .macro	_TALK_OBJ_START_TURN_NOT
//  _SE_PLAY SEQ_SE_DP_SELECT
//  _SE_PLAY SEQ_SE_DP_SELECT11
  _OBJ_PAUSE_ALL
  .endm

//--------------------------------------------------------------
/**
 *	OBJに対して話し掛け終了
 */
//--------------------------------------------------------------
	.macro	_TALK_OBJ_END
	_OBJ_PAUSE_CLEAR_ALL
	.endm

//======================================================================
/**
 *	switch関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	switch 〜 case 構文
 *
 *  スクリプト制御ワークで確保されるワーク(SCWK_REG0)を使用しているので、
 *	FLAG_CHANGE,INIT_CHANGEなどでは使用できません！
 *	SCENE_CHANGEは使用できます。
 */
//--------------------------------------------------------------
	.macro	_SWITCH wk
	_LDWK	SCWK_REG0,\wk
	.endm

	.macro	_CASE_JUMP	val,adr
	_CMPVAL	SCWK_REG0,\val
	_IF_JUMP	EQ,\adr
	.endm

//--------------------------------------------------------------
/**
 * スクリプトウィンドウ表示中にBキャンセル
 */
//--------------------------------------------------------------
	.macro	_CASE_CANCEL	adr
	_CMPVAL	SCWK_REG0,EV_WIN_B_CANCEL
	_IF_JUMP	EQ,\adr
	.endm

	.macro	_FLD_TALKWIN
	.short EV_SEQ_TALKWIN
	.endm

#if 0
//--------------------------------------------------------------
/**
 *	待機アイコン表示
 */
//--------------------------------------------------------------
	.macro	_ADD_WAITICON
	.short	EV_SEQ_WAITICON_ADD
	.endm

//--------------------------------------------------------------
/**
 *	待機アイコン消去
 */
//--------------------------------------------------------------
	.macro	_DEL_WAITICON
	.short	EV_SEQ_WAITICON_DEL
	.endm
#endif

//======================================================================
/*
 *  特殊スクリプト関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *  特殊スクリプト終了
 */
//--------------------------------------------------------------
.macro  _SP_EVENT_DATA_END
.byte SP_SCRID_NONE
.endm

//======================================================================
/*
 *「はい、いいえ」ウィンドウ関連
 */
//======================================================================
//--------------------------------------------------------------
/**
 *	はい、いいえ選択
 */
//--------------------------------------------------------------
	.macro	_YES_NO_WIN ret_wk
	.short	EV_SEQ_YES_NO_WIN
	.short	\ret_wk
	.endm

//--------------------------------------------------------------
/**
 *	言語ID切り替え
 */
//--------------------------------------------------------------
  .macro  _CHG_LANGID
  .short  EV_SEQ_CHG_LANGID
  .endm

//======================================================================
//  文字列関連
//======================================================================
//-----------------------------------------------------------------------------
/**
 *	主人公名
 */
//-----------------------------------------------------------------------------
	.macro	_PLAYER_NAME	idx
	.short	EV_SEQ_PLAYER_NAME
	.byte	\idx
	.endm

//=============================================================================
//  イベントフラグ関連
//=============================================================================
//-----------------------------------------------------------------------------
/**
 *	フラグのセット
 */
//-----------------------------------------------------------------------------
	.macro	_FLAG_SET num
	.short	EV_SEQ_FLAG_SET
	.short	\num
	.endm

	//到着フラグセット
	.macro	_ARRIVE_FLAG_SET num
	_FLAG_SET	(\num + SYS_FLAG_ARRIVE_START)
	.endm

//-----------------------------------------------------------------------------
/**
 *	フラグのリセット
 */
//-----------------------------------------------------------------------------
	.macro	_FLAG_RESET num
	.short	EV_SEQ_FLAG_RESET
	.short	\num
	.endm

//-----------------------------------------------------------------------------
/**
 *	フラグチェック
 */
//-----------------------------------------------------------------------------
	.macro	_FLAG_CHECK num
	.short	EV_SEQ_FLAG_CHECK
	.short	\num
	.endm

	//フラグONの時に分岐(JUMP)
	.macro	_IF_FLAGON_JUMP num,adrs
	_FLAG_CHECK \num
	_IF_JUMP	FLGON,\adrs
	.endm

	//フラグOFFの時に分岐(JUMP)
	.macro	_IF_FLAGOFF_JUMP num,adrs
	_FLAG_CHECK \num
	_IF_JUMP	FLGOFF,\adrs
	.endm

	//フラグONの時に分岐(CALL)
	.macro	_IF_FLAGON_CALL num,adrs
	_FLAG_CHECK \num
	_IF_CALL	FLGON,\adrs
	.endm

	//フラグOFFの時に分岐(CALL)
	.macro	_IF_FLAGOFF_CALL num,adrs
	_FLAG_CHECK \num
	_IF_CALL	FLGOFF,\adrs
	.endm

//-----------------------------------------------------------------------------
/**
 * ワークの値をフラグナンバーとしてチェックする！
 */
//-----------------------------------------------------------------------------
	.macro	_FLAG_CHECK_WK wk,ret_wk
	.short	EV_SEQ_FLAG_CHECK_WK
	.short	\wk
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 * ワークの値をフラグナンバーとしてセットする！
 */
//-----------------------------------------------------------------------------
	.macro	_FLAG_SET_WK wk
	.short	EV_SEQ_FLAG_SET_WK
	.short	\wk
	.endm

//======================================================================
//  ワーク操作関連
//======================================================================
//-----------------------------------------------------------------------------
/**
 *	ワークに値を足す
 */
//-----------------------------------------------------------------------------
	.macro	_ADD_WK wk,num
	.short	EV_SEQ_ADD_WK
	.short	\wk
	.short	\num
	.endm

//-----------------------------------------------------------------------------
/**
 *	ワークから値を引く
 */
//-----------------------------------------------------------------------------
	.macro	_SUB_WK wk,num
	.short	EV_SEQ_SUB_WK
	.short	\wk
	.short	\num
	.endm

//-----------------------------------------------------------------------------
/**
 *	ワークに値を代入
 */
//-----------------------------------------------------------------------------
	.macro	_LDVAL	wk,val
	.short	EV_SEQ_LD_WK_VAL
	.short	\wk
	.short	\val
	.endm

//-----------------------------------------------------------------------------
/**
 *	ワークにワークの値を代入
 */
//-----------------------------------------------------------------------------
	.macro	_LDWK	wk1,wk2
	.short	EV_SEQ_LD_WK_WK
	.short	\wk1
	.short	\wk2
	.endm

//-----------------------------------------------------------------------------
/**
 *	ワークに値かワークの値を代入
 */
//-----------------------------------------------------------------------------
	.macro	_LDWKVAL	wk1,wk2
	.short	EV_SEQ_LD_WK_WKVAL
	.short	\wk1
	.short	\wk2
	.endm


//======================================================================
//  視線トレーナー関連
//======================================================================
//-----------------------------------------------------------------------------
/**
 *	視線：トレーナー移動呼び出し
 */
//-----------------------------------------------------------------------------
	.macro	_EYE_TRAINER_MOVE_SET	pos
	.short	EV_SEQ_EYE_TRAINER_MOVE_SET
	.short	\pos
	.endm
 
//-----------------------------------------------------------------------------
/**
 *	視線：トレーナー移動　シングル
 */
//-----------------------------------------------------------------------------
	.macro	_EYE_TRAINER_MOVE_SINGLE pos
	.short	EV_SEQ_EYE_TRAINER_MOVE_SINGLE
	.short	\pos
	.endm
 
//-----------------------------------------------------------------------------
/**
 *	視線：トレーナー移動　ダブル
 */
//-----------------------------------------------------------------------------
	.macro	_EYE_TRAINER_MOVE_DOUBLE
	.short	EV_SEQ_EYE_TRAINER_MOVE_DOUBLE
	.endm

//-----------------------------------------------------------------------------
/**
 *	視線：トレーナータイプ取得
 */
//-----------------------------------------------------------------------------
	.macro	_EYE_TRAINER_TYPE_GET ret_wk
	.short	EV_SEQ_EYE_TRAINER_TYPE_GET
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	視線：トレーナーID取得
 */
//-----------------------------------------------------------------------------
	.macro	_EYE_TRAINER_ID_GET	pos,ret_wk
	.short	EV_SEQ_EYE_TRAINER_ID_GET
	.short	\pos
	.short	\ret_wk
	.endm

//======================================================================
//  トレーナーバトル関連
//======================================================================
//-----------------------------------------------------------------------------
/**
 *	トレーナーID取得
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_ID_GET	wk
	.short	EV_SEQ_TRAINER_ID_GET
	.short	\wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナー戦闘呼び出し
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_BTL_SET	tr_id_0,tr_id_1
	.short	EV_SEQ_TRAINER_BTL_SET
	.short	\tr_id_0
	.short	\tr_id_1
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナー戦闘（マルチバトル）呼び出し
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_MULTI_BTL_SET	partner_id, tr_id_0, tr_id_1
	.short	EV_SEQ_TRAINER_MULTI_BTL_SET
	.short	\partner_id
	.short	\tr_id_0
	.short	\tr_id_1
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナー会話呼び出し
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_MSG_SET	tr_id,kind_id
	.short	EV_SEQ_TRAINER_MSG_SET
	.short	\tr_id
	.short	\kind_id
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナー会話の種類取得
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_TALK_TYPE_GET	wk1,wk2,wk3
	.short	EV_SEQ_TRAINER_TALK_TYPE_GET
	.short	\wk1
	.short	\wk2
	.short	\wk3
	.endm

//-----------------------------------------------------------------------------
/**
 *	再戦トレーナー会話の種類取得
 */
//-----------------------------------------------------------------------------
	.macro	_REVENGE_TRAINER_TALK_TYPE_GET	wk1,wk2,wk3
	.short	EV_SEQ_REVENGE_TRAINER_TALK_TYPE_GET
	.short	\wk1
	.short	\wk2
	.short	\wk3
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナータイプ取得
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_TYPE_GET	ret_wk
	.short	EV_SEQ_TRAINER_TYPE_GET
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナーBGMセット
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_BGM_SET	tr_id
	.short	EV_SEQ_TRAINER_BGM_SET
	.short	\tr_id
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナー敗北
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_LOSE
	.short	EV_SEQ_LOSE
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナー敗北チェック
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_LOSE_CHECK ret_wk
	.short	EV_SEQ_LOSE_CHECK
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	敗北処理
 */
//-----------------------------------------------------------------------------
	.macro	_NORMAL_LOSE
	.short	EV_SEQ_LOSE
	.endm

//-----------------------------------------------------------------------------
/**
 *	敗北チェック
 */
//-----------------------------------------------------------------------------
	.macro	_LOSE_CHECK	ret_wk
	.short	EV_SEQ_LOSE_CHECK
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	隠しポケモン再戦可不可チェック
 */
//-----------------------------------------------------------------------------
	.macro	_SEACRET_POKE_RETRY_CHECK ret_wk
	.short	EV_SEQ_SEACRET_POKE_RETRY_CHECK
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	配布ポケモン再戦可不可チェック
 */
//-----------------------------------------------------------------------------
	.macro	_HAIFU_POKE_RETRY_CHECK ret_wk
	.short	EV_SEQ_HAIFU_POKE_RETRY_CHECK
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	手持ちチェック 2vs2が可能か取得
 */
//-----------------------------------------------------------------------------
	.macro	_2VS2_BATTLE_CHECK ret_wk
	.short	EV_SEQ_2VS2_BATTLE_CHECK
	.short	\ret_wk
	.endm

//-----------------------------------------------------------------------------
/**
 *	デバック戦闘呼び出し
 */
//-----------------------------------------------------------------------------
	.macro	_DEBUG_BTL_SET
	.short	EV_SEQ_DEBUG_BTL_SET
	.endm

//-----------------------------------------------------------------------------
/**
 *	戦闘結果を取得
 */
//-----------------------------------------------------------------------------
	.macro	_BATTLE_RESULT_GET ret_wk
	.short	EV_SEQ_BATTLE_RESULT_GET
	.short	\ret_wk
	.endm
  
  
//-----------------------------------------------------------------------------
/**
 *	動作コード取得
 */
//-----------------------------------------------------------------------------
	.macro	_MOVE_CODE_GET	ret_wk,obj_id
	.short	EV_SEQ_MOVE_CODE_GET
	.short	\ret_wk
	.short	\obj_id
	.endm


//======================================================================
//  トレーナーフラグ
//======================================================================
//-----------------------------------------------------------------------------
/**
 *	トレーナーフラグのセット
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_FLAG_SET tr_id
	.short	EV_SEQ_TRAINER_FLAG_SET
	.short	\tr_id
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナーフラグのリセット
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_FLAG_RESET tr_id
	.short	EV_SEQ_TRAINER_FLAG_RESET
	.short	\tr_id
	.endm

//-----------------------------------------------------------------------------
/**
 *	トレーナーフラグチェック
 */
//-----------------------------------------------------------------------------
	.macro	_TRAINER_FLAG_CHECK tr_id
	.short	EV_SEQ_TRAINER_FLAG_CHECK
	.short	\tr_id
	.endm

	//フラグONの時に分岐(JUMP)
	.macro	_IF_TR_FLAGON_JUMP tr_id,adrs
	_TRAINER_FLAG_CHECK \tr_id
	_IF_JUMP	FLGON,\adrs
	.endm

	//フラグOFFの時に分岐(JUMP)
	.macro	_IF_TR_FLAGOFF_JUMP tr_id,adrs
	_TRAINER_FLAG_CHECK \tr_id
	_IF_JUMP	FLGOFF,\adrs
	.endm

	//フラグONの時に分岐(CALL)
	.macro	_IF_TR_FLAGON_CALL tr_id,adrs
	_TRAINER_FLAG_CHECK \tr_id
	_IF_CALL	FLGON,\adrs
	.endm

	//フラグOFFの時に分岐(CALL)
	.macro	_IF_TR_FLAGOFF_CALL tr_id,adrs
	_TRAINER_FLAG_CHECK \tr_id
	_IF_CALL	FLGOFF,\adrs
	.endm
