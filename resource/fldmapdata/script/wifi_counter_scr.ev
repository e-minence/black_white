//======================================================================
//                wifi_counter_scr.ev
//
//    スクリプトファイル：wifi_counter_scr用
//
//======================================================================

  .text

  .include  "scr_seq_def.h"
  .include  "msg_wifi_counter_scr.h"
  .include  "wifi_counter_scr_local.h"
  .include  "btl_util_scr_local.h"
  .include  "pokecen_scr_def.h"

  .include  "../../../prog/include/system/timezone.h" //時間帯定義

//--------------------------------------------------------------
//               スクリプト本体
//--------------------------------------------------------------
//--------------------------------------------------------------
//               スクリプトテーブル
//--------------------------------------------------------------
_EVENT_DATA    ev_wifi_counter

_EVENT_DATA_END

DEFINE_LOCAL  reg_return
DEFINE_LOCAL  reg_param

{ //WIFI_COUNTER

//==============================================================
/// 
///
///       ポケモンセンター　WI-FI受付                   
///
///
//==============================================================
EVENT_START   ev_wifi_counter
{
  _TALK_OBJ_START()
  _CALL sub_wifi_counter_main
}
EVENT_END


//==============================================================
//サブルーチン：受付メイン
//==============================================================
sub_wifi_counter_main:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop

  //C-Gear取得チェック
  IF FLAG_OFF( FE_CGEAR_GET ) THEN
    _SYSWIN_MSG_DOWN( msg_wifi_counter_err01 ) //また後でお越しください
    _LAST_KEYWAIT()
    _SYSWIN_CLOSE()
    _RET
  ENDIF
 
  //ダメタマチェック
  _GET_PARTY_POKE_COUNT( i_ret, POKECOUNT_MODE_ONLY_DAME_EGG)
  IF $i_ret != 0 THEN
    _SYSWIN_MSG_DOWN( msg_wifi_counter_err02 ) //手持ちに連れて行けないポケモンがいます
    _LAST_KEYWAIT()
    _SYSWIN_CLOSE()
    _RET
  ENDIF

  _SYSWIN_MSG_DOWN( msg_wifi_counter_00 ) //Wi-Fiコネクションへようこそ
  _SYSWIN_MSG_DOWN( msg_wifi_counter_01 ) //Wi-Fiカウンターをご利用ですか？
  $i_seq = SEQ_MAIN_MENU
  
  //フィールド通信切断
//  _FIELD_COMM_EXIT_EVENT_CALL( i_ret )

  $i_loop = TRUE
  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_MAIN_MENU THEN //メニュー表示
      _CALL sub_wifi_counter_main_menu
      $i_seq = $reg_return

    CASE SEQ_COUNTER_EXP THEN
      _SYSWIN_MSG_DOWN( msg_wifi_counter_07 ) //Wi-Fiコネクションでは…
      $i_seq = SEQ_MAIN_MENU

    CASE SEQ_RANDOM_MATCH THEN
      _CALL sub_wifi_random_match //ランダムマッチ
      $i_seq = $reg_return

    CASE SEQ_GLOBAL_TERMINAL THEN
      _CALL sub_wifi_global_terminal  //グローバルターミナル
      $i_seq = $reg_return
    
    CASE SEQ_GEO_NET THEN
      _CALL sub_wifi_geo_net  //ジオネット
      $i_seq = $reg_return  

    CASE SEQ_GOODBYE THEN
      _SYSWIN_MSG_DOWN( msg_wifi_counter_02 ) //それではまたお越しください
      $i_seq = SEQ_EXIT
   
    CASE SEQ_RETRY THEN
      _SYSWIN_MSG_DOWN( msg_wifi_counter_err03 ) //もう一度最初からやり直してください
      $i_seq = SEQ_EXIT

    CASE SEQ_EXIT THEN
      _LAST_KEYWAIT()
      _SYSWIN_CLOSE()
      $i_loop = FALSE

    //無限ループを避けるために、とりあえず
    DEFAULT
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE
}
_RET

//==============================================================
//サブルーチン：メニュー表示
//==============================================================
sub_wifi_counter_main_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・ランダムマッチ/GTS/ジオネット/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win01, SEQ_RANDOM_MATCH )	  //ランダムマッチ
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win02, SEQ_GLOBAL_TERMINAL )	//グローバルターミナル
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win03, SEQ_GOODBYE )	        //ジオネット
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win04, SEQ_COUNTER_EXP )	    //説明を聞く
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win05, SEQ_GOODBYE )        	//やめる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_GOODBYE
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//==============================================================
//サブルーチン：フィールド通信切断処理
//==============================================================
sub_wifi_counter_field_comm_exit_check:
{
  DEFINE_LOCAL  i_ret

  //フィールド通信切断
  _FIELD_COMM_EXIT_EVENT_CALL( i_ret )

  IF $i_ret == SCR_FIELD_COMM_EXIT_CANCEL THEN
    $reg_return = SEQ_GOODBYE
  ELSIF $i_ret == SCR_FIELD_COMM_EXIT_ERROR THEN
    $reg_return = SEQ_RETRY
  ELSE
    $reg_return = 0
  ENDIF
}
_RET

//==============================================================
//サブルーチン：ランダムマッチメイン
//==============================================================
{ //RANDOM_MATCH_START
DEFINE_LOCAL lwk_rm_regu_idx
DEFINE_LOCAL lwk_rm_regulation
DEFINE_LOCAL lwk_rm_party

sub_wifi_random_match:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop
  
  //フィールド通信切断
  _CALL sub_wifi_counter_field_comm_exit_check
  IF $reg_return != 0 THEN
    _RET
  ENDIF

  _SYSWIN_MSG_DOWN( msg_rndmatch_01 )

  $i_seq = SEQ_SUB_RNDMATCH_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_RNDMATCH_MENU THEN
      _CALL sub_rndmatch_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_RNDMATCH_EXP THEN
      _CALL sub_rndmatch_exp  //説明を聞く
      $i_seq = $reg_return
    
    CASE SEQ_SUB_RNDMATCH_TRY_SELECT THEN
      _CALL sub_rndmatch_try_select  //挑戦するコースを選ぶ
      $i_seq = $reg_return
 
    CASE SEQ_SUB_RNDMATCH_TRY_CHECK THEN
      _CALL sub_rndmatch_try_check  //挑戦するか確認
      $i_seq = $reg_return
 
    CASE SEQ_SUB_RNDMATCH_TRY THEN
      _CALL sub_rndmatch_try  //挑戦
      $i_seq = $reg_return

    CASE SEQ_SUB_RNDMATCH_RETURN THEN
      //Wi-Fiカウンターをご利用ですか？
      _SYSWIN_MSG_DOWN( msg_wifi_counter_01 )
      $reg_return = SEQ_MAIN_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_RNDMATCH_EXIT THEN
      $reg_return = SEQ_GOODBYE
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：メインメニュー表示
//--------------------------------------------------------------
sub_rndmatch_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・挑戦する/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_rndmatch_01_win01, SEQ_SUB_RNDMATCH_TRY_SELECT) //挑戦する
	_BMPMENU_MAKE_LIST( msg_rndmatch_01_win02, SEQ_SUB_RNDMATCH_EXP )	      //説明を聞く
	_BMPMENU_MAKE_LIST( msg_rndmatch_01_win03, SEQ_SUB_RNDMATCH_RETURN )    //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_RNDMATCH_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：説明を聞く
//--------------------------------------------------------------
sub_rndmatch_exp:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop
  DEFINE_LOCAL  i_msg

  //どの説明を聞きますか
  _SYSWIN_MSG_DOWN( msg_rndmatch_02 )

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //分岐・預ける/探す/わかった
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_rndmatch_02_win01, 0 )   //ランダムマッチに就いて
	  _BMPMENU_MAKE_LIST( msg_rndmatch_02_win02, 1 )   //レーティングモードについて
	  _BMPMENU_MAKE_LIST( msg_rndmatch_02_win03, 2 )   //フリーモードについて
	  _BMPMENU_MAKE_LIST( msg_rndmatch_02_win04, 3 )   //もどる
		
	  //メニュー表示
  	_BMPMENU_START()

    IF $i_ret < 3 THEN
      $i_msg = msg_rndmatch_02_exp01
      $i_msg += $i_ret
      _SYSWIN_MSG_DOWN( i_msg )
    ELSE
      $i_loop = FALSE
    ENDIF
  ENDWHILE

  //ランダムマッチに挑戦しますか？
  _SYSWIN_MSG_DOWN( msg_rndmatch_01 )
  $reg_return = SEQ_SUB_RNDMATCH_MENU
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：挑戦するコースを選ぶ
//--------------------------------------------------------------
sub_rndmatch_try_select:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_msg

  //どの対戦をしますか？
  _SYSWIN_MSG_DOWN( msg_rndmatch_03 )

  //分岐・シングル/ダブル/トリプル/ローテ/シューター/もどる
  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  _BMPMENU_MAKE_LIST( msg_rndmatch_03_win01, 0 )   //シングル
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win02, 1 )   //ダブル
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win03, 2 )   //トリプル
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win04, 3 )   //ローテーション
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win05, 4 )   //シューター
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win06, 5 )   //もどる
		
  //メニュー表示
	_BMPMENU_START()

  IF $i_ret > 4 THEN
    $reg_return = SEQ_SUB_RNDMATCH_RETURN
    _RET
  ENDIF
  //レギュレーション保存
  $lwk_rm_regu_idx = $i_ret
  $lwk_rm_regulation = REG_RND_SINGLE
  $lwk_rm_regulation += $i_ret
  $reg_return = SEQ_SUB_RNDMATCH_TRY_CHECK
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：挑戦するコースを選ぶ
//--------------------------------------------------------------
sub_rndmatch_try_check:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_msg

  //○○に挑戦しますか？
  $i_msg = msg_rndmatch_04_01
  $i_msg += $lwk_rm_regu_idx
  _SYSWIN_MSG_DOWN( i_msg )

  //分岐・決定/ルールを聞く/もどる
  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
  _BMPMENU_MAKE_LIST( msg_rndmatch_04_win01, 0 )   //決定
	_BMPMENU_MAKE_LIST( msg_rndmatch_04_win02, 1 )   //ルールを聞く
	_BMPMENU_MAKE_LIST( msg_rndmatch_04_win03, 2 )   //戻る
  
  //メニュー表示
	_BMPMENU_START()

  IF $i_ret == 0 THEN
    //決定
    $reg_return = SEQ_SUB_RNDMATCH_TRY
  ELSIF $i_ret == 1 THEN
    //ルールを聞く
    $i_msg = msg_rndmatch_04_exp01
    $i_msg += $lwk_rm_regu_idx
    _SYSWIN_MSG_DOWN( i_msg )
    
    $reg_return = SEQ_SUB_RNDMATCH_TRY_CHECK
  ELSE
    $reg_return = SEQ_SUB_RNDMATCH_RETURN
  ENDIF
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：挑戦する
//--------------------------------------------------------------
sub_rndmatch_try:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_msg

  //手持ちかバトルボックスか選ぶウィンドウ表示(メンバチェック込み)
  _BTL_UTIL_PARTY_SELECT_CALL( lwk_rm_regulation, i_ret )

  IF $i_ret == BTL_UTIL_PARTY_SELECT_CANCEL THEN
    $reg_return = SEQ_SUB_RNDMATCH_RETURN
    _RET
  ELSIF $i_ret == BTL_UTIL_PARTY_SELECT_NG THEN
    //参加できるポケモンがいません
    _BTL_UTIL_PARTY_REGULATION_NG_MSG_CALL( lwk_rm_regulation )
    $reg_return = SEQ_SUB_RNDMATCH_EXIT
    _RET
  ENDIF
  
  //パーティ選択保存
  $lwk_rm_party = $i_ret
  
  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )

  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_SUB_RNDMATCH_EXIT
    _RET
  ENDIF
  
  //入り口移動アニメ
  _CALL sub_anm_wifi_counter_in

  _FIELD_CLOSE()
  _WIFI_RANDOM_MATCH_EVENT_CALL()
  _FIELD_OPEN()

  _CALL sub_anm_wifi_counter_out

  $reg_return = SEQ_SUB_RNDMATCH_EXIT
}
_RET


} //RANDOM_MATCH_END

//==============================================================
//サブルーチン：グローバルターミナル
//==============================================================
sub_wifi_global_terminal:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop
  
  //フィールド通信切断
  _CALL sub_wifi_counter_field_comm_exit_check
  IF $reg_return != 0 THEN
    _RET
  ENDIF

  //グローバルターミナルをご利用ですか？
  _SYSWIN_MSG_DOWN( msg_gterminal_01 )

  $i_seq = SEQ_SUB_GTERMINAL_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_GTERMINAL_MENU THEN
      _CALL sub_gterminal_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_GTERMINAL_EXP THEN
      _SYSWIN_MSG_DOWN( msg_gterminal_exp01 ) //説明を聞く
      $i_seq = SEQ_SUB_GTERMINAL_MENU
 
    CASE SEQ_SUB_GTERMINAL_GTS THEN
      _CALL sub_gterminal_gts  //GTS
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTERMINAL_GTS_NEGO THEN
      _CALL sub_gterminal_gts_nego  //GTSネゴシエーション
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTERMINAL_BTL_VIDEO THEN
      _CALL sub_gterminal_btl_video  //バトルビデオ
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTERMINAL_MUSICAL THEN
      _CALL sub_gterminal_musical  //ミュージカル
      $i_seq = $reg_return

    CASE SEQ_SUB_GTERMINAL_RETURN THEN
      //Wi-Fiカウンターをご利用ですか？
      _SYSWIN_MSG_DOWN( msg_wifi_counter_01 )
      $reg_return = SEQ_MAIN_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTERMINAL_EXIT THEN
      $reg_return = SEQ_GOODBYE
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：メニュー表示
//--------------------------------------------------------------
sub_gterminal_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・GTS/バトルビデオ/ミュージカルショット/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_gterminal_win01, SEQ_SUB_GTERMINAL_GTS)	        //GTS
	_BMPMENU_MAKE_LIST( msg_gterminal_win02, SEQ_SUB_GTERMINAL_GTS_NEGO)	  //GTSネゴシエーション
	_BMPMENU_MAKE_LIST( msg_gterminal_win03, SEQ_SUB_GTERMINAL_BTL_VIDEO )	//バトルビデオ
	_BMPMENU_MAKE_LIST( msg_gterminal_win04, SEQ_SUB_GTERMINAL_MUSICAL )    //ミュージカルショット
	_BMPMENU_MAKE_LIST( msg_gterminal_win05, SEQ_SUB_GTERMINAL_EXP )	      //説明を聞く
	_BMPMENU_MAKE_LIST( msg_gterminal_win06, SEQ_SUB_GTERMINAL_RETURN )     //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_GTERMINAL_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS
//--------------------------------------------------------------
sub_gterminal_gts:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop

  _SYSWIN_MSG_DOWN( msg_gterminal_gts_01 )

  $i_seq = SEQ_SUB_GTERMINAL_GTS_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_GTERMINAL_GTS_MENU THEN
      _CALL sub_gterminal_gts_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_GTERMINAL_GTS_EXP THEN
      _CALL sub_gterminal_gts_exp  //説明を聞く
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTERMINAL_GTS_EXCHANGE THEN
      _CALL sub_gterminal_gts_exchange  //交換
      $i_seq = $reg_return

    CASE SEQ_SUB_GTERMINAL_GTS_RETURN THEN
      //Wi-Fiカウンターをご利用ですか？
      _SYSWIN_MSG_DOWN( msg_wifi_counter_01 )
      $reg_return = SEQ_SUB_GTERMINAL_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTERMINAL_GTS_EXIT THEN
      $reg_return = SEQ_SUB_GTERMINAL_EXIT
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE

}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS：メニュー表示
//--------------------------------------------------------------
sub_gterminal_gts_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・GTS/バトルビデオ/ミュージカルショット/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_gterminal_gts_win01, SEQ_SUB_GTERMINAL_GTS_EXCHANGE )    //交換
	_BMPMENU_MAKE_LIST( msg_gterminal_gts_win02, SEQ_SUB_GTERMINAL_GTS_EXP )	      //説明を聞く
	_BMPMENU_MAKE_LIST( msg_gterminal_gts_win03, SEQ_SUB_GTERMINAL_GTS_RETURN )     //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_GTERMINAL_GTS_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS：説明を聞く
//--------------------------------------------------------------
sub_gterminal_gts_exp:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop

  _SYSWIN_MSG_DOWN( msg_gterminal_gts_exp )

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //分岐・預ける/探す/わかった
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_gterminal_gts_exp_win01, 0 )   //預ける
	  _BMPMENU_MAKE_LIST( msg_gterminal_gts_exp_win02, 1 )   //探す
	  _BMPMENU_MAKE_LIST( msg_gterminal_gts_exp_win03, 2 )   //わかった
		
	  //メニュー表示
  	_BMPMENU_START()

    IF $i_ret == 0 THEN
      _SYSWIN_MSG_DOWN( msg_gterminal_gts_exp_leave )
    ELSIF $i_ret == 1 THEN
      _SYSWIN_MSG_DOWN( msg_gterminal_gts_exp_search )
    ELSE
      $i_loop = FALSE
    ENDIF
  ENDWHILE

  //ポケモングローバル交換しますか？
  _SYSWIN_MSG_DOWN( msg_gterminal_gts_01 )
  $reg_return = SEQ_SUB_GTERMINAL_MENU
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS：交換
//--------------------------------------------------------------
sub_gterminal_gts_exchange:
{
  DEFINE_LOCAL  i_ret
  
  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )
  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_SUB_GTERMINAL_GTS_EXIT
    _RET
  ENDIF
 
  //入り口移動アニメ
  _CALL sub_anm_wifi_counter_in

  _FIELD_CLOSE() 
//  _WIFI_GTS_EVENT_CALL()
  _FIELD_OPEN() 

  _CALL sub_anm_wifi_counter_out

  $reg_return = SEQ_SUB_GTERMINAL_GTS_EXIT
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO
//--------------------------------------------------------------
sub_gterminal_gts_nego:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop

  _SYSWIN_MSG_DOWN( msg_gterminal_gtsnego_01 )

  $i_seq = SEQ_SUB_GTERMINAL_GTS_NEGO_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_GTERMINAL_GTS_NEGO_MENU THEN
      _CALL sub_gterminal_gts_nego_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_GTERMINAL_GTS_NEGO_EXP THEN
      _CALL sub_gterminal_gts_nego_exp  //説明を聞く
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTERMINAL_GTS_NEGO_EXCHANGE THEN
      _CALL sub_gterminal_gts_nego_exchange  //交換
      $i_seq = $reg_return

    CASE SEQ_SUB_GTERMINAL_GTS_NEGO_RETURN THEN
      //Wi-Fiカウンターをご利用ですか？
      _SYSWIN_MSG_DOWN( msg_wifi_counter_01 )
      $reg_return = SEQ_SUB_GTERMINAL_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTERMINAL_GTS_NEGO_EXIT THEN
      $reg_return = SEQ_SUB_GTERMINAL_EXIT
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE

}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO：メニュー表示
//--------------------------------------------------------------
sub_gterminal_gts_nego_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・交換/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_gterminal_gtsnego_win01, SEQ_SUB_GTERMINAL_GTS_NEGO_EXCHANGE )    //交換
	_BMPMENU_MAKE_LIST( msg_gterminal_gtsnego_win02, SEQ_SUB_GTERMINAL_GTS_NEGO_EXP )	      //説明を聞く
	_BMPMENU_MAKE_LIST( msg_gterminal_gtsnego_win03, SEQ_SUB_GTERMINAL_GTS_NEGO_RETURN )     //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_GTERMINAL_GTS_NEGO_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO：説明を聞く
//--------------------------------------------------------------
sub_gterminal_gts_nego_exp:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop

  _SYSWIN_MSG_DOWN( msg_gterminal_gtsnego_exp )

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //分岐・預ける/探す/わかった
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_gterminal_gtsnego_exp_win01, 0 )   //預ける
	  _BMPMENU_MAKE_LIST( msg_gterminal_gtsnego_exp_win02, 1 )   //探す
	  _BMPMENU_MAKE_LIST( msg_gterminal_gtsnego_exp_win03, 2 )   //わかった
		
	  //メニュー表示
  	_BMPMENU_START()

    IF $i_ret == 0 THEN
      _SYSWIN_MSG_DOWN( msg_gterminal_gtsnego_exp01 )
    ELSIF $i_ret == 1 THEN
      _SYSWIN_MSG_DOWN( msg_gterminal_gtsnego_exp02 )
    ELSE
      $i_loop = FALSE
    ENDIF
  ENDWHILE

  //ネゴシエーションに入りますか？
  _SYSWIN_MSG_DOWN( msg_gterminal_gtsnego_01 )
  $reg_return = SEQ_SUB_GTERMINAL_MENU
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO：交換
//--------------------------------------------------------------
sub_gterminal_gts_nego_exchange:
{
  DEFINE_LOCAL  i_ret
  
  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )
  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_SUB_GTERMINAL_GTS_NEGO_EXIT
    _RET
  ENDIF
 
  //入り口移動アニメ
  _CALL sub_anm_wifi_counter_in

  _WIFI_GTS_NEGO_EVENT_CALL()
  
  _CALL sub_anm_wifi_counter_out

  $reg_return = SEQ_SUB_GTERMINAL_GTS_NEGO_EXIT
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：バトルビデオ
//--------------------------------------------------------------
sub_gterminal_btl_video:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop

  _SYSWIN_MSG_DOWN( msg_gterminal_btlvideo_01 )

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //分岐・バトルビデオを見る/説明を聞く/やめる
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_gterminal_btlvideo_win01, 0 )   //みる
	  _BMPMENU_MAKE_LIST( msg_gterminal_btlvideo_win02, 1 )   //説明を聞く
	  _BMPMENU_MAKE_LIST( msg_gterminal_btlvideo_win03, 2 )   //戻る
		
	  //メニュー表示
  	_BMPMENU_START()

    IF $i_ret == 0 THEN
      $reg_param = SCRCMD_BTL_RECORDER_MODE_VIDEO
      _CALL sub_gterminal_btl_recorder_call
      IF $reg_return == SEQ_SUB_GTERMINAL_EXIT THEN
        $i_loop = FALSE
      ENDIF
    ELSIF $i_ret == 1 THEN
      _SYSWIN_MSG_DOWN( msg_gterminal_btlvideo_exp )  //説明
    ELSE
      //Wi-Fiコネクションをご利用ですか？
      _SYSWIN_MSG_DOWN( msg_wifi_counter_01 )
      $reg_return = SEQ_SUB_GTERMINAL_MENU
      $i_loop = FALSE
    ENDIF
  ENDWHILE
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：ミュージカルショット
//--------------------------------------------------------------
sub_gterminal_musical:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop

  _SYSWIN_MSG_DOWN( msg_gterminal_musical_01 )

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //分岐・ミュージカルショットを見る/説明を聞く/やめる
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_gterminal_musical_win01, 0 )   //みる
	  _BMPMENU_MAKE_LIST( msg_gterminal_musical_win02, 1 )   //説明を聞く
	  _BMPMENU_MAKE_LIST( msg_gterminal_musical_win03, 2 )   //戻る
		
	  //メニュー表示
  	_BMPMENU_START()

    IF $i_ret == 0 THEN
      $reg_param = SCRCMD_BTL_RECORDER_MODE_MUSICAL
      _CALL sub_gterminal_btl_recorder_call
      IF $reg_return == SEQ_SUB_GTERMINAL_EXIT THEN
        $i_loop = FALSE
      ENDIF
    ELSIF $i_ret == 1 THEN
      _SYSWIN_MSG_DOWN( msg_gterminal_musical_exp )  //説明
    ELSE
      //Wi-Fiコネクションをご利用ですか？
      _SYSWIN_MSG_DOWN( msg_wifi_counter_01 )
      $reg_return = SEQ_SUB_GTERMINAL_MENU
      $i_loop = FALSE
    ENDIF
  ENDWHILE
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：バトルビデオ・ミュージカルショット　呼び出し
//--------------------------------------------------------------
sub_gterminal_btl_recorder_call:
{
  DEFINE_LOCAL  i_ret

  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )
  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_SUB_GTERMINAL_EXIT
    _RET
  ENDIF

  _CALL sub_anm_wifi_counter_in

  _FIELD_CLOSE()
  _WIFI_BATTLE_RECORDER_EVENT_CALL( 0 )
  _FIELD_OPEN()
  
  _CALL sub_anm_wifi_counter_out
  $reg_return = SEQ_SUB_GTERMINAL_MENU
}
_RET

//==============================================================
//サブルーチン：ジオネット
//==============================================================
sub_wifi_geo_net:
{
  DEFINE_LOCAL  i_ret
  
  //フィールド通信切断
  _CALL sub_wifi_counter_field_comm_exit_check
  IF $reg_return != 0 THEN
    _RET
  ENDIF

  
  _MAP_FADE_BLACK_OUT()
  _MAP_FADE_END_CHECK()
  _SYSWIN_CLOSE()
  _FIELD_CLOSE()
  
  _FIELD_OPEN()
  _MAP_FADE_BLACK_IN()
  _MAP_FADE_END_CHECK()
  
  //Wi-Fiコネクションをご利用ですか？
  _SYSWIN_MSG_DOWN( msg_wifi_counter_01 )
  $reg_return = SEQ_MAIN_MENU
}
_RET


} //WIFI_COUNTER_END

//===================================================================================
/////////////////////////////////////////////////////////////////////////////////////
//アニメデータ
/////////////////////////////////////////////////////////////////////////////////////
//===================================================================================
//==============================================================
//部屋へ誘導
//==============================================================
sub_anm_wifi_counter_in:
{
  _SYSWIN_MSG_DOWN( msg_wifi_counter_04 )
  _SYSWIN_CLOSE()
  _CHG_COMMON_SCR SCRID_POKECEN_ELEVATOR_IN
}
_RET

//==============================================================
//部屋からでてくる
//==============================================================
sub_anm_wifi_counter_out:
{
  _CHG_COMMON_SCR SCRID_POKECEN_ELEVATOR_OUT
}
_RET

