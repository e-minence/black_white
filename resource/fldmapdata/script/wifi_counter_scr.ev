//======================================================================
//                wifi_counter_scr.ev
//    旧名Wi-Fiカウンター、新グローバルターミナル受付スクリプト
//    スクリプトファイル：wifi_counter_scr用
//
//======================================================================

  .text

  .include  "scr_seq_def.h"
  .include  "msg_wifi_counter_scr.h"
  .include  "wifi_counter_scr_local.h"
  .include  "btl_util_scr_local.h"
  .include  "pokecen_scr_def.h"

  .include  "../../../prog/include/system/timezone.h" //時間帯定義

//--------------------------------------------------------------
//               スクリプト本体
//--------------------------------------------------------------
//--------------------------------------------------------------
//               スクリプトテーブル
//--------------------------------------------------------------
_EVENT_DATA    ev_wifi_counter

_EVENT_DATA_END

DEFINE_LOCAL  reg_return
DEFINE_LOCAL  reg_param

{ //WIFI_COUNTER

//==============================================================
/// 
///
///       ポケモンセンター　WI-FI受付                   
///
///
//==============================================================
EVENT_START   ev_wifi_counter
{
  _TALK_OBJ_START()
  _CALL sub_wifi_counter_main
}
EVENT_END


//==============================================================
//サブルーチン：ハードの無線通信On/Off設定チェック
//==============================================================
sub_available_wireless_check:
{
  _BALLOONWIN_CLOSE()
  _GET_AVAILABLE_WIRELESS( SCWK_ANSWER )

  //FALSEのとき、無線通信は使えない
  IF $SCWK_ANSWER == FALSE THEN
	  //共通メッセージ呼び出し
	  _CHG_COMMON_SCR SCRID_WIRELESS_OFF_MESSAGE
    _RET
  ENDIF
}
_RET

//==============================================================
//サブルーチン：受付メイン
//==============================================================
sub_wifi_counter_main:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop

  //C-Gear取得チェック
  IF FLAG_OFF( FE_CGEAR_GET ) THEN
    _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_err01 , SCWK_TARGET_OBJID, POS_DL ) //また後でお越しください
    _LAST_KEYWAIT()
    _BALLOONWIN_CLOSE()
    _RET
  ENDIF
 
  //ダメタマチェック
  _GET_PARTY_POKE_COUNT( i_ret, POKECOUNT_MODE_ONLY_DAME_EGG )
  IF $i_ret != 0 THEN
    _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_err02 , SCWK_TARGET_OBJID, POS_DL ) //手持ちに連れて行けないポケモンがいます
    _LAST_KEYWAIT()
    _BALLOONWIN_CLOSE()
    _RET
  ENDIF

  _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_00 , SCWK_TARGET_OBJID, POS_DL ) //ようこそ!
  $i_seq = SEQ_MAIN_MENU
  
  $i_loop = TRUE
  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_MAIN_MENU THEN //メニュー表示
      _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_01 , SCWK_TARGET_OBJID, POS_DL ) //グローバルターミナルをご利用ですか？
      _CALL sub_wifi_counter_main_menu
      $i_seq = $reg_return

    CASE SEQ_COUNTER_EXP THEN
      _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_07 , SCWK_TARGET_OBJID, POS_DL ) //Wi-Fiコネクションでは…
      $i_seq = SEQ_MAIN_MENU

    CASE SEQ_RANDOM_MATCH THEN
      _CALL sub_gterminal_random_match //ランダムマッチ
      $i_seq = $reg_return
    
    CASE SEQ_GTS THEN
      _CALL sub_wifi_gts //GTS
      $i_seq = $reg_return

    CASE SEQ_MUSICAL THEN
      _CALL sub_gterminal_musical //ミュージカルショット
      $i_seq = $reg_return

    CASE SEQ_BTL_VIDEO THEN
      _CALL sub_gterminal_btl_video //バトルビデオ
      $i_seq = $reg_return

    CASE SEQ_GOODBYE THEN
      _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_02 , SCWK_TARGET_OBJID, POS_DL ) //それではまたお越しください
      $i_seq = SEQ_EXIT
   
    CASE SEQ_RETRY THEN
      _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_err03 , SCWK_TARGET_OBJID, POS_DL ) //もう一度最初からやり直してください
      $i_seq = SEQ_EXIT

    CASE SEQ_EXIT THEN
      _LAST_KEYWAIT()
      _BALLOONWIN_CLOSE()
      $i_loop = FALSE

    CASE SEQ_THROW_EXIT THEN
      $i_loop = FALSE

    //無限ループを避けるために、とりあえず
    DEFAULT
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE
}
_RET

//==============================================================
//サブルーチン：メニュー表示
//==============================================================
sub_wifi_counter_main_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・ランダムマッチ/GTS/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win01, SEQ_RANDOM_MATCH )	  //ランダムマッチ
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win02, SEQ_GTS )	            //GTS
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win03, SEQ_MUSICAL )	        //ミュージカルショット
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win04, SEQ_BTL_VIDEO )	      //バトルビデオ
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win05, SEQ_COUNTER_EXP )	    //説明を聞く
	_BMPMENU_MAKE_LIST( msg_wifi_counter_win06, SEQ_GOODBYE )        	//やめる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_GOODBYE
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//==============================================================
//サブルーチン：ランダムマッチメイン
//==============================================================
{ //RANDOM_MATCH_START
DEFINE_LOCAL lwk_rm_regu_idx
DEFINE_LOCAL lwk_rm_regulation
DEFINE_LOCAL lwk_rm_party

sub_gterminal_random_match:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop
  
  $i_seq = SEQ_SUB_RNDMATCH_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_RNDMATCH_MENU THEN
      //ランダムマッチに挑戦しますか？
      _BALLOONWIN_OBJMSG_POS( msg_rndmatch_01 , SCWK_TARGET_OBJID, POS_DL )  
      _CALL sub_rndmatch_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_RNDMATCH_EXP THEN
      _CALL sub_rndmatch_exp  //説明を聞く
      $i_seq = $reg_return
    
    CASE SEQ_SUB_RNDMATCH_TRY_SELECT THEN
      _CALL sub_rndmatch_try_select  //挑戦するコースを選ぶ
      $i_seq = $reg_return
 
    CASE SEQ_SUB_RNDMATCH_TRY_CHECK THEN
      _CALL sub_rndmatch_try_check  //挑戦するか確認
      $i_seq = $reg_return
 
    CASE SEQ_SUB_RNDMATCH_TRY THEN
      _CALL sub_rndmatch_try  //挑戦
      $i_seq = $reg_return
    
    CASE SEQ_SUB_RNDMATCH_RETRY THEN
      $reg_return = SEQ_RETRY
      $i_loop = FALSE
    
    CASE SEQ_SUB_RNDMATCH_RETURN THEN
      $reg_return = SEQ_MAIN_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_RNDMATCH_EXIT THEN
      $reg_return = SEQ_GOODBYE
      $i_loop = FALSE
    
    CASE SEQ_SUB_RNDMATCH_END THEN
      $reg_return = SEQ_THROW_EXIT
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：メインメニュー表示
//--------------------------------------------------------------
sub_rndmatch_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・挑戦する/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_rndmatch_01_win01, SEQ_SUB_RNDMATCH_TRY_SELECT) //挑戦する
	_BMPMENU_MAKE_LIST( msg_rndmatch_01_win02, SEQ_SUB_RNDMATCH_EXP )	      //説明を聞く
	_BMPMENU_MAKE_LIST( msg_rndmatch_01_win03, SEQ_SUB_RNDMATCH_RETURN )    //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_RNDMATCH_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：説明を聞く
//--------------------------------------------------------------
sub_rndmatch_exp:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop
  DEFINE_LOCAL  i_msg
    
  //ランダムマッチでは…
  _BALLOONWIN_OBJMSG_POS( msg_rndmatch_02_01 , SCWK_TARGET_OBJID, POS_DL )

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //どの説明を聞きますか
    _BALLOONWIN_OBJMSG_POS( msg_rndmatch_02_02 , SCWK_TARGET_OBJID, POS_DL )

    //分岐・預ける/探す/わかった
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_rndmatch_02_win01, 0 )   //ランダムマッチに就いて
	  _BMPMENU_MAKE_LIST( msg_rndmatch_02_win02, 1 )   //レーティングモードについて
	  _BMPMENU_MAKE_LIST( msg_rndmatch_02_win03, 2 )   //フリーモードについて
	  _BMPMENU_MAKE_LIST( msg_rndmatch_02_win04, 3 )   //もどる
		
	  //メニュー表示
  	_BMPMENU_START()

    //どの説明を聞きますか（消）
    IF $i_ret < 3 THEN
      $i_msg = msg_rndmatch_02_exp01
      $i_msg += $i_ret
      _BALLOONWIN_OBJMSG_POS( i_msg , SCWK_TARGET_OBJID, POS_DL )
    ELSE
      $i_loop = FALSE
    ENDIF
  ENDWHILE

  //メニュー表示に戻る
  $reg_return = SEQ_SUB_RNDMATCH_MENU
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：挑戦するコースを選ぶ
//--------------------------------------------------------------
sub_rndmatch_try_select:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_msg
  
  //本体無線通信設定チェック
  _CALL sub_available_wireless_check
  IF $SCWK_ANSWER == FALSE THEN
    $reg_return = SEQ_SUB_RNDMATCH_EXIT
    _RET
  ENDIF

  //どの対戦をしますか？
  _BALLOONWIN_OBJMSG_POS( msg_rndmatch_03 , SCWK_TARGET_OBJID, POS_DL )

  //分岐・シングル/ダブル/トリプル/ローテ/シューター/もどる
  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  _BMPMENU_MAKE_LIST( msg_rndmatch_03_win01, 0 )   //シングル
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win02, 1 )   //ダブル
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win03, 2 )   //トリプル
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win04, 3 )   //ローテーション
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win05, 4 )   //シューター
	_BMPMENU_MAKE_LIST( msg_rndmatch_03_win06, 5 )   //もどる
		
  //メニュー表示
	_BMPMENU_START()

  //どの対戦をしますか？
  IF $i_ret > 4 THEN
    $reg_return = SEQ_SUB_RNDMATCH_RETURN
    _RET
  ENDIF
  //レギュレーション保存
  $lwk_rm_regu_idx = $i_ret
  $lwk_rm_regulation = REG_RND_SINGLE
  $lwk_rm_regulation += $i_ret
  $reg_return = SEQ_SUB_RNDMATCH_TRY_CHECK
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：挑戦するコースを選ぶ
//--------------------------------------------------------------
sub_rndmatch_try_check:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_msg

  //○○に挑戦しますか？
  $i_msg = msg_rndmatch_04_01
  $i_msg += $lwk_rm_regu_idx
  _BALLOONWIN_OBJMSG_POS( i_msg , SCWK_TARGET_OBJID, POS_DL )

  //分岐・決定/ルールを聞く/もどる
  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
  _BMPMENU_MAKE_LIST( msg_rndmatch_04_win01, 0 )   //決定
	_BMPMENU_MAKE_LIST( msg_rndmatch_04_win02, 1 )   //ルールを聞く
	_BMPMENU_MAKE_LIST( msg_rndmatch_04_win03, 2 )   //戻る
  
  //メニュー表示
	_BMPMENU_START()

  //○○に挑戦しますか？
  IF $i_ret == 0 THEN
    //決定
    $reg_return = SEQ_SUB_RNDMATCH_TRY
  ELSIF $i_ret == 1 THEN
    //ルールを聞く
    $i_msg = msg_rndmatch_04_exp01
    $i_msg += $lwk_rm_regu_idx
    _BALLOONWIN_OBJMSG_POS( i_msg , SCWK_TARGET_OBJID, POS_DL )
    
    $reg_return = SEQ_SUB_RNDMATCH_TRY_CHECK
  ELSE
    $reg_return = SEQ_SUB_RNDMATCH_TRY_SELECT
  ENDIF
}
_RET

//--------------------------------------------------------------
//ランダムマッチ：挑戦する
//--------------------------------------------------------------
sub_rndmatch_try:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_msg

  _BALLOONWIN_CLOSE()

  //手持ちかバトルボックスか選ぶウィンドウ表示(メンバチェック込み)
  _BTL_UTIL_PARTY_SELECT_CALL( lwk_rm_regulation, i_ret )

  IF $i_ret == SCR_BTL_PARTY_SELECT_CANCEL THEN
    $reg_return = SEQ_SUB_RNDMATCH_RETURN
    _RET
  ELSIF $i_ret == SCR_BTL_PARTY_SELECT_NG THEN
    //参加できるポケモンがいません
    _BTL_UTIL_PARTY_REGULATION_NG_MSG_CALL( lwk_rm_regulation )
    $reg_return = SEQ_SUB_RNDMATCH_EXIT
    _RET
  ENDIF
  //パーティ選択保存
  $lwk_rm_party = $i_ret
 
  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )

  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_SUB_RNDMATCH_EXIT
    _RET
  ENDIF
  
  //フィールド通信切断
  _FIELD_COMM_EXIT_EVENT_CALL( i_ret )
  IF $i_ret == SCR_FIELD_COMM_EXIT_CANCEL THEN
    $reg_return = SEQ_SUB_RNDMATCH_EXIT
    _RET
  ELSIF $i_ret == SCR_FIELD_COMM_EXIT_ERROR THEN
    $reg_return = SEQ_SUB_RNDMATCH_RETRY
    _RET
  ENDIF
  
  //入り口移動アニメ
  _CALL sub_anm_wifi_counter_in

  _WIFI_RANDOM_MATCH_EVENT_CALL( lwk_rm_regulation, lwk_rm_party )

  _CALL sub_anm_wifi_counter_out

  $reg_return = SEQ_SUB_RNDMATCH_END
}
_RET


} //RANDOM_MATCH_END

//==============================================================
//サブルーチン：GTS
//==============================================================
sub_wifi_gts:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop
  
  $i_seq = SEQ_SUB_GTS_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_GTS_MENU THEN
      _CALL sub_gts_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_GTS_EXP THEN
      _BALLOONWIN_OBJMSG_POS( msg_gts_exp01 , SCWK_TARGET_OBJID, POS_DL ) //説明を聞く
      $i_seq = SEQ_SUB_GTS_MENU
 
    CASE SEQ_SUB_GTS_NORMAL THEN
      _CALL sub_gts_normal  //GTS
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTS_NEGO THEN
      _CALL sub_gts_nego  //GTSネゴシエーション
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTS_RETURN THEN
      $reg_return = SEQ_MAIN_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_EXIT THEN
      $reg_return = SEQ_GOODBYE
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_END THEN
      $reg_return = SEQ_THROW_EXIT
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE
}
_RET

//--------------------------------------------------------------
//GTS：メニュー表示
//--------------------------------------------------------------
sub_gts_menu:
{
  DEFINE_LOCAL  i_ret
  
  //GTSでポケモン交換をしますか？
  _BALLOONWIN_OBJMSG_POS( msg_gts_01 , SCWK_TARGET_OBJID, POS_DL )

  //分岐・GTS/GTSネゴシエーション/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_gts_win01, SEQ_SUB_GTS_NORMAL)	  //GTS
	_BMPMENU_MAKE_LIST( msg_gts_win02, SEQ_SUB_GTS_NEGO)	    //GTSネゴシエーション
	_BMPMENU_MAKE_LIST( msg_gts_win03, SEQ_SUB_GTS_EXP )	    //説明を聞く
	_BMPMENU_MAKE_LIST( msg_gts_win04, SEQ_SUB_GTS_RETURN )   //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_GTS_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//GTS：GTSノーマル
//--------------------------------------------------------------
sub_gts_normal:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop

  $i_seq = SEQ_SUB_GTS_NORMAL_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_GTS_NORMAL_MENU THEN
      _CALL sub_gts_normal_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_GTS_NORMAL_EXP THEN
      _CALL sub_gts_normal_exp  //説明を聞く
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTS_NORMAL_EXCHANGE THEN
      _CALL sub_gts_normal_exchange  //交換
      $i_seq = $reg_return

    CASE SEQ_SUB_GTS_NORMAL_RETRY THEN
      $reg_return = SEQ_SUB_GTS_RETRY
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_NORMAL_RETURN THEN
      $reg_return = SEQ_SUB_GTS_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_NORMAL_EXIT THEN
      $reg_return = SEQ_SUB_GTS_EXIT
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_NORMAL_END THEN
      $reg_return = SEQ_SUB_GTS_END
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE

}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS：メニュー表示
//--------------------------------------------------------------
sub_gts_normal_menu:
{
  DEFINE_LOCAL  i_ret

  //グローバル交換をしますか？
  _BALLOONWIN_OBJMSG_POS( msg_gts_normal_01 , SCWK_TARGET_OBJID, POS_DL )

  //分岐・GTS/バトルビデオ/ミュージカルショット/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_gts_normal_win01, SEQ_SUB_GTS_NORMAL_EXCHANGE )    //交換
	_BMPMENU_MAKE_LIST( msg_gts_normal_win02, SEQ_SUB_GTS_NORMAL_EXP )	      //説明を聞く
	_BMPMENU_MAKE_LIST( msg_gts_normal_win03, SEQ_SUB_GTS_NORMAL_RETURN )     //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_GTS_NORMAL_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS：説明を聞く
//--------------------------------------------------------------
sub_gts_normal_exp:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop
  
  //GTSは
  _BALLOONWIN_OBJMSG_POS( msg_gts_normal_exp01 , SCWK_TARGET_OBJID, POS_DL )

  $i_loop = TRUE
  WHILE $i_loop == TRUE
    //詳しい説明をご希望ですか？
    _BALLOONWIN_OBJMSG_POS( msg_gts_normal_exp02 , SCWK_TARGET_OBJID, POS_DL )

    //分岐・預ける/探す/わかった
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_gts_normal_exp_win01, 0 )   //預ける
	  _BMPMENU_MAKE_LIST( msg_gts_normal_exp_win02, 1 )   //探す
	  _BMPMENU_MAKE_LIST( msg_gts_normal_exp_win03, 2 )   //わかった
		
	  //メニュー表示
  	_BMPMENU_START()

    //説明

    IF $i_ret == 0 THEN
      _BALLOONWIN_OBJMSG_POS( msg_gts_normal_exp_leave , SCWK_TARGET_OBJID, POS_DL )
    ELSIF $i_ret == 1 THEN
      _BALLOONWIN_OBJMSG_POS( msg_gts_normal_exp_search , SCWK_TARGET_OBJID, POS_DL )
    ELSE
      $i_loop = FALSE
    ENDIF
  ENDWHILE

  //メニューへ戻る
  $reg_return = SEQ_SUB_GTS_MENU
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS：交換
//--------------------------------------------------------------
sub_gts_normal_exchange:
{
  DEFINE_LOCAL  i_ret
 
  //本体無線通信設定チェック
  _CALL sub_available_wireless_check
  IF $SCWK_ANSWER == FALSE THEN
    $reg_return = SEQ_SUB_GTS_NORMAL_EXIT
    _RET
  ENDIF

  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )
  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_SUB_GTS_NORMAL_EXIT
    _RET
  ENDIF
 
  //フィールド通信切断
  _FIELD_COMM_EXIT_EVENT_CALL( i_ret )
  IF $i_ret == SCR_FIELD_COMM_EXIT_CANCEL THEN
    $reg_return = SEQ_SUB_GTS_NORMAL_EXIT
    _RET
  ELSIF $i_ret == SCR_FIELD_COMM_EXIT_ERROR THEN
    $reg_return = SEQ_SUB_GTS_NORMAL_RETRY
    _RET
  ENDIF
 
  //入り口移動アニメ
  _CALL sub_anm_wifi_counter_in

  _WIFI_GTS_EVENT_CALL()

  _CALL sub_anm_wifi_counter_out

  $reg_return = SEQ_SUB_GTS_NORMAL_END
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO
//--------------------------------------------------------------
sub_gts_nego:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_seq
  DEFINE_LOCAL  i_loop

  $i_seq = SEQ_SUB_GTS_NEGO_MENU
  $i_loop = TRUE

  WHILE $i_loop == TRUE
    SWITCH  $i_seq
    CASE SEQ_SUB_GTS_NEGO_MENU THEN
      //交渉を開始しますか？
      _BALLOONWIN_OBJMSG_POS( msg_gts_nego_01 , SCWK_TARGET_OBJID, POS_DL )
      _CALL sub_gts_nego_menu  //メニュー表示
      $i_seq = $reg_return
    
    CASE SEQ_SUB_GTS_NEGO_EXP THEN
      _CALL sub_gts_nego_exp  //説明を聞く
      $i_seq = $reg_return
 
    CASE SEQ_SUB_GTS_NEGO_EXCHANGE THEN
      _CALL sub_gts_nego_exchange  //交換
      $i_seq = $reg_return

    CASE SEQ_SUB_GTS_NEGO_RETRY THEN
      $reg_return = SEQ_SUB_GTS_RETRY
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_NEGO_RETURN THEN
      $reg_return = SEQ_SUB_GTS_MENU
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_NEGO_EXIT THEN
      $reg_return = SEQ_SUB_GTS_EXIT
      $i_loop = FALSE
    
    CASE SEQ_SUB_GTS_NEGO_END THEN
      $reg_return = SEQ_SUB_GTS_END
      $i_loop = FALSE
    ENDSWITCH
  ENDWHILE

}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO：メニュー表示
//--------------------------------------------------------------
sub_gts_nego_menu:
{
  DEFINE_LOCAL  i_ret

  //分岐・交換/説明を聞く/やめる
	_BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
	_BMPMENU_MAKE_LIST( msg_gts_nego_win01, SEQ_SUB_GTS_NEGO_EXCHANGE )    //交換
	_BMPMENU_MAKE_LIST( msg_gts_nego_win02, SEQ_SUB_GTS_NEGO_EXP )	      //説明を聞く
	_BMPMENU_MAKE_LIST( msg_gts_nego_win03, SEQ_SUB_GTS_NEGO_RETURN )     //もどる
		
	//メニュー表示
	_BMPMENU_START()

  IF $i_ret == EV_WIN_B_CANCEL THEN
    $reg_return = SEQ_SUB_GTS_NEGO_RETURN
  ELSE
    $reg_return = $i_ret
  ENDIF
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO：説明を聞く
//--------------------------------------------------------------
sub_gts_nego_exp:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop

  //説明
  _BALLOONWIN_OBJMSG_POS( msg_gts_nego_exp , SCWK_TARGET_OBJID, POS_DL )

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //詳しい説明をご希望ですか？
    _BALLOONWIN_OBJMSG_POS( msg_gts_nego_exp00 , SCWK_TARGET_OBJID, POS_DL )

    //分岐・預ける/探す/わかった
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_gts_nego_exp_win01, 0 )   //預ける
	  _BMPMENU_MAKE_LIST( msg_gts_nego_exp_win02, 1 )   //探す
	  _BMPMENU_MAKE_LIST( msg_gts_nego_exp_win03, 2 )   //わかった
		
	  //メニュー表示
  	_BMPMENU_START()

    //詳しい説明をご希望ですか？）
    IF $i_ret == 0 THEN
      _BALLOONWIN_OBJMSG_POS( msg_gts_nego_exp01 , SCWK_TARGET_OBJID, POS_DL )
    ELSIF $i_ret == 1 THEN
      _BALLOONWIN_OBJMSG_POS( msg_gts_nego_exp02 , SCWK_TARGET_OBJID, POS_DL )
    ELSE
      $i_loop = FALSE
    ENDIF
  ENDWHILE

  $reg_return = SEQ_SUB_GTS_MENU
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：GTS-NEGO：交換
//--------------------------------------------------------------
sub_gts_nego_exchange:
{
  DEFINE_LOCAL  i_ret
  
  //本体無線通信設定チェック
  _CALL sub_available_wireless_check
  IF $SCWK_ANSWER == FALSE THEN
    $reg_return = SEQ_SUB_GTS_NEGO_EXIT
    _RET
  ENDIF

  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )
  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_SUB_GTS_NEGO_EXIT
    _RET
  ENDIF
  
  //フィールド通信切断
  _FIELD_COMM_EXIT_EVENT_CALL( i_ret )
  IF $i_ret == SCR_FIELD_COMM_EXIT_CANCEL THEN
    $reg_return = SEQ_SUB_GTS_NEGO_EXIT
    _RET
  ELSIF $i_ret == SCR_FIELD_COMM_EXIT_ERROR THEN
    $reg_return = SEQ_SUB_GTS_NEGO_RETRY
    _RET
  ENDIF
 
  //入り口移動アニメ
  _CALL sub_anm_wifi_counter_in

  _WIFI_GTS_NEGO_EVENT_CALL()
  
  _CALL sub_anm_wifi_counter_out

  $reg_return = SEQ_SUB_GTS_NEGO_END
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：ミュージカルショット
//--------------------------------------------------------------
sub_gterminal_musical:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop

  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //ミュージカルをみますか？
    _BALLOONWIN_OBJMSG_POS( msg_musical_01 , SCWK_TARGET_OBJID, POS_DL )

    //分岐・ミュージカルショットを見る/説明を聞く/やめる
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_musical_win01, 0 )   //みる
	  _BMPMENU_MAKE_LIST( msg_musical_win02, 1 )   //説明を聞く
	  _BMPMENU_MAKE_LIST( msg_musical_win03, 2 )   //戻る
		
	  //メニュー表示
  	_BMPMENU_START()

    //ミュージカルをみますか？
    IF $i_ret == 0 THEN
      $reg_param = SCRCMD_BTL_RECORDER_MODE_MUSICAL
      _CALL sub_btl_recorder_call
      $i_loop = FALSE
    ELSIF $i_ret == 1 THEN
      _BALLOONWIN_OBJMSG_POS( msg_musical_exp , SCWK_TARGET_OBJID, POS_DL )  //説明
    ELSE
      $reg_return = SEQ_MAIN_MENU
      $i_loop = FALSE
    ENDIF
  ENDWHILE
}
_RET

//--------------------------------------------------------------
//グローバルターミナル：バトルビデオ
//--------------------------------------------------------------
sub_gterminal_btl_video:
{
  DEFINE_LOCAL  i_ret
  DEFINE_LOCAL  i_loop


  $i_loop = TRUE
  WHILE $i_loop == TRUE

    //バトルビデオを見ますか？
    _BALLOONWIN_OBJMSG_POS( msg_btlvideo_01 , SCWK_TARGET_OBJID, POS_DL )

    //分岐・バトルビデオを見る/説明を聞く/やめる
	  _BMPMENU_INIT_EX( 1, 1, 0, 1, i_ret )
		
  	_BMPMENU_MAKE_LIST( msg_btlvideo_win01, 0 )   //みる
	  _BMPMENU_MAKE_LIST( msg_btlvideo_win02, 1 )   //説明を聞く
	  _BMPMENU_MAKE_LIST( msg_btlvideo_win03, 2 )   //戻る
		
	  //メニュー表示
  	_BMPMENU_START()

    //バトルビデオを見ますか？

    IF $i_ret == 0 THEN
      $reg_param = SCRCMD_BTL_RECORDER_MODE_VIDEO
      _CALL sub_btl_recorder_call
      $i_loop = FALSE
    ELSIF $i_ret == 1 THEN
      _BALLOONWIN_OBJMSG_POS( msg_btlvideo_exp , SCWK_TARGET_OBJID, POS_DL )  //説明
    ELSE
      $reg_return = SEQ_MAIN_MENU
      $i_loop = FALSE
    ENDIF
  ENDWHILE
}
_RET


//--------------------------------------------------------------
//グローバルターミナル：バトルビデオ・ミュージカルショット　呼び出し
//--------------------------------------------------------------
sub_btl_recorder_call:
{
  DEFINE_LOCAL  i_ret
  
  //本体無線通信設定チェック
  _CALL sub_available_wireless_check
  IF $SCWK_ANSWER == FALSE THEN
    $reg_return = SEQ_GOODBYE
    _RET
  ENDIF

  // レポートを書く
  _REPORT_EVENT_CALL( i_ret )
  // 書き込みに失敗
  IF $i_ret != SCR_REPORT_OK THEN
    $reg_return = SEQ_GOODBYE
    _RET
  ENDIF
  
  //フィールド通信切断
  _FIELD_COMM_EXIT_EVENT_CALL( i_ret )
  IF $i_ret == SCR_FIELD_COMM_EXIT_CANCEL THEN
    $reg_return = SEQ_GOODBYE
    _RET
  ELSIF $i_ret == SCR_FIELD_COMM_EXIT_ERROR THEN
    $reg_return = SEQ_RETRY
    _RET
  ENDIF
 
 _CALL sub_anm_wifi_counter_in

  _WIFI_BATTLE_RECORDER_EVENT_CALL( reg_param )
  
  _CALL sub_anm_wifi_counter_out
  $reg_return = SEQ_THROW_EXIT
}
_RET


} //WIFI_COUNTER_END

//===================================================================================
/////////////////////////////////////////////////////////////////////////////////////
//アニメデータ
/////////////////////////////////////////////////////////////////////////////////////
//===================================================================================
//==============================================================
//部屋へ誘導
//==============================================================
sub_anm_wifi_counter_in:
{
  _BALLOONWIN_OBJMSG_POS( msg_wifi_counter_04 , SCWK_TARGET_OBJID, POS_DL )
  _BALLOONWIN_CLOSE()
  _CHG_COMMON_SCR SCRID_POKECEN_ELEVATOR_IN
  //復帰時の出現先をここにする
  _SET_SP_LOCATION_HERE()
  //↑で設定した特殊接続先からゲームを開始するリクエスト
  _FLAG_SET( SYS_FLAG_SPEXIT_REQUEST )
}
_RET

//==============================================================
//部屋からでてくる
//==============================================================
sub_anm_wifi_counter_out:
{
  _CHG_COMMON_SCR SCRID_POKECEN_ELEVATOR_OUT
}
_RET

