
//======================================================================
//                c03gym0101.ev
//
//    スクリプトファイル：c03gym0101用
//
//======================================================================

  .text

  .include  "scr_seq_def.h"
  .include  "../../message/dst/script/msg_c03gym0101.h"
  .include  "c03gym0101.h"

//--------------------------------------------------------------
//               スクリプト本体
//--------------------------------------------------------------

//--------------------------------------------------------------
//               スクリプトテーブル
//--------------------------------------------------------------
_EVENT_DATA		ev_bg_c03gym0101_statue_01
_EVENT_DATA		ev_bg_c03gym0101_statue_02
_EVENT_DATA		ev_prg_c03gym0101_tr1_appear
_EVENT_DATA		ev_prg_c03gym0101_tr2_appear
_EVENT_DATA		ev_prg_c03gym0101_tr1_btl
_EVENT_DATA		ev_prg_c03gym0101_tr2_btl
_EVENT_DATA		ev_pos_c03gym0101_switch_00
_EVENT_DATA		ev_pos_c03gym0101_switch_01
_EVENT_DATA		ev_pos_c03gym0101_switch_02
_EVENT_DATA		ev_pos_c03gym0101_switch_03
_EVENT_DATA		ev_pos_c03gym0101_switch_04
_EVENT_DATA		ev_pos_c03gym0101_switch_05
_EVENT_DATA		ev_pos_c03gym0101_switch_06
_EVENT_DATA		ev_pos_c03gym0101_switch_07
_EVENT_DATA		ev_pos_c03gym0101_switch_08	//トラップ：トレーナーが出てくるスイッチ（右上）
_EVENT_DATA		ev_pos_c03gym0101_switch_09	//トラップ：トレーナーが出てくるスイッチ（左下）
_EVENT_DATA		ev_zone_c03gym0101
_EVENT_DATA		ev_c03gym0101_trainer_01
_EVENT_DATA		ev_c03gym0101_trainer_02
_EVENT_DATA		ev_c03gym0101_leader3_01
_EVENT_DATA		ev_c03gym0101_sunglasses_01
_EVENT_DATA		ev_pos_c03gym0101_stopper_01
_EVENT_DATA_END


//------------------------------注意--------------------------------//
//																	//
//	ジムギミックに LOCALWORK0〜10 まで使用ししています。			//
//	同マップ内の使用を禁止します。									//
//	LOCALWORK0〜7 ⇒ ポール解除スイッチ								//
//	LOCALWORK8〜9 ⇒ トラップ(騙し絵)トレーナー						//
//																	//
//------------------------------------------------------------------//

DEFINE_LOCAL SwitchID   //踏んだスイッチのIDを格納

/************************************************************/
/*					ジムギミック初期化						*/
/************************************************************/
INIT_EVENT_START	ev_zone_c03gym0101
	//ジムギミック初期化コマンド
	_GYM_INSECT_INIT(LOCALWORK0,LOCALWORK1,LOCALWORK2,LOCALWORK3,LOCALWORK4,LOCALWORK5,LOCALWORK6,LOCALWORK7)

	//虫ジムのトラップ発動までトレーナーを非表示
	_FLAG_SET( FV_C03GYM0101_TR01 )
	_FLAG_SET( FV_C03GYM0101_TR02 )

  {
    _DEBUG_PRINT_WK(LOCALWORK0)
    _DEBUG_PRINT_WK(LOCALWORK1)
    _DEBUG_PRINT_WK(LOCALWORK2)
    _DEBUG_PRINT_WK(LOCALWORK3)
    _DEBUG_PRINT_WK(LOCALWORK4)
    _DEBUG_PRINT_WK(LOCALWORK5)
    _DEBUG_PRINT_WK(LOCALWORK6)
    _DEBUG_PRINT_WK(LOCALWORK7)
  }

INIT_EVENT_END

/************************************************************/
/*				サングラスのスクリプトイベント				*/
/************************************************************/
EVENT_START	ev_c03gym0101_sunglasses_01

	IF $WK_SCENE_C03GYM0101 == 0 THEN
	
		_EASY_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_glasses_stop_01 )
		
	ELSE
		
		_TALK_OBJ_START()
		
		//バッジフラグ取得
		_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

		//バッジフラグで分岐
		IF $SCWK_TEMP0 == 0 THEN
		//バッジ入手前の処理

			//アイテム入手フラグで分岐
			IF FLAG_OFF( FE_C03GYM_ITEM ) THEN
				//アイテム未入手なら、おいしいみず入手イベント
				_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_glasses_01 )
				_BALLOONWIN_CLOSE()
				_ITEM_EVENT_KEYWAIT( ITEM_OISIIMIZU, 1 )
				_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_glasses_02 )
				_LAST_KEYWAIT()
				_BALLOONWIN_CLOSE()

				_FLAG_SET( FE_C03GYM_ITEM )			//アイテム入手フラグをセット

			ELSE
				//入手済みならメッセージのみ
				_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_glasses_02 )
				_LAST_KEYWAIT()
				_BALLOONWIN_CLOSE()
			ENDIF

		ELSE
			//バッジ入手後の処理

			//さすがっすよ！
			_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_glasses_03 )
			_LAST_KEYWAIT()
			_BALLOONWIN_CLOSE()

		ENDIF
	
	ENDIF

EVENT_END
	
/************************************************************/
/*				石像のスクリプトイベント					*/
/************************************************************/
EVENT_START	ev_bg_c03gym0101_statue_01

	//ジムバッジを持っているのかを判定
	_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

	//ジムバッジを取得していない場合
	IF $SCWK_TEMP0 == 0 THEN
		_PLAYER_NAME( 0 )
		_PLAINWIN_MSG_DOWN( msg_c03gym0101_statue_01 )
	
	//ジムバッジを取得している場合
	ELSE
		//C04プラズマ団イベント発生前
		IF $WK_SCENE_C04 == 0 THEN
		
			_PLAYER_NAME( 0 )
			_PLAINWIN_MSG_DOWN( msg_c03gym0101_statue_02 )
			
		//C04プラズマ団イベント後
		ELSE
		
			_PLAYER_NAME( 0 )
			_PLAINWIN_MSG_DOWN( msg_c03gym0101_statue_03 )
		
		ENDIF
		
	ENDIF
	
	_LAST_KEYWAIT()	
	_PLAINWIN_CLOSE()
	
EVENT_END

/************************************************************/
/*				石像のスクリプトイベント					*/
/************************************************************/
EVENT_START	ev_bg_c03gym0101_statue_02

	//ジムバッジを持っているのかを判定
	_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

	//ジムバッジを取得していない場合
	IF $SCWK_TEMP0 == 0 THEN
		_PLAYER_NAME( 0 )
		_SYSWIN_MSG( msg_c03gym0101_statue_01 , POS_DOWN )
	
	//ジムバッジを取得している場合
	ELSE
		
		_PLAYER_NAME( 0 )
		_SYSWIN_MSG( msg_c03gym0101_statue_02 , POS_DOWN )
		
	ENDIF

	_LAST_KEYWAIT()	
	_SYSWIN_CLOSE()

EVENT_END

/************************************************************/
/*			ジムリーダー戦のスクリプトイベント				*/
/************************************************************/
EVENT_START	ev_c03gym0101_leader3_01

	_TALK_OBJ_START()
	//バッジフラグ取得
	_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

	//ジムバッジフラグで分岐
	IF $SCWK_TEMP0 == 0 THEN
		//バッジ入手前なら、ジムリーダー戦イベント
		_CALL		ev_leader3_btl

	ELSE

		//ゲームクリア前なら
		IF FLAG_OFF( SYS_FLAG_GAME_CLEAR )  THEN
		
			//キミは　たびに　でてから　どれだけの
			_BALLOONWIN_OBJMSG( msg_c03gym0101_leader_06 , C03GYM0101_LEADER3_01 )
			_LAST_KEYWAIT()
			_BALLOONWIN_CLOSE()
			
		//ゲームクリア後なら
		ELSE
		
			//やあ　さいきんは　ポケモンを　そだて
			_BALLOONWIN_OBJMSG( msg_c03gym0101_leader_end_01 , C03GYM0101_LEADER3_01 )
			_LAST_KEYWAIT()
			_BALLOONWIN_CLOSE()
		
		ENDIF

	ENDIF
	
EVENT_END

//ジムリーダー戦
ev_leader3_btl:

	//アーティが喋る　
	//アーティ:ぬうん？　･･････キミ　どこかで　であったっけ？
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_01 )
	_BALLOONWIN_CLOSE()

	//トレーナー戦呼び出し
	_TRAINER_BTL_SET( TRID_LEADER3_01, 0 )
	
	//敗戦チェック
	_TRAINER_LOSE_CHECK( SCWK_ANSWER )
	
	IF $SCWK_ANSWER == SCR_BATTLE_RESULT_WIN THEN
			_TRAINER_WIN()			//勝ち(1)ならトレーナー勝利処理へ
	ELSE
			_TRAINER_LOSE()			//負け(0)ならトレーナー敗北処理へ(ここでスクリプト終了します）
	ENDIF
		
	//リーダー：戦闘後メッセージ→続けてバッジ入手へ
	//アーティが喋る　
	//アーティ:あうう　まけちゃったよ……
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_02 )
	_BALLOONWIN_CLOSE()

  //リーダー戦勝利時の情報登録
  _SET_GYM_VICTORY_INFO( BADGE_ID_03 )
	//バッジ入手処理
	_SET_BADGE_FLAG( BADGE_ID_03 )		//バッジフラグon
	_PLAYER_NAME( 0 )
	
	{
	
	//バッジ入手演出再生
	_ME_PLAY( SEQ_ME_BADGE )
	
	//性別が格納されるローカル変数を定義
	DEFINE_LOCAL SCWK_SEX
	_GET_MY_SEX(SCWK_SEX)
	
	//男性だった場合
	IF $SCWK_SEX == PM_MALE THEN
		_CALL_FLD3D_CUTIN( FLDCIID_GYM03 )
	//女性だった場合
	ELSE
		_CALL_FLD3D_CUTIN( FLDCIID_GYM03F )
	ENDIF
	
	//ME待ち
	_ME_WAIT()
		
	}
	
	//〜〜はベーシックバッジを入手した！
	_SYSWIN_MSG( msg_c03gym0101_leader_03 , POS_DOWN )
	_SYSWIN_CLOSE()

	//ビードルバッジ　かっこいいでしょ！
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_04)
	_BALLOONWIN_CLOSE()

	//わざマシン入手処理　入手わざマシンが未定
	_ITEM_EVENT_KEYWAIT( ITEM_WAZAMASIN76, 1 )

	//リーダー：わざマシンの解説
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_05 )
	_LAST_KEYWAIT()
	_BALLOONWIN_CLOSE()

	//================================================//

	//ジムトレーナーの視線無効
	_TRAINER_FLAG_SET( TRID_JUGGLING_05 )
	_TRAINER_FLAG_SET( TRID_JUGGLING_06 )
	
	//R04ライバルイベント開始
	$WK_SCENE_R04 = 1
	
	//C03R0601
	$WK_SCENE_C03R0601 = 1

	//ワークの値を１にし、イベント終了
	$WK_SCENE_C03 = 2
	
	//TVTイベント用・C03P07
	$WK_SCENE_C03P07 = 4

	//トレーナーフラグセット
	_TRAINER_FLAG_SET( TRID_JUGGLING_02 )
	_TRAINER_FLAG_SET( TRID_JUGGLING_04 )
	//隠しトレーナーを戦闘済みにする
	_FLAG_SET( FE_C03GYM_TRBTL1 )
	_FLAG_SET( FE_C03GYM_TRBTL2 )

	//電光掲示板フラグセット
	_FLAG_SET( SYS_FLAG_ELBOARD_C03GYMWIN )

	//================================================//

	
_RET

EVENT_END

/************************************************************/
/*					スイッチPOSイベント id = 0 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_00

	//スイッチアニメをコール
	$SwitchID = 0		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 0		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK0 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 1 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_01

	//スイッチアニメをコール
	$SwitchID = 1		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 1		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK1 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 2 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_02

	//スイッチアニメをコール
	$SwitchID = 2		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 2		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK2 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 3 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_03

	//スイッチアニメをコール
	$SwitchID = 3		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 3		//スイッチidを格納
	_CALL	ev_pole_unlock

	//ポール解除処理をコール
	$SwitchID = 4		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK3 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 4 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_04

	//スイッチアニメをコール
	$SwitchID = 4		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 5		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK4 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 5 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_05

	//スイッチアニメをコール
	$SwitchID = 5		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 6		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK5 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 6 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_06

	//スイッチアニメをコール
	$SwitchID = 6		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 7		//スイッチidを格納
	_CALL	ev_pole_unlock

	//ポール解除処理をコール
	$SwitchID = 8		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK6 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 7 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_07

	//スイッチアニメをコール
	$SwitchID = 7		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$SwitchID = 9		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK7 = 1

	//========================================//

EVENT_END


/************************************************************/
/*			スイッチPOSイベント　トラップ id = 8 			*/
/************************************************************/
//トレーナーが出現するスイッチ（右上）
EVENT_START	ev_pos_c03gym0101_switch_08
	
	//SE_WAITはev_prg_c03gym0101_tr1_btlにて
	_SE_PLAY( SEQ_SE_FLD_58 )
	
	//トレーナートラップ起動
	_GYM_INSECT_TR_TRAP_ON( 0 )
	
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその1を表示状態にする	*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr1_appear
	_FLAG_RESET( FV_C03GYM0101_TR01 )
	_OBJ_ADD( C03GYM0101_TRAINER_01 )
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその1と戦闘				*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr1_btl
	//対戦済みかチェック
	IF FLAG_OFF( FE_C03GYM_TRBTL1 ) THEN
		//対戦前の処理
		_SE_WAIT()
		
		_OBJ_ANIME( MMDL_ID_PLAYER, anm_dir_u )
		_OBJ_ANIME_WAIT()
		
		//戦闘前メッセージ
		_BALLOONWIN_OBJMSG( msg_c03gym0101_jugglimg_05_01 , C03GYM0101_TRAINER_01 )
		_BALLOONWIN_CLOSE()
		
		//トレーナー戦呼び出し
		_TRAINER_BTL_SET( TRID_JUGGLING_05, 0 )
		
		//敗戦チェック
		_TRAINER_LOSE_CHECK( SCWK_ANSWER )
		
		IF $SCWK_ANSWER == SCR_BATTLE_RESULT_WIN THEN
		
			_TRAINER_WIN()			//勝ち(1)ならトレーナー勝利処理へ
		
		ELSE
		
			_TRAINER_LOSE()			//負け(0)ならトレーナー敗北処理へ(ここでスクリプト終了します）
		
		ENDIF

		//戦闘後メッセージ
		_BALLOONWIN_OBJMSG( msg_c03gym0101_jugglimg_05_02 , C03GYM0101_TRAINER_01 )
		_LAST_KEYWAIT()
		_BALLOONWIN_CLOSE()
		
		//========================================//
		//トラップトレーナーを対戦済みにする
		_FLAG_SET( FE_C03GYM_TRBTL1 )
		//========================================//
		
	ELSE
		//対戦後の処理
		
		//対戦後メッセージ
		_BALLOONWIN_OBJMSG( msg_c03gym0101_jugglimg_05_03 , C03GYM0101_TRAINER_01 )
		_LAST_KEYWAIT()
		_BALLOONWIN_CLOSE()
		
	ENDIF

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK8 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 9 				*/
/************************************************************/
//トレーナーが出現するスイッチ（左下）
EVENT_START	ev_pos_c03gym0101_switch_09

	//SE_WAITはev_prg_c03gym0101_tr2_btlにて
	_SE_PLAY( SEQ_SE_FLD_58 )

	//トレーナートラップ起動
	_GYM_INSECT_TR_TRAP_ON( 1 )
	
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその2を表示状態にする	*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr2_appear
	_FLAG_RESET( FV_C03GYM0101_TR02 )
	_OBJ_ADD( C03GYM0101_TRAINER_02 )
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその2と戦闘	*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr2_btl
	//対戦済みかチェック
	IF FLAG_OFF( FE_C03GYM_TRBTL2 ) THEN
		//対戦前の処理
		_SE_WAIT()
		
		_OBJ_ANIME( MMDL_ID_PLAYER, anm_dir_u )
		_OBJ_ANIME_WAIT()
		
		//戦闘前メッセージ
		_BALLOONWIN_OBJMSG( msg_c03gym0101_jugglimg_06_01 , C03GYM0101_TRAINER_02 )
		_BALLOONWIN_CLOSE()
		
		//トレーナー戦呼び出し
		_TRAINER_BTL_SET( TRID_JUGGLING_06, 0 )
		
		//敗戦チェック
		_TRAINER_LOSE_CHECK( SCWK_ANSWER )
		
		IF $SCWK_ANSWER == SCR_BATTLE_RESULT_WIN THEN
		
			_TRAINER_WIN()			//勝ち(1)ならトレーナー勝利処理へ
		
		ELSE
		
			_TRAINER_LOSE()			//負け(0)ならトレーナー敗北処理へ(ここでスクリプト終了します）
		
		ENDIF

		//戦闘後メッセージ
		_BALLOONWIN_OBJMSG( msg_c03gym0101_jugglimg_06_02 , C03GYM0101_TRAINER_02 )
		_LAST_KEYWAIT()
		_BALLOONWIN_CLOSE()
		
		//========================================//
		//トラップトレーナーを対戦済みにする
		_FLAG_SET( FE_C03GYM_TRBTL2 )
		//========================================//

	ELSE
	//対戦後の処理
		
		//対戦後メッセージ
		_BALLOONWIN_OBJMSG( msg_c03gym0101_jugglimg_06_03 , C03GYM0101_TRAINER_02 )
		_LAST_KEYWAIT()
		_BALLOONWIN_CLOSE()

	ENDIF

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK9 = 1

	//========================================//

EVENT_END



//////////////////////////////////////////////////////////////
//					呼び出し処理：スイッチON				//
//////////////////////////////////////////////////////////////
ev_switch_on:
	//ＳＥ再生
	_SE_PLAY( SEQ_SE_FLD_55 )
	//足元のスイッチアニメを起動
	_GYM_INSECT_SW_ON( SwitchID ) 
	_SE_WAIT()
_RET


//////////////////////////////////////////////////////////////
//					呼び出し処理：ポール解除				//
//////////////////////////////////////////////////////////////
ev_pole_unlock:
	//カメラ操作（ポール前へ） [091121追加]
	_CALL	ev_camera_move_pole

	//カメラ移動終了後、少し間を持たせる？【保留】
//	_TIME_WAIT( 10 )

	//ＳＥ再生
	_SE_PLAY( SEQ_SE_FLD_56 )
	//ポール解除処理
	_GYM_INSECT_PL_ON( SwitchID )
	_SE_WAIT()

	//自機にカメラを戻す 操作スタート処理は↓のコール処理の中ですでにやっています
   	_CAMERA_RECV_MOVE( 15 )
    _CAMERA_WAIT_MOVE()	//カメラ移動待ち
	_CAMERA_BIND()		//カメラバインド
	_CAMERA_END()		//カメラ操作終了

_RET


//////////////////////////////////////////////////////////////
//			呼び出し処理：カメラ操作（ポール前へ）			//
//////////////////////////////////////////////////////////////
ev_camera_move_pole:
	_CAMERA_START()		//カメラ操作開始
    _CAMERA_PURGE()		//対象物とカメラのバインドを解く

	//ポールの前へカメラを移動させる
	IF $SwitchID == 0 THEN
		_CAMERA_MOVE( 8408,1792,970752,1998848,0,1146880,15 )	//一番最後の引数は移動にかかるフレーム数

	ELSIF $SwitchID == 1 THEN
		_CAMERA_MOVE( 8408,64896,970752,2260992,0,1146880,15 )

	ELSIF $SwitchID == 2 THEN
		_CAMERA_MOVE( 8408,1792,970752,1605632,0,1409024,15 )

	ELSIF $SwitchID == 3 THEN
		_CAMERA_MOVE( 8408,64896,970752,1867776,0,1409024,15 )

	ELSIF $SwitchID == 4 THEN
		_CAMERA_MOVE( 8408,1792,970752,2392064,0,1409024,15 )

	ELSIF $SwitchID == 5 THEN
		_CAMERA_MOVE( 8408,64896,970752,2654208,0,1409024,15 )

	ELSIF $SwitchID == 6 THEN
		_CAMERA_MOVE( 8408,64896,970752,1474560,0,1671168,15 )

	ELSIF $SwitchID == 7 THEN
		_CAMERA_MOVE( 8408,64896,970752,1867776,0,1998848,15 )

	ELSIF $SwitchID == 8 THEN
		_CAMERA_MOVE( 8408,1792,970752,2392064,0,1933312,15 )

	ELSE
		_CAMERA_MOVE( 8408,64896,970752,2654208,0,1933312,15 )	//ポールID(9)の場合（一番右下のポール）

	ENDIF

    _CAMERA_WAIT_MOVE()	//カメラ移動待ち

	//カメラのバインドと操作終了処理はポール解除処理が終わった後にやってます

_RET


/************************************************************/
/*				トレーナー（右上）の話しかけ				*/
/************************************************************/
EVENT_START	ev_c03gym0101_trainer_01
	_EASY_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_jugglimg_05_02 )
EVENT_END


/************************************************************/
/*				トレーナー（左下）の話しかけ				*/
/************************************************************/
EVENT_START	ev_c03gym0101_trainer_02
	_EASY_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_jugglimg_06_02 )
EVENT_END

/**************************************************************/
/*			プラズマ団イベントクリア前　ストッパー			  */
/**************************************************************/
EVENT_START		ev_pos_c03gym0101_stopper_01

	DEFINE_LOCAL	LWK_POSX
	DEFINE_LOCAL	LWK_POSZ
	
	_PLAYER_POS_GET( LWK_POSX,LWK_POSZ )

	SWITCH $LWK_POSX
	CASE 31 THEN
		_OBJ_ANIME( C03GYM0101_SUNGLASSES_01, anm_come_31 )
		_OBJ_ANIME_WAIT()
	CASE 32 THEN
		_OBJ_ANIME( C03GYM0101_SUNGLASSES_01, anm_come_32 )
		_OBJ_ANIME_WAIT()
	CASE 33 THEN
		_OBJ_ANIME( C03GYM0101_SUNGLASSES_01, anm_come_33 )
		_OBJ_ANIME_WAIT()
	ENDSWITCH

	_OBJ_ANIME( MMDL_ID_PLAYER, anm_player_look )
	_OBJ_ANIME_WAIT()

	_BALLOONWIN_OBJMSG( msg_c03gym0101_glasses_stop_02 , C03GYM0101_SUNGLASSES_01 )
	_MSGWIN_CLOSE()

	SWITCH $LWK_POSX
	CASE 31 THEN
		_OBJ_ANIME( MMDL_ID_PLAYER, anm_player_back )
		_OBJ_ANIME( C03GYM0101_SUNGLASSES_01, anm_return_31 )
		_OBJ_ANIME_WAIT()
	CASE 32 THEN
		_OBJ_ANIME( MMDL_ID_PLAYER, anm_player_back )
		_OBJ_ANIME( C03GYM0101_SUNGLASSES_01, anm_return_32 )
		_OBJ_ANIME_WAIT()
	CASE 33 THEN
		_OBJ_ANIME( MMDL_ID_PLAYER, anm_player_back )
		_OBJ_ANIME( C03GYM0101_SUNGLASSES_01, anm_return_33 )
		_OBJ_ANIME_WAIT()
	ENDSWITCH

EVENT_END

//--------------------------------------------------------------------
//		プラズマ団イベントクリア前用　アニメ
//--------------------------------------------------------------------
_ANIME_LABEL	anm_come_31
	_ANIME_DATA		AC_WALK_L_8F,3
	_ANIME_DATA		AC_STAY_WALK_U_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_come_32
	_ANIME_DATA		AC_WALK_L_8F,2
	_ANIME_DATA		AC_STAY_WALK_U_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_come_33
	_ANIME_DATA		AC_WALK_L_8F,1
	_ANIME_DATA		AC_STAY_WALK_U_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_return_31
	_ANIME_DATA		AC_WALK_R_8F,3
	_ANIME_DATA		AC_STAY_WALK_D_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_return_32
	_ANIME_DATA		AC_WALK_R_8F,2
	_ANIME_DATA		AC_STAY_WALK_D_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_return_33
	_ANIME_DATA		AC_WALK_R_8F,1
	_ANIME_DATA		AC_STAY_WALK_D_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_player_back
	_ANIME_DATA		AC_WALK_D_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_player_look
	_ANIME_DATA		AC_STAY_WALK_D_8F,1
	_ANIME_DATA		ACMD_END,0

_ANIME_LABEL	anm_dir_u
	_ANIME_DATA		AC_DIR_U,1
	_ANIME_DATA		ACMD_END,0
