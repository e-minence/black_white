
//======================================================================
//                c03gym0101.ev
//
//    スクリプトファイル：c03gym0101用
//
//======================================================================

  .text

  .include  "scr_seq_def.h"
  .include  "../../message/dst/script/msg_c03gym0101.h"
  .include  "c03gym0101.h"

//--------------------------------------------------------------
//               スクリプト本体
//--------------------------------------------------------------

//--------------------------------------------------------------
//               スクリプトテーブル
//--------------------------------------------------------------
_EVENT_DATA		ev_bg_c03gym0101_statue_01
_EVENT_DATA		ev_bg_c03gym0101_statue_02
_EVENT_DATA		ev_prg_c03gym0101_tr1_appear
_EVENT_DATA		ev_prg_c03gym0101_tr2_appear
_EVENT_DATA		ev_prg_c03gym0101_tr1_btl
_EVENT_DATA		ev_prg_c03gym0101_tr2_btl
_EVENT_DATA		ev_pos_c03gym0101_switch_00
_EVENT_DATA		ev_pos_c03gym0101_switch_01
_EVENT_DATA		ev_pos_c03gym0101_switch_02
_EVENT_DATA		ev_pos_c03gym0101_switch_03
_EVENT_DATA		ev_pos_c03gym0101_switch_04
_EVENT_DATA		ev_pos_c03gym0101_switch_05
_EVENT_DATA		ev_pos_c03gym0101_switch_06
_EVENT_DATA		ev_pos_c03gym0101_switch_07
_EVENT_DATA		ev_pos_c03gym0101_switch_08	//トラップ：トレーナーが出てくるスイッチ（右上）
_EVENT_DATA		ev_pos_c03gym0101_switch_09	//トラップ：トレーナーが出てくるスイッチ（左下）
_EVENT_DATA		ev_zone_c03gym0101
_EVENT_DATA		ev_c03gym0101_trainer_01
_EVENT_DATA		ev_c03gym0101_trainer_02
_EVENT_DATA		ev_c03gym0101_leader3_01
_EVENT_DATA		ev_c03gym0101_sunglasses_01
_EVENT_DATA		ev_pos_c03gym0101_sunglasses_01
_EVENT_DATA_END


//------------------------------注意--------------------------------//
//																	//
//	ジムギミックに LOCALWORK0〜10 まで使用ししています。			//
//	同マップ内の使用を禁止します。									//
//	LOCALWORK0〜7 ⇒ ポール解除スイッチ								//
//	LOCALWORK8〜9 ⇒ トラップ(騙し絵)トレーナー						//
//	LOCALWORK10   ⇒ 踏んだスイッチのIDを格納						//
//																	//
//------------------------------------------------------------------//


/************************************************************/
/*					ジムギミック初期化						*/
/************************************************************/
INIT_EVENT_START	ev_zone_c03gym0101
	//ジムギミック初期化コマンド
	_GYM_INSECT_INIT()

	//虫ジムのトラップ発動までトレーナーを非表示
	_FLAG_SET( FV_C03GYM0101_TR01 )
	_FLAG_SET( FV_C03GYM0101_TR02 )

INIT_EVENT_END

/************************************************************/
/*				サングラスのスクリプトイベント				*/
/************************************************************/
EVENT_START	ev_c03gym0101_sunglasses_01

	//ジムバッジを持っているのかを判定
	_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

	//ジムバッジを取得していない場合
	IF $SCWK_TEMP0 == 0 THEN
	
		_EASY_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_glasses_02 )
	
	//ジムバッジを取得している場合
	ELSE
		
		_EASY_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_glasses_03)
		
	ENDIF
EVENT_END

/************************************************************/
/*				サングラスPOSイベント						*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_sunglasses_01

IF FLAG_OFF( FE_C03GYM_ITEM) THEN

    //サングラスが主人公に気づく。びっくりマーク
    _OBJ_ANIME( C03GYM0101_SUNGLASSES_01,anm_obj_gyoe )
    _OBJ_ANIME_WAIT() 
    
    //サングラスが主人公に近づく
    
    { //ここからローカル変数の参照制限範囲開始
    DEFINE_LOCAL  POSX   /* ローカル変数定義 */
    DEFINE_LOCAL  POSZ    /* {}で囲う場合は連続して書かなければならない */

    _PLAYER_POS_GET( POSX,POSZ ) //自機座標取得
    
    //プレイヤーが通る3グリッド分を用意
    SWITCH $POSX
    CASE 16 THEN
     _OBJ_ANIME( C03GYM0101_SUNGLASSES_01,anm_sunglasses_move_a )
     _OBJ_ANIME_WAIT()
     
    CASE 17 THEN
     _OBJ_ANIME( C03GYM0101_SUNGLASSES_01,anm_sunglasses_move_b )
     _OBJ_ANIME_WAIT()
     
    CASE 18 THEN
     _OBJ_ANIME( C03GYM0101_SUNGLASSES_01,anm_sunglasses_move_c )
     _OBJ_ANIME_WAIT()
 
    DEFAULT
    ENDSWITCH
    }
  
   //ジムバッジを持っているのかを判定
   _GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )
    
	//分岐処理・ジムバッジがあるか？
	IF $SCWK_TEMP0 == 0 THEN
	
		//ジムバッジがない
		//いやあ　ヒウンシティは　どうですか
		_BALLOONWIN_OBJMSG( msg_c03gym0101_glasses_01,C03GYM0101_SUNGLASSES_01)
		_BALLOONWIN_CLOSE()
		
		//【仮】おいしい水をくれる　MEなし
		_ITEM_EVENT_KEYWAIT(ITEM_OISIIMIZU, 1)
		
		//むしタイプの　ポケモンは　ほのおや
		_BALLOONWIN_OBJMSG( msg_c03gym0101_glasses_02,C03GYM0101_SUNGLASSES_01)
		_BALLOONWIN_CLOSE()
	
	ENDIF
	
	//サングラス、元の位置に戻る
	
    { //ここからローカル変数の参照制限範囲開始
    DEFINE_LOCAL  POSX   /* ローカル変数定義 */
    DEFINE_LOCAL  POSZ    /* {}で囲う場合は連続して書かなければならない */

    _PLAYER_POS_GET( POSX,POSZ ) //自機座標取得
    
    //プレイヤーが通る3グリッド分を用意
    SWITCH $POSX
    CASE 31THEN
     _OBJ_ANIME( C03GYM0101_SUNGLASSES_01,anm_sunglasses_move_d )
     _OBJ_ANIME_WAIT()
     
    CASE 32 THEN
     _OBJ_ANIME( C03GYM0101_SUNGLASSES_01,anm_sunglasses_move_e )
     _OBJ_ANIME_WAIT()
     
    CASE 33 THEN
     _OBJ_ANIME( C03GYM0101_SUNGLASSES_01,anm_sunglasses_move_f )
     _OBJ_ANIME_WAIT()
 
    DEFAULT
    ENDSWITCH
    }
    
    //============フラグワーク操作=============//

	//ガイドのおいしい水をくれるイベントを無効にする
	_FLAG_SET( FE_C03GYM_ITEM )

	//========================================//

ENDIF
EVENT_END

//--------------------------------------------------------------------
//サングラス：！マーク
//--------------------------------------------------------------------
_ANIME_LABEL	anm_obj_gyoe
	_ANIME_DATA	AC_MARK_GYOE,1
	_ANIME_DATA	ACMD_END,0
	
//--------------------------------------------------------------
//	サングラス：POSでサングラス移動
//--------------------------------------------------------------
	_ANIME_LABEL	anm_sunglasses_move_a 
	_ANIME_DATA	AC_STAY_WALK_L_8F,1
	_ANIME_DATA	AC_WALK_L_8F,3
	_ANIME_DATA	AC_STAY_WALK_D_8F,1
	_ANIME_DATA	AC_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0
	
//--------------------------------------------------------------
//	サングラス：POSでサングラス移動
//--------------------------------------------------------------
	_ANIME_LABEL	anm_sunglasses_move_b 
	_ANIME_DATA	AC_STAY_WALK_L_8F,1
	_ANIME_DATA	AC_WALK_L_8F,2
	_ANIME_DATA	AC_STAY_WALK_D_8F,1
	_ANIME_DATA	AC_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------
//	サングラス：POSでサングラス移動
//--------------------------------------------------------------
	_ANIME_LABEL	anm_sunglasses_move_c 
	_ANIME_DATA	AC_STAY_WALK_L_8F,1
	_ANIME_DATA	AC_WALK_L_8F,1
	_ANIME_DATA	AC_STAY_WALK_D_8F,1
	_ANIME_DATA	AC_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------
//	サングラス：POSでサングラス移動
//--------------------------------------------------------------
	_ANIME_LABEL	anm_sunglasses_move_d
	_ANIME_DATA	AC_DIR_U,1
	_ANIME_DATA	AC_WALK_U_8F,1
	_ANIME_DATA	AC_STAY_WALK_R_8F,1
	_ANIME_DATA	AC_WALK_R_8F,3
	_ANIME_DATA	AC_STAY_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0
		
//--------------------------------------------------------------
//	サングラス：POSでサングラス移動
//--------------------------------------------------------------
	_ANIME_LABEL	anm_sunglasses_move_e
	_ANIME_DATA	AC_DIR_U,1
	_ANIME_DATA	AC_WALK_U_8F,1
	_ANIME_DATA	AC_STAY_WALK_R_8F,1
	_ANIME_DATA	AC_WALK_R_8F,2
	_ANIME_DATA	AC_STAY_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0

//--------------------------------------------------------------
//	サングラス：POSでサングラス移動
//--------------------------------------------------------------
	_ANIME_LABEL	anm_sunglasses_move_f
	_ANIME_DATA	AC_DIR_U,1
	_ANIME_DATA	AC_WALK_U_8F,1
	_ANIME_DATA	AC_STAY_WALK_R_8F,1
	_ANIME_DATA	AC_WALK_R_8F,1
	_ANIME_DATA	AC_STAY_WALK_D_8F,1
	_ANIME_DATA	ACMD_END,0
	
/************************************************************/
/*				石像のスクリプトイベント					*/
/************************************************************/
EVENT_START	ev_bg_c03gym0101_statue_01

	//ジムバッジを持っているのかを判定
	_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

	//ジムバッジを取得していない場合
	IF $SCWK_TEMP0 == 0 THEN
	
		_EASY_MSG ( msg_c03gym0101_statue_01 )
	
	//ジムバッジを取得している場合
	ELSE
		
		_PLAYER_NAME( 0 )
		_EASY_MSG ( msg_c03gym0101_statue_02 )
		
	ENDIF
EVENT_END

/************************************************************/
/*				石像のスクリプトイベント					*/
/************************************************************/
EVENT_START	ev_bg_c03gym0101_statue_02

	//ジムバッジを持っているのかを判定
	_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

	//ジムバッジを取得していない場合
	IF $SCWK_TEMP0 == 0 THEN
	
		_EASY_MSG ( msg_c03gym0101_statue_01 )
	
	//ジムバッジを取得している場合
	ELSE
		
		_PLAYER_NAME( 0 )
		_EASY_MSG ( msg_c03gym0101_statue_02 )
		
	ENDIF
EVENT_END

/************************************************************/
/*			ジムリーダー戦のスクリプトイベント				*/
/************************************************************/
EVENT_START	ev_c03gym0101_leader3_01

	_TALK_OBJ_START()
	//バッジフラグ取得
	_GET_BADGE_FLAG( SCWK_TEMP0, BADGE_ID_03 )

	//ジムバッジフラグで分岐
	IF $SCWK_TEMP0 == 0 THEN
		//バッジ入手前なら、ジムリーダー戦イベント
		_CALL		ev_leader3_btl

	ELSE
	
	//わざマシンを　もらったあと
		
		//【仮】トランシーバーを持っているかどうかの判定はシステムフラグ？
		//トランシーバーを持っているかどうかで分岐
		//持っている
		IF FLAG_ON( FH_01) THEN
		_EASY_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_06 )
		
		//持っていない
		ELSE
		_EASY_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_07 )
		
		ENDIF
	ENDIF
	
EVENT_END

//ジムリーダー戦
ev_leader3_btl:

	//アーティが喋る　
	//アーティ:ぬうん？　･･････キミ　どこかで　であったっけ？
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_01 )
	_BALLOONWIN_CLOSE()

	//トレーナー戦呼び出し
	_TRAINER_BTL_SET( TRID_LEADER3_01, 0 )
	
	//敗戦チェック
	_TRAINER_LOSE_CHECK( SCWK_ANSWER )
	
	_TRAINER_LOSE_CHECK( SCWK_ANSWER )
	IF $SCWK_ANSWER == SCR_BATTLE_RESULT_WIN THEN
			_TRAINER_WIN()			//勝ち(1)ならトレーナー勝利処理へ
	ELSE
			_TRAINER_LOSE()			//負け(0)ならトレーナー敗北処理へ(ここでスクリプト終了します）
	ENDIF
		
	//リーダー：戦闘後メッセージ→続けてバッジ入手へ
	//アーティが喋る　
	//アーティ:あうう　まけちゃったよ……
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_02 )
	_BALLOONWIN_CLOSE()

	//バッジ入手処理
	_SET_BADGE_FLAG( BADGE_ID_03 )		//バッジフラグon
	_PLAYER_NAME( 0 )
	
	//〜〜はベーシックバッジを入手した！
	_SYSWIN_MSG_ALLPUT_DOWN( msg_c03gym0101_leader_03 )
	_ME_PLAY( SEQ_ME_BADGE )
	_ME_WAIT()
	_SYSWIN_CLOSE()

	//ビードルバッジ　かっこいいでしょ！
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_04)
	_BALLOONWIN_CLOSE()

	//【仮】わざマシン入手処理　入手わざマシンが未定
	_ITEM_EVENT_KEYWAIT( ITEM_WAZAMASIN01, 1 )

	//リーダー：わざマシンの解説
	_BALLOONWIN_TALKOBJ_MSG( msg_c03gym0101_leader_05 )
	_LAST_KEYWAIT()
	_BALLOONWIN_CLOSE()
	
_RET

EVENT_END

/************************************************************/
/*					スイッチPOSイベント id = 0 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_00

	//スイッチアニメをコール
	$LOCALWORK10 = 0		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 0		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK0 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 1 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_01

	//スイッチアニメをコール
	$LOCALWORK10 = 1		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 1		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK1 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 2 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_02

	//スイッチアニメをコール
	$LOCALWORK10 = 2		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 2		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK2 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 3 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_03

	//スイッチアニメをコール
	$LOCALWORK10 = 3		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 3		//スイッチidを格納
	_CALL	ev_pole_unlock

	//ポール解除処理をコール
	$LOCALWORK10 = 4		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK3 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 4 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_04

	//スイッチアニメをコール
	$LOCALWORK10 = 4		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 5		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK4 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 5 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_05

	//スイッチアニメをコール
	$LOCALWORK10 = 5		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 6		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK5 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 6 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_06

	//スイッチアニメをコール
	$LOCALWORK10 = 6		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 7		//スイッチidを格納
	_CALL	ev_pole_unlock

	//ポール解除処理をコール
	$LOCALWORK10 = 8		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK6 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 7 				*/
/************************************************************/
EVENT_START	ev_pos_c03gym0101_switch_07

	//スイッチアニメをコール
	$LOCALWORK10 = 7		//スイッチidを格納
	_CALL	ev_switch_on

	//ポール解除処理をコール
	$LOCALWORK10 = 9		//スイッチidを格納
	_CALL	ev_pole_unlock

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK7 = 1

	//========================================//

EVENT_END


/************************************************************/
/*			スイッチPOSイベント　トラップ id = 8 			*/
/************************************************************/
//トレーナーが出現するスイッチ（右上）
EVENT_START	ev_pos_c03gym0101_switch_08
	//トレーナートラップ起動
	_GYM_INSECT_TR_TRAP_ON( 0 )
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその1を表示状態にする	*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr1_appear
	_FLAG_RESET( FV_C03GYM0101_TR01 )
	_OBJ_ADD( C03GYM0101_TRAINER_01 )
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその1と戦闘				*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr1_btl
	//対戦済みかチェック
	IF FLAG_OFF( FE_C03GYM_TRBTL1 ) THEN
		//対戦前の処理【仮】
		_SE_PLAY( SEQ_SE_KAIDAN )
		_SE_WAIT()

		_FLAG_SET( FE_C03GYM_TRBTL1 )

	ELSE
		//対戦後の処理
	ENDIF

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK8 = 1

	//========================================//

EVENT_END


/************************************************************/
/*					スイッチPOSイベント id = 9 				*/
/************************************************************/
//トレーナーが出現するスイッチ（左下）
EVENT_START	ev_pos_c03gym0101_switch_09
	//トレーナートラップ起動
	_GYM_INSECT_TR_TRAP_ON( 1 )
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその2を表示状態にする	*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr2_appear
	_FLAG_RESET( FV_C03GYM0101_TR02 )
	_OBJ_ADD( C03GYM0101_TRAINER_02 )
EVENT_END


/************************************************************/
/*			ジムギミック　トレーナーその2と戦闘	*/
/************************************************************/
EVENT_START	ev_prg_c03gym0101_tr2_btl
	//対戦済みかチェック
	IF FLAG_OFF( FE_C03GYM_TRBTL2 ) THEN
		//対戦前の処理【仮】
		_SE_PLAY( SEQ_SE_KAIDAN )
		_SE_WAIT()

		_FLAG_SET( FE_C03GYM_TRBTL2 )

	ELSE
		//対戦後の処理
	ENDIF

	//========================================//

	//トラップPOSイベントを無効にする
	$LOCALWORK9 = 1

	//========================================//

EVENT_END



//////////////////////////////////////////////////////////////
//					呼び出し処理：スイッチON				//
//////////////////////////////////////////////////////////////
ev_switch_on:
	//【仮】ＳＥ再生
	_SE_PLAY( SEQ_SE_KAIDAN )
	//足元のスイッチアニメを起動
	_GYM_INSECT_SW_ON( LOCALWORK10 ) 
	_SE_WAIT()
_RET


//////////////////////////////////////////////////////////////
//					呼び出し処理：ポール解除				//
//////////////////////////////////////////////////////////////
ev_pole_unlock:
	//カメラ操作（ポール前へ） [091121追加]
	_CALL	ev_camera_move_pole

	//カメラ移動終了後、少し間を持たせる？【保留】
//	_TIME_WAIT( 10 )

	//【仮】ＳＥ再生
	_SE_PLAY( SEQ_SE_KAIDAN )
	//ポール解除処理
	_GYM_INSECT_PL_ON( LOCALWORK10 )
	_SE_WAIT()

	//自機にカメラを戻す 操作スタート処理は↓のコール処理の中ですでにやっています
   	_CAMERA_RECV_MOVE( 15 )
    _CAMERA_WAIT_MOVE()	//カメラ移動待ち
	_CAMERA_BIND()		//カメラバインド
	_CAMERA_END()		//カメラ操作終了

_RET


//////////////////////////////////////////////////////////////
//			呼び出し処理：カメラ操作（ポール前へ）			//
//////////////////////////////////////////////////////////////
ev_camera_move_pole:
	_CAMERA_START()		//カメラ操作開始
    _CAMERA_PURGE()		//対象物とカメラのバインドを解く

	//ポールの前へカメラを移動させる
	IF $LOCALWORK10 == 0 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )	//一番最後の引数は移動にかかるフレーム数

	ELSIF $LOCALWORK10 == 1 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )

	ELSIF $LOCALWORK10 == 2 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )

	ELSIF $LOCALWORK10 == 3 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )

	ELSIF $LOCALWORK10 == 4 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )

	ELSIF $LOCALWORK10 == 5 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )

	ELSIF $LOCALWORK10 == 6 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )

	ELSIF $LOCALWORK10 == 7 THEN
		_CAMERA_MOVE( 8920,0,970752,794624,81920,1880064,15 )

	ELSIF $LOCALWORK10 == 8 THEN
		_CAMERA_MOVE( 8920,0,970752,1540096,81920,1880064,15 )

	ELSE
		_CAMERA_MOVE( 8920,0,970752,1540096,81920,1880064,15 )	//ポールID(9)の場合（一番右下のポール）

	ENDIF

    _CAMERA_WAIT_MOVE()	//カメラ移動待ち

	//カメラのバインドと操作終了処理はポール解除処理が終わった後にやってます

_RET


/************************************************************/
/*				トレーナー（右上）の話しかけ				*/
/************************************************************/
EVENT_START	ev_c03gym0101_trainer_01
	_TALK_OBJ_START()
EVENT_END


/************************************************************/
/*				トレーナー（左下）の話しかけ				*/
/************************************************************/
EVENT_START	ev_c03gym0101_trainer_02
	_TALK_OBJ_START()
EVENT_END


