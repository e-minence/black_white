//====================================================================
//            common_scr
//            共通・データ
//====================================================================

  .text
  .include  "scr_seq_def.h"

  .include  "../../message/dst/script/msg_common_scr.h"
  
//--------------------------------------------------------------------
//               スクリプト本体
//--------------------------------------------------------------------
_EVENT_DATA   ev_dummy
_EVENT_DATA   ev_gameover_recover_pokecen
_EVENT_DATA   ev_report_event_call_wireless
_EVENT_DATA   ev_report_event_call
_EVENT_DATA   ev_field_comm_exit_event_call
_EVENT_DATA   ev_wireless_off_message
_EVENT_DATA   ev_itemuse_ng_msg
_EVENT_DATA_END //終了

//--------------------------------------------------------------------
//  共通スクリプト  
//--------------------------------------------------------------------
//====================================================================
//====================================================================
EVENT_START ev_dummy
  //なにもしない//
EVENT_END

//====================================================================
//====================================================================
EVENT_START   ev_gameover_recover_pokecen
{
  DEFINE_LOCAL  i_px
  DEFINE_LOCAL  i_pz
  DEFINE_LOCAL  i_target_get

  //マップフェードイン
	_MAP_FADE_BLACK_IN_FORCE( )
	_MAP_FADE_END_CHECK()

  //預けるアニメ
  _PLAYER_REQUEST( FIELD_PLAYER_REQBIT_PC_AZUKE )
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_hero_azuke )
  _OBJ_ANIME_WAIT()

  //預け後に通常絵に戻す
  _PLAYER_REQUEST( FIELD_PLAYER_REQBIT_MOVE_FORM_TO_DRAW_FORM )
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_hero_azuke_wait )
  _OBJ_ANIME_WAIT()

  _PLAYER_POS_GET( i_px, i_pz )
  $i_pz -= 2  //ポケセンのお姉さんは常に自機位置からZ-2グリッドに居るはず
  _GET_OBJID( SCWK_TARGET_OBJID, i_target_get, i_px, 0, i_pz )

  _TEMOTI_POKEMON_KAIFUKU()       //手持ちポケモン回復処理

  IF $i_target_get == TRUE THEN
    _BALLOONWIN_OBJMSG( msg_common_gameover_pc_01, SCWK_TARGET_OBJID ) //まずはポケモンを回復
    _CALL sub_pc_kaifuku_anime      //回復アニメ呼び出し(SCWK_TARGET_OBJIDへの代入込み)
    _BALLOONWIN_CLOSE()
  ENDIF

  //受け取るアニメ
  _PLAYER_REQUEST( FIELD_PLAYER_REQBIT_PC_AZUKE )
  _OBJ_ANIME( MMDL_ID_PLAYER, anm_hero_uketori )
  _OBJ_ANIME_WAIT()
  _PLAYER_REQUEST( FIELD_PLAYER_REQBIT_MOVE_FORM_TO_DRAW_FORM )

  //おじぎ
  IF $i_target_get == TRUE THEN
    _OBJ_ANIME( SCWK_TARGET_OBJID, anm_pcwoman_bow )
    _OBJ_ANIME_WAIT()
  
    //メッセージ分岐
    _GET_BADGE_FLAG( SCWK_ANSWER, BADGE_ID_01 )
    IF $SCWK_ANSWER == FALSE THEN
      _BALLOONWIN_OBJMSG( msg_common_gameover_pc_02_01, SCWK_TARGET_OBJID )
    ELSE
      _BALLOONWIN_OBJMSG( msg_common_gameover_pc_02_02, SCWK_TARGET_OBJID )
    ENDIF
    _LAST_KEYWAIT()
    _BALLOONWIN_CLOSE()
  ENDIF
}
EVENT_END

//主人公預け
_ANIME_LABEL  anm_hero_azuke
  _ANIME_DATA AC_HERO_BANZAI,1
  _ANIME_DATA ACMD_END,0

//主人公預け後の立ち
_ANIME_LABEL anm_hero_azuke_wait
  _ANIME_DATA AC_DIR_U,1
  _ANIME_DATA ACMD_END,0

_ANIME_LABEL anm_
//主人公受け取り
_ANIME_LABEL  anm_hero_uketori
  _ANIME_DATA AC_HERO_BANZAI_UKE,1
  _ANIME_DATA ACMD_END,0

//おじぎ
_ANIME_LABEL  anm_pcwoman_bow
  _ANIME_DATA  AC_PC_BOW,1
  _ANIME_DATA  AC_WAIT_4F,1
  _ANIME_DATA  ACMD_END,0


//====================================================================
//サブルーチン：回復アニメ
//====================================================================
sub_pc_kaifuku_anime:
{
  DEFINE_LOCAL  i_pokect

  _OBJ_ANIME( SCWK_TARGET_OBJID, anm_heal_p01_turn_up )
  _OBJ_ANIME_WAIT()

  _GET_PARTY_POKE_COUNT( i_pokect, POKECOUNT_MODE_NOT_EGG )
  _POKECEN_RECOVER_ANIME( i_pokect )

  _OBJ_ANIME( SCWK_TARGET_OBJID, anm_heal_p01_turn_down )
  _OBJ_ANIME_WAIT()
_RET
}

//--------------------------------------------------------------------
//  左を向く
//--------------------------------------------------------------------
_ANIME_LABEL  anm_heal_p01_turn_up
  _ANIME_DATA  AC_DIR_U,1
  _ANIME_DATA  ACMD_END,0

//--------------------------------------------------------------------
//  下を向く
//--------------------------------------------------------------------
_ANIME_LABEL  anm_heal_p01_turn_down
  _ANIME_DATA  AC_DIR_D,1
  _ANIME_DATA  ACMD_END,0

//====================================================================
//====================================================================
//--------------------------------------------------------------
//  SCWK_PARAM0   セーブ結果を返すscript_def.h参照
//--------------------------------------------------------------
ev_report_event_call_wireless:
{
  DEFINE_LOCAL savemode

  // ワイヤレスセーブモード取得
  _GET_WIRELESS_SAVEMODE( savemode )

  SWITCH $savemode
  CASE WIRELESS_SAVEMODE_ON  THEN
      _CALL ev_report_event_call    // レポート処理へ
  CASE WIRELESS_SAVEMODE_OFF THEN
      $SCWK_PARAM0 = SCR_REPORT_OK  // レポート書いたとみなす
  ENDSWITCH
  _CHG_LOCAL_SCR                // ローカルスクリプトに切り替え
}
_END 

ev_report_event_call:
  _CALL sub_report_event_call
  _CHG_LOCAL_SCR                          //ローカルスクリプトに切り替え
  _END

sub_report_event_call:
{ 
  DEFINE_LOCAL  do_save_flag
  DEFINE_LOCAL  save_exists_flag
  DEFINE_LOCAL  new_save_flag
  DEFINE_LOCAL  save_size_value
  DEFINE_LOCAL  temp_work

  // 変数を初期化
  $SCWK_PARAM1 = FALSE    // セーブするかどうか
  $save_exists_flag = FALSE    // セーブデータが存在するかどうか
  $new_save_flag = FALSE    // プレイ中のデータが新規データかどうか
  $SCWK_PARAM4 = FALSE    // セーブデータ量
  $temp_work = 0        // temp

  // セーブデータの状態を取得
  _REPORT_CHECK( save_exists_flag, new_save_flag, save_size_value )
  // test
  //$save_exists_flag = TRUE
  //$new_save_flag = FALSE
  //$save_size_value = 1  

  // システムウィンドウを確実に出すために数フレーム待つ.
  // ※_BALLOONWIN_CLOSE()が呼ばれた後,
  //   実際にウィンドウを閉じるまでに数フレームの遅延が発生する.
  //   (バルーンウィンドウ本体と尻尾の部分を同時に消すため)
  //   そのため, 直前にバルーンウィンドウを閉じる処理が呼ばれていた場合,
  //   この後に表示するシステムウィンドウも一緒に閉じられてしまう.
  //_TIME_WAIT(5)

  // サブ画面を変更
  _CHNAGE_SUBSCREEN( SCR_EV_SUBSCREEN_MODE_SAVE )

  //「かいても いいですか？」
  _SYSWIN_MSG( msg_common_report_01 , POS_DOWN )
  _YES_NO_WIN( temp_work )
  IF $temp_work == 0 THEN //『はい』
    $do_save_flag = TRUE
  ENDIF
  _SYSWIN_CLOSE()

  //「すでに べつの レポートが…」
  IF ($do_save_flag == TRUE) && ($save_exists_flag == TRUE) && ($new_save_flag == TRUE) THEN
      _SYSWIN_MSG( msg_common_report_08 , POS_DOWN )
    _SYSWIN_CLOSE()
    $do_save_flag = FALSE
  ENDIF

/*
  //「うえから かいても いいですか？」
  IF ($do_save_flag == TRUE) && ($save_exists_flag == TRUE) && ($new_save_flag != TRUE) THEN
      _SYSWIN_MSG( msg_common_report_02 , POS_DOWN )
    _YES_NO_WIN( temp_work )
    _SYSWIN_CLOSE()
    IF $temp_work == 1 THEN //『いいえ』
     $do_save_flag = FALSE
    ENDIF
  ENDIF
*/

  // セーブ
  IF $do_save_flag == TRUE THEN
    //「かきこんでいます」
    SWITCH $save_size_value 
    CASE 0 THEN 
      _SYSWIN_MSG_ALLPUT( msg_common_report_03 , POS_DOWN )  //ふつう
    CASE 1 THEN
      _SYSWIN_MSG_ALLPUT( msg_common_report_09 , POS_DOWN )  //たくさん
    ENDSWITCH
    _TIME_WAIT(1) //画面に反映
    _SYSWIN_TIMEICON( SCR_SYSWIN_TIMEICON_ON )  // タイムアイコンON
    //_SE_PLAY( SEQ_SE_SYS_78 )
    _REPORT_CALL( temp_work ) // 実セーブ処理
    _SE_STOP()
    _SYSWIN_CLOSE()
    // 書き込みに成功
    IF $temp_work == TRUE THEN
      _SE_PLAY( SEQ_SE_SAVE )
      //「しっかり かきのこした！」
      _PLAYER_NAME(0)
      _SYSWIN_MSG( msg_common_report_04 , POS_DOWN )
      _AB_KEYWAIT_MARK()
      _SYSWIN_CLOSE()
      $SCWK_PARAM0 = SCR_REPORT_OK
    // 書き込みに失敗
    ELSE
      //「かけませんでした」
      _SYSWIN_MSG( msg_common_report_06 , POS_DOWN )
      _SYSWIN_CLOSE() 
      $SCWK_PARAM0 = SCR_REPORT_CANCEL  // 結果を返す
    ENDIF
  ENDIF

  // セーブしなかった場合
  IF $do_save_flag != TRUE THEN
    $SCWK_PARAM0 = SCR_REPORT_CANCEL  // 結果を返す
  ENDIF


  // サブ画面を元に戻す
  _BACK_SUBSCREEN_NORMAL()

  _RET
}

//====================================================================
/*
  フィールド通信切断処理コモン
  @retval  SCWK_PARAM0  切断処理正常終了：SCR_FIELD_COMM_EXIT_OK
  @retval  SCWK_PARAM0  切断処理中にエラー発生：SCR_FIELD_COMM_EXIT_NG
*/
//====================================================================
ev_field_comm_exit_event_call:
{
  _CALL sub_field_comm_exit_main
  _CHG_LOCAL_SCR                          //ローカルスクリプトに切り替え
}
_END

sub_field_comm_exit_main:
{
  _GET_FIELD_COMM_NO( SCWK_ANSWER )

  IF $SCWK_ANSWER == GAME_COMM_NO_NULL THEN
    $SCWK_PARAM0 = SCR_FIELD_COMM_EXIT_OK
    _RET
  ENDIF

  IF $SCWK_ANSWER == GAME_COMM_NO_INVASION THEN
    //パレス時は同意を得るまで切断しない
    _SYSWIN_MSG( msg_common_fldcomm_exit_01, POS_DOWN )
    _YES_NO_WIN( SCWK_ANSWER )

    IF $SCWK_ANSWER == SCR_NO THEN
      $SCWK_PARAM0 = SCR_FIELD_COMM_EXIT_CANCEL
      _SYSWIN_CLOSE()
      _RET
    ENDIF
    _SYSWIN_MSG( msg_common_fldcomm_exit_02, POS_DOWN )
    _FIELD_COMM_EXIT( SCWK_PARAM0 )
    _SYSWIN_CLOSE()
  ELSE
    _FIELD_COMM_EXIT( SCWK_PARAM0 )
  ENDIF
}
_RET


//====================================================================
//  「本体設定の無線通信がOFF」メッセージ
//====================================================================
ev_wireless_off_message:
  _SYSWIN_MSG( msg_common_wireless_off_keywait, POS_DOWN )
  _SYSWIN_CLOSE()
  _CHG_LOCAL_SCR    //呼び出し元スクリプトに切り替え


//====================================================================
//便利ボタンからのアイテム使用時NGメッセージ
//プログラムイベントからコールされます
//====================================================================
//--------------------------------------------------------------
//  SCWK_PARAM0   0:博士NGメッセージ,
//                1:自転車から降りられないメッセージ
//                2:ステータスのリボン画面が開けないメッセージ
//--------------------------------------------------------------
EVENT_START   ev_itemuse_ng_msg
{
  DEFINE_LOCAL  i_msg 

  $i_msg = msg_common_itemuse_ng
  $i_msg += SCWK_PARAM0

  _PLAYER_NAME(0)
  _SYSWIN_MSG( i_msg, POS_DOWN )
  _LAST_KEYWAIT()
  _SYSWIN_CLOSE()
}
EVENT_END


