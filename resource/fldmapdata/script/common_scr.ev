//====================================================================
//						common_scr
//						共通・データ
//====================================================================

	.text
	.include	"scr_seq_def.h"

  .include  "../../message/dst/script/msg_common_scr.h"
	
//--------------------------------------------------------------------
//					     スクリプト本体
//--------------------------------------------------------------------
_EVENT_DATA		ev_dummy
_EVENT_DATA		ev_heal_p01_dummy
_EVENT_DATA   ev_item_event_success
_EVENT_DATA   ev_item_event_fail
_EVENT_DATA   ev_easy_item_event
_EVENT_DATA   ev_item_event_keywait
_EVENT_DATA   ev_item_event_nowait
_EVENT_DATA   ev_gameover_recover_home
_EVENT_DATA   ev_gameover_recover_pokecen
_EVENT_DATA   ev_report_event_call
_EVENT_DATA   ev_pocket_me_set
_EVENT_DATA   ev_field_comm_exit_event_call
_EVENT_DATA_END //終了

//--------------------------------------------------------------------
//	共通スクリプト	
//--------------------------------------------------------------------
//====================================================================
//====================================================================
EVENT_START ev_dummy
  //なにもしない//
EVENT_END

//====================================================================
//  ジョーイ
//  ※pokecen_scr.evに移動しました。
//====================================================================
EVENT_START   ev_heal_p01_dummy
  _TALK_START_SE_PLAY()
	_BALLOONWIN_TALKOBJ_OPEN( msg_common_pc_heal_01 )
	_LAST_KEYWAIT()
 	_BALLOONWIN_CLOSE()
EVENT_END

//====================================================================
///  アイテム入手共通処理
//====================================================================
//--------------------------------------------------------------
//  SCWK_PARAM0 itemno
//  SCWK_PARAM1 num
//  SCWK_PARAM2 flag
//  SCWK_PARAM3 before_msg
//  SCWK_PARAM4 finish_msg
//  SCWK_PARAM5 after_msg
//  SCWK_PARAM6 メッセージアーカイブ指定ID
//--------------------------------------------------------------
//_ASM_EASY_ITEM_EVENT itemno, num, flag, before_msg, finish_msg, after_msg
ev_easy_item_event:
    _TALK_OBJ_START()

    IF FLAG_ON($SCWK_PARAM2) THEN
      //再会話メッセージ
      _BALLOONWIN_TALKOBJ_OPEN_ARC( SCWK_PARAM6, SCWK_PARAM5 )
      _AB_KEYWAIT()
      _BALLOONWIN_CLOSE()

    ELSE
      
      //入手前メッセージ
      _BALLOONWIN_TALKOBJ_OPEN_ARC( SCWK_PARAM6, SCWK_PARAM3 )
      _AB_KEYWAIT()
      _BALLOONWIN_CLOSE()

      _ADD_ITEM_CHK( SCWK_PARAM0, SCWK_PARAM1, SCWK_ANSWER)
      IF $SCWK_ANSWER == FALSE THEN
          //入手失敗システムメッセージ
          $SCWK_TEMP0 = $SCWK_PARAM0
          $SCWK_TEMP1 = $SCWK_PARAM1
          _CALL   ev_item_event_fail_sub
      ELSE
          //入手成功システムメッセージ
          $SCWK_TEMP0 = $SCWK_PARAM0
          $SCWK_TEMP1 = $SCWK_PARAM1
          _CALL   ev_item_event_sub_keywait

          //入手後メッセージ
          _BALLOONWIN_TALKOBJ_OPEN_ARC( SCWK_PARAM6, SCWK_PARAM4)
          _LAST_KEYWAIT()
          _BALLOONWIN_CLOSE()
      ENDIF
      //成功にせよ、失敗にせよフラグセット
      _FLAG_SET_WK( SCWK_PARAM2 )

    ENDIF

_CHG_LOCAL_SCR

//====================================================================
//				アイテム取得イベント(LAST_KEYWAIT)
//====================================================================
ev_item_event_keywait:
  _ADD_ITEM_CHK( SCWK_PARAM0, SCWK_PARAM1, SCWK_ANSWER)
  IF $SCWK_ANSWER == FALSE THEN
      //入手失敗システムメッセージ
      $SCWK_TEMP0 = $SCWK_PARAM0
      $SCWK_TEMP1 = $SCWK_PARAM1
      _CALL   ev_item_event_fail_sub
  ELSE
      //入手成功システムメッセージ
      $SCWK_TEMP0 = $SCWK_PARAM0
      $SCWK_TEMP1 = $SCWK_PARAM1
      _CALL   ev_item_event_sub_keywait
  ENDIF
  _CHG_LOCAL_SCR
  _END

ev_item_event_nowait:
  _ADD_ITEM_CHK( SCWK_PARAM0, SCWK_PARAM1, SCWK_ANSWER)
  IF $SCWK_ANSWER == FALSE THEN
      //入手失敗システムメッセージ
      $SCWK_TEMP0 = $SCWK_PARAM0
      $SCWK_TEMP1 = $SCWK_PARAM1
      _CALL   ev_item_event_fail_sub
  ELSE
      //入手成功システムメッセージ
      $SCWK_TEMP0 = $SCWK_PARAM0
      $SCWK_TEMP1 = $SCWK_PARAM1
      _CALL   ev_item_event_sub_nowait
  ENDIF
  _CHG_LOCAL_SCR
  _END

//====================================================================
//				アイテム取得イベント(失敗)(LAST_KEYWAIT)
//====================================================================
ev_item_event_fail:
	_CALL			ev_item_event_fail_sub
	_CHG_LOCAL_SCR													//ローカルスクリプトに切り替え
	_END

ev_item_event_fail_sub:
	//「ざんねん！バッグがいっぱいだ！」
  _TALKWIN_OPEN()
	_TALKMSG(		msg_event_item_get_03 )
	_AB_KEYWAIT() //_LAST_KEYWAIT
  _TALKWIN_CLOSE()
	_RET

//====================================================================
///				アイテム取得イベント(成功)(送りカーソル待ちなし)
//
//	SCWK_TEMP0	アイテムナンバー
//	SCWK_TEMP1	個数
//====================================================================
ev_item_event:
	_CALL			ev_item_event_sub_nowait
	_CHG_LOCAL_SCR													//ローカルスクリプトに切り替え
	_END

//--------------------------------------------------------------------
/*	送りカーソルなし(必ず最後のメッセージになる！)					*/
/*	msg_event_item_get_06											*/
//--------------------------------------------------------------------
ev_item_event_sub_nowait:
	//アイテム追加
	_ADD_ITEM( SCWK_TEMP0,SCWK_TEMP1,SCWK_ANSWER )

  _TALKWIN_OPEN()

	_CALL			pocket_me_set									//MEセット

  _CALL   ev_item_event_get_msg

	_TALKMSG(	msg_event_item_get_06 )
	_AB_KEYWAIT() //【仮】_LAST_KEYWAITにおきかえること

  _TALKWIN_CLOSE()
	_RET

//====================================================================
//				アイテム取得イベント(成功)(送りカーソル待ちあり)
//
//	SCWK_TEMP0	アイテムナンバー
//	SCWK_TEMP1	個数
//====================================================================
ev_item_event_success:
	_CALL			ev_item_event_sub_keywait
	_CHG_LOCAL_SCR													//ローカルスクリプトに切り替え
	_END

//--------------------------------------------------------------------
//	送りカーソルあり
//	msg_event_item_get_07
//--------------------------------------------------------------------
ev_item_event_sub_keywait:
  _TALKWIN_OPEN()
	//アイテム追加
	_ADD_ITEM( SCWK_TEMP0,SCWK_TEMP1,SCWK_ANSWER )

	_CALL			pocket_me_set									//MEセット

  _CALL   ev_item_event_get_msg
	_ME_WAIT()

  _TALKWIN_CLOSE()

  _TALKWIN_OPEN()

	_PLAYER_NAME(	0 )

	_ITEM_NAME(	1,SCWK_TEMP0 )

	//ポケットナンバーをSCWK_ANSWERに代入
	_GET_POCKET_ID(	SCWK_TEMP0,SCWK_ANSWER )
	_POCKET_NAME(	2,SCWK_ANSWER )

	_TALKMSG(	msg_event_item_get_07 )
  _TALKWIN_CLOSE()
	_RET

//--------------------------------------------------------------------
//--------------------------------------------------------------------
ev_item_event_get_msg:
	//ポケットナンバーをSCWK_ANSWERに代入
	_GET_POCKET_ID(	SCWK_TEMP0,SCWK_ANSWER )

  IF  $SCWK_ANSWER  == BAG_POCKET_EVENT THEN
      _PLAYER_NAME(	0 )
      _ITEM_NAME(	1,SCWK_TEMP0 )
      _TALKMSG(	msg_event_item_get_04 )		//たいせつなもの
  ELSE
      _ITEM_NAME(	0,SCWK_TEMP0 )
      _TALKMSG(	msg_event_item_get_01 )
  ENDIF

  _RET


//--------------------------------------------------------------------
//	MEセット
//--------------------------------------------------------------------
pocket_me_set:
	//ポケットナンバーをSCWK_ANSWERに代入
	_GET_POCKET_ID(	SCWK_TEMP0,SCWK_ANSWER )

  SWITCH    $SCWK_ANSWER
  CASE    BAG_POCKET_EVENT THEN
	    _ME_PLAY(	SEQ_ME_KEYITEM )

  //CASE    BAG_POKE_NORMAL, BAG_POKE_NUTS, BAG_POKE_DRUG, BAG_POKE_BALL, BAG_POKE_BATTLE THEN
  CASE    BAG_POCKET_NORMAL, BAG_POCKET_NUTS, BAG_POCKET_DRUG THEN
	    _ME_PLAY(	SEQ_ME_ITEM )

  CASE    BAG_POCKET_WAZA THEN
	    _ME_PLAY(	SEQ_ME_WAZA )

  ENDSWITCH

  _RET

ev_pocket_me_set:
  _CALL pocket_me_set
  _CHG_LOCAL_SCR
  _END

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
EVENT_START   ev_gameover_recover_home
  _ME_PLAY( SEQ_ME_ASA )
  _ME_WAIT()
  _BLACK_IN(8)
  _DISP_FADE_END_CHECK()
  //_EASY_MSG( msg_common_pc_heal_01 )  //仮

  //_BLACK_OUT(8)
  //_DISP_FADE_END_CHECK()
  //_ME_PLAY( SEQ_ME_ASA )
  //_ME_WAIT()
  //_BLACK_IN(8)
  //_DISP_FADE_END_CHECK()

  _TEMOTI_POKEMON_KAIFUKU()                         //手持ちポケモン回復処理

  //_EASY_MSG( msg_common_pc_heal_02 )  //仮
EVENT_END

//====================================================================
//====================================================================
EVENT_START   ev_gameover_recover_pokecen
  _ME_PLAY( SEQ_ME_ASA )
  _ME_WAIT()
  _WHITE_IN(8)
  _DISP_FADE_END_CHECK()
  _TEMOTI_POKEMON_KAIFUKU()                         //手持ちポケモン回復処理
  //_EASY_MSG( msg_common_pc_heal_01 )
EVENT_END

//====================================================================
//====================================================================
//--------------------------------------------------------------
//  SCWK_PARAM0   セーブ結果を返すscript_def.h参照
//--------------------------------------------------------------
ev_report_event_call:
{ 
	// 変数を初期化
  $SCWK_PARAM1 = FALSE    // セーブするかどうか
  $SCWK_PARAM2 = FALSE    // セーブデータが存在するかどうか
  $SCWK_PARAM3 = FALSE    // プレイ中のデータが新規データかどうか
  $SCWK_PARAM4 = FALSE    // セーブデータ量
  $SCWK_PARAM5 = 0        // temp

	// セーブデータの状態を取得
	_REPORT_CHECK( SCWK_PARAM2, SCWK_PARAM3, SCWK_PARAM4 )
	// test
	$SCWK_PARAM2 = TRUE
	$SCWK_PARAM3 = FALSE
	$SCWK_PARAM4 = 1	

  //「かいても いいですか？」
  _TALKWIN_OPEN()
  _TALKMSG( msg_common_report_01 )
  _YES_NO_WIN( SCWK_PARAM5 )
  _TALKWIN_CLOSE()
  IF $SCWK_PARAM5 == 0 THEN //『はい』
    $SCWK_PARAM1 = TRUE
  ENDIF

	//「すでに べつの レポートが…」
	IF ($SCWK_PARAM1 == TRUE) && ($SCWK_PARAM2 == TRUE) && ($SCWK_PARAM3 == TRUE) THEN
    _TALKWIN_OPEN()
    _TALKMSG( msg_common_report_08 )
    _AB_KEYWAIT()
    _TALKWIN_CLOSE()
		$SCWK_PARAM1 = FALSE
	ENDIF

  //「うえから かいても いいですか？」
  IF ($SCWK_PARAM1 == TRUE) && ($SCWK_PARAM2 == TRUE) && ($SCWK_PARAM3 != TRUE) THEN
    _TALKWIN_OPEN()
    _TALKMSG( msg_common_report_02 )
    _YES_NO_WIN( SCWK_PARAM5 )
    _TALKWIN_CLOSE()
    IF $SCWK_PARAM5 == 1 THEN //『いいえ』
     $SCWK_PARAM1 = FALSE
    ENDIF
  ENDIF

  // セーブ
  IF $SCWK_PARAM1 == TRUE THEN
    //「かきこんでいます」
    _TALKWIN_OPEN()
		SWITCH $SCWK_PARAM4	
    CASE 0 THEN 
			_TALKMSG( msg_common_report_10 )
		CASE 1 THEN
			_TALKMSG( msg_common_report_11 )
		CASE 2 THEN
			_TALKMSG( msg_common_report_12 )
		ENDSWITCH
    _REPORT_CALL( SCWK_PARAM5 )	// 実セーブ処理
    _TALKWIN_CLOSE()
    // 書き込みに成功
    IF $SCWK_PARAM5 == TRUE THEN
      //「しっかり かきのこした！」
			_PLAYER_NAME(0)
      _TALKWIN_OPEN()
      _TALKMSG( msg_common_report_04 )
      _AB_KEYWAIT()
      _TALKWIN_CLOSE()
			$SCWK_PARAM0 = SCR_REPORT_OK
    // 書き込みに失敗
    ELSE
      //「かけませんでした」
      _TALKWIN_OPEN()
      _TALKMSG( msg_common_report_06 )
      _AB_KEYWAIT()
      _TALKWIN_CLOSE() 
      $SCWK_PARAM0 = SCR_REPORT_CANCEL  // 結果を返す
    ENDIF
  ENDIF

  // セーブしなかった場合
  IF $SCWK_PARAM1 != TRUE THEN
    $SCWK_PARAM0 = SCR_REPORT_CANCEL  // 結果を返す
  ENDIF

	_CHG_LOCAL_SCR													//ローカルスクリプトに切り替え
	_END
}

//====================================================================
/*
  フィールド通信切断処理コモン
  @retval  SCWK_PARAM0  切断処理正常終了：SCR_FIELD_COMM_EXIT_OK
  @retval  SCWK_PARAM0  切断処理中にエラー発生：SCR_FIELD_COMM_EXIT_NG
*/
//====================================================================
ev_field_comm_exit_event_call:
{
  _CALL sub_field_comm_exit_main
	_CHG_LOCAL_SCR													//ローカルスクリプトに切り替え
}
_END

sub_field_comm_exit_main:
{
  DEFINE_LOCAL  i_comm_no
  DEFINE_LOCAL  i_ret
  
  _GET_FIELD_COMM_NO( i_comm_no )

  IF $i_comm_no == GAME_COMM_NO_NULL THEN
    $SCWK_PARAM0 = SCR_FIELD_COMM_EXIT_OK
    _RET
  ENDIF

  IF $i_comm_no == GAME_COMM_NO_INVASION THEN
    //パレス時は同意を得るまで切断しない
    _TALKMSG( msg_common_fldcomm_exit_01)
    _YES_NO_WIN( i_ret )

    IF $i_ret == SCR_NO THEN
      $SCWK_PARAM0 = SCR_FIELD_COMM_EXIT_CANCEL
      _RET
    ENDIF
    _TALKMSG( msg_common_fldcomm_exit_02)
    _FIELD_COMM_EXIT( i_ret )
    _TALKWIN_CLOSE()
  ELSE
    _FIELD_COMM_EXIT( i_ret )
  ENDIF
  
  $SCWK_PARAM0 = $i_ret
}
_RET


